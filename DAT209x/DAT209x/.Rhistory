f <- function(x) { return(3 * sin(x / 2) + x) } f(0) f(-1) f(pi)
f <- function(x) { 3 * sin(x / 2) + x } f(0) f(-1) f(pi)
curve(f, -7, 7)
curve(f, -7, 7)
x <- c("b", 2, TRUE)
str(x)
y <- c(1, 2, 3.14, 4, 5)
y
z <- c(FALSE, TRUE, 2, 3, 4) z
matrix(c(5, 4, 3, 2, 1, 0) + 2, nrow = 2) < 5
?sin
a <- 7 b <- 5 myfunc <- function(x, y) {     a <- x + y     b <- x - y     return(a * b) }
myfunc(3, 4)
plot(sin, 0, 2 * pi)
plot(sin, - pi, 2 * pi)
plot(sin, - pi, pi)
plot(sin, pi, 3 * pi)
plot(sin, - pi, pi)
?cat
?density
?if
?"if"
? "if"
my.display <- function(x) {     cat("Summary of input: \n")     return(summary(x)) } x <- rnorm(1000) my.display(x)
?hist
?density
my.display <- function(x, display = FALSE, type = "none", prob = !freq) {     if (display) {         if (type == "hist") {             hist(x)         } elseif (type = "density") {             density(x)         } elseif (type == "none") {             print("”Please specify type as either hist or density”")         }     }     cat("Summary of input: \n")     return(summary(x)) }
my.display <- function(x, display = FALSE, type = "none", prob = !freq) {     if (display) {         if (type == "hist") {             hist(x)         } elseif (type = "density") {             density(x)         } elseif (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) }
? "if"
?hist
set.seed(1234) my.data <- rnorm(200) my.display(my.data)
my.display(my.data, display = TRUE, type = "hist")
my.display <- function(x, display = FALSE, type = "none", prob = FALSE) {     if (display) {         if (type == "hist") {             if (prob)                 hist(x, freq = TRUE)             else                 hist(x)         } else if (type == "density") {             density(x)         } else if (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) }
set.seed(1234) my.data <- rnorm(200) my.display(my.data) my.display(my.data, display = TRUE, type = "hist")
my.display(my.data, display = TRUE, type = "hist", prob = TRUE)
my.display(my.data, display = TRUE, type = "hist", prob = TRUE)
my.display <- function(x, display = FALSE, type = "none", prob = FALSE) {     if (display) {         if (type == "hist") {             if (prob == TRUE)                 hist(x, freq = FALSE)             else                 hist(x)         } else if (type == "density") {             density(x)         } else if (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) } set.seed(1234) my.data <- rnorm(200) my.display(my.data) my.display(my.data, display = TRUE, type = "hist") my.display(my.data, display = TRUE, type = "hist", prob = TRUE)
my.display(my.data, display = TRUE, type = "density")
my.display(my.data, display = TRUE, type = "density")
my.display(my.data, display = TRUE, type = "density")
my.display(my.data, display = TRUE, type = "density")
?density
?plot
my.display <- function(x, display = FALSE, type = "none", prob = FALSE) {     if (display) {         if (type == "hist") {             if (prob == TRUE)                 hist(x, freq = FALSE)             else                 hist(x)         } else if (type == "density") {             plot(x,density(x))         } else if (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) } set.seed(1234) my.data <- rnorm(200) my.display(my.data) my.display(my.data, display = TRUE, type = "hist") my.display(my.data, display = TRUE, type = "hist", prob = TRUE) my.display(my.data, display = TRUE, type = "density")
?plot
methods(plot)
?plot.density
my.display <- function(x, display = FALSE, type = "none", prob = FALSE) {     if (display) {         if (type == "hist") {             if (prob == TRUE)                 hist(x, freq = FALSE)             else                 hist(x)         } else if (type == "density") {             plot(density(x))         } else if (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) } set.seed(1234) my.data <- rnorm(200) my.display(my.data) my.display(my.data, display = TRUE, type = "hist") my.display(my.data, display = TRUE, type = "hist", prob = TRUE) my.display(my.data, display = TRUE, type = "density")
my.display(my.data, display = TRUE)
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 }
my.data <- data.exercise.3.1
head(my.data)
my.data <- data.exercise.3.1 head(my.data)
dim(my.data)
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 } my.data <- data.exercise.3.1 head(my.data) dim(my.data)
dim(my.data)[1]
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 } #my.data <- data.exercise.3.1 #head(my.data) #dim(my.data)[1] for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>"))     } else {         print("Too many negative values")         break     } }
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 } my.data <- data.exercise.3.1 head(my.data)
for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>"))     } else {         print("Too many negative values")         break     } }
for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     cnt <- 0     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>\n"))     } else {         cnt <- cnt + 1         if (cnt == 3) {             print("Too many negative values")             break         }     } }
for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     cnt <- 0     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>\n"))     } else {         cnt <- cnt + 1         if (cnt == 3) {             print("Too many negative values")             break         }     } }
my.data <- data.exercise.3.1 head(my.data)
cnt <- 0 for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>\n"))     } else {         cnt <- cnt + 1         if (cnt == 3) {             print("Too many negative values")             break         }     } }
cnt <- 0 for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else {         cnt <- cnt + 1         if (cnt < 3) {             print(cat("<Row ", i, " contains negative values>\n"))         } else {             print("Too many negative values")             break         }     } }
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 } my.data <- data.exercise.3.1 head(my.data) #dim(my.data)[1] cnt <- 0 for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else {         cnt <- cnt + 1         if (cnt <= 3) {             print(cat("<Row ", i, " contains negative values>\n"))         } else {             print("Too many negative values")             break         }     } }
my.dimensions <- c(10, 20, 50, 100, 200, 500, 800, 1000) my.runtime.factors <- numeric(8) r <- 1 k <- my.dimensions[r] y <- matrix(rnorm(k ^ 2), nrow = k) z <- 0 * y time1 <- as.numeric(Sys.time()) #loop: for (i in 1:k) {     for (j in 1:k) {         z[i, j] <- y[i, j] ^ 2     } } time2 <- as.numeric(Sys.time()) time3 <- as.numeric(Sys.time()) # using object form in R:z<-y^2 time4 <- as.numeric(Sys.time()) # run time increase factor:  my.runtime.factors[r] <- (time2 - time1) / (time4 - time3) #Lastly, we plot the runtime factors against the number of elements i
plot(my.dimensions ^ 2, my.runtime.factors, log = "xy", xlab = "Number of operations")
my.dimensions <- c(10, 20, 50, 100, 200, 500, 800, 1000) my.runtime.factors <- numeric(8) r <- 1 k <- my.dimensions[r] y <- matrix(rnorm(k ^ 2), nrow = k) z <- 0 * y time1 <- as.numeric(Sys.time()) #loop: for (i in 1:k) {     for (j in 1:k) {         z[i, j] <- y[i, j] ^ 2     } } time2 <- as.numeric(Sys.time()) time3 <- as.numeric(Sys.time()) # using object form in R:z<-y^2 time4 <- as.numeric(Sys.time()) # run time increase factor:  my.runtime.factors[r] <- (time2 - time1) / (time4 - time3) #Lastly, we plot the runtime factors against the number of elements i plot(my.dimensions ^ 2, my.runtime.factors, log = "xy", xlab = "Number of operations")
my.dimensions <- c(10, 20, 50, 100, 200, 500, 800, 1000) my.runtime.factors <- numeric(8) r <- 1 k <- my.dimensions[r] y <- matrix(rnorm(k ^ 2), nrow = k) z <- 0 * y time1 <- as.numeric(Sys.time()) #loop: for (i in 1:k) {     for (j in 1:k) {         z[i, j] <- y[i, j] ^ 2     } } time2 <- as.numeric(Sys.time()) time3 <- as.numeric(Sys.time()) # using object form in R:z<-y^2 time4 <- as.numeric(Sys.time()) # run time increase factor:  my.runtime.factors[r] <- (time2 - time1) / (time4 - time3) #Lastly, we plot the runtime factors against the number of elements i plot(my.dimensions ^ 2, my.runtime.factors, log = "xy", xlab = "Number of operations")
k1 <- 10 k2 <- 100000 my.data <- as.data.frame(matrix(rnorm(k1 * k2), nrow = k1)) mean1 <- numeric(k2) mean2 <- numeric(k2) for (i in 1:k2) {     mean1[i] <- mean(my.data[, i]) } time1 <- as.numeric(Sys.time()) for (i in 1:k2) {     mean1[i] <- mean(my.data[, i]) } time2 <- as.numeric(Sys.time()) time3 <- as.numeric(Sys.time()) mean2 <- sapply(my.data, mean) time4 <- as.numeric(Sys.time()) (time2 - time1) / (time4 - time3)
for (i in 0:10) {     if (i %% 2 != 0) cat(i)     }
notfound <- TRUE i <- 0 while (notfound) {     if (i %% 2 != 0) {         cat(i)         notfound <- FALSE     } }
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE, FALSE, FALSE, TRUE)) lapply(x, mean)
k <- 1000 r <- 100 set.seed(5556) x <- as.data.frame(matrix(rnorm(r * k), nrow = r))
dim(x)
k <- 1000 r <- 100 set.seed(5556) x <- as.data.frame(matrix(rnorm(r * k), nrow = k)) dim(x)
my.summary <- matrix(nrow = 4, ncol = k)
my.summary
head(my.summary)
k <- 1000 r <- 100 set.seed(5556) x <- as.data.frame(matrix(rnorm(r * k), nrow = k)) dim(x) my.summary <- matrix(nrow = 4, ncol = k)
head(my.summary)
?sapply
x <- matrix(1:12, 4) x[cbind(c(1, 3, 2), c(3, 3, 2))] #first selection
x
x[c(1, 3, 2), c(3, 3, 2)]
row <- matrix(rep(1:100, 100), nrow = 100) column <- matrix(rep(1:100, 100), nrow = 100, byrow = T) A <- 3 * column ^ 3 / (1 + row * column)
row
column
x <- 1:3 y <- seq(4, 8) z <- rep(9:10, 1)
xyz <- c(x, y, z)
xyz
x <- 1:10
x[rep(c(FALSE, TRUE), 5)]
x <- 1:10 x[2 * (1:5) - 1]
x <- matrix(-4:5, nrow = 2) x
set.seed(9852) my.data <- list() for (i in 1:100) {     my.data[[i]] <- matrix(rnorm(16), nrow = 4) } my.index <- list() for (i in 1:100) {     my.index[[i]] <- (my.data[[i]] < 0)  } my.negatives <- matrix(rep(0, 16), nrow = 4) for (i in 1:100) {     my.negatives <- my.negatives + my.index[[i]] } my.negatives
sum(my.negatives)
my.negative.values <- numeric(0) for (i in 1:100) {     my.negative.values <- c(my.negative.values, my.data[[i]][my.index[[i]]]) }
my.negative.values
summary(my.negative.values)
getwd()
df <- read.table("grade.txt", header = TRUE, nrow = 12)
df
df <- read.table("grade.txt", header = TRUE, skip = 2, nrow = 12, sep = ",") df
df <- read.csv("grade.txt", header = TRUE, skip = 2, nrow = 12) df
vec.readLines("dat.txt")
vec <- readLines("dat.txt")
vec <- readLines("dat.txt")
vec
vec <- readLines("dat.txt") vec < strsplit(vec[2]," ") vec
vec < strsplit(vec[[1]]) vec
vec <- readLines("dat.txt") vec < strsplit(vec[2],",") vec
vec <- readLines("dat.txt") str(vec)
vec <- readLines("dat.txt")
vec
vec[2]
vec <- readLines("dat.txt") vec <- strsplit(vec[2],",") vec
vec <- readLines("dat.txt") vec <- strsplit(vec[2],",") vec <- as.numeric(vec[[1]]) vec
vec <- readLines("dat.txt")
vec[2]
vec <- strsplit(vec[2], " ")
vec
vec <- as.numeric(vec[[1]]) vec
vec <- readLines("dat.txt") vec <- strsplit(vec[2], " ") vec <- as.numeric(vec[[1]]) vec
f1 <- file("dat.txt", open = "r") scan(f1, what = "", nlines = 2)
f1 <- file("Assignment 5.dat", open = "r") 
f1
f1
my.data <- read.table(f1, skip = 4, comment.char = "%", nrows = 7) my.data
set.seed(9007) my.data <- data.frame(x = rnorm(10), y = rnorm(10) + 5, z = rchisq(10, 1)) additional.data <- data.frame(x = rnorm(3), y = rnorm(3) + 5, z = rchisq(3, 1)) write.table(my.data, "Data/Exercise 6.1.txt", row.names = FALSE, col.names = FALSE) write.table(additional.data, "Data/Exercise 6.1.txt", row.names = FALSE, col.names = FALSE, append = T)
set.seed(9007) my.data <- data.frame(x = rnorm(10), y = rnorm(10) + 5, z = rchisq(10, 1)) additional.data <- data.frame(x = rnorm(3), y = rnorm(3) + 5, z = rchisq(3, 1)) write.table(my.data, "Exercise 6.1.txt", row.names = FALSE, col.names = FALSE) write.table(additional.data, "Exercise 6.1.txt", row.names = FALSE, col.names = FALSE, append = T)
set.seed(45) my.data <- data.frame(x = rnorm(10), y = rnorm(10), z = rnorm(10)) save(my.data, file = "Data/Exercise 6.4.Rdata") rm(my.data) load("Data/Exercise 6.4 .Rdata") head(my.data)
set.seed(45) my.data <- data.frame(x = rnorm(10), y = rnorm(10), z = rnorm(10)) save(my.data, file = "Data/Exercise 6.4.Rdata")
set.seed(45) my.data <- data.frame(x = rnorm(10), y = rnorm(10), z = rnorm(10)) save(my.data, file = "Exercise 6.4.Rdata") rm(my.data) load("Exercise 6.4 .Rdata") head(my.data)
set.seed(45) my.data <- data.frame(x = rnorm(10), y = rnorm(10), z = rnorm(10)) save(my.data, file = "Exercise 6.4.Rdata") rm(my.data) load("Exercise 6.4.Rdata") head(my.data)
mtcars
write.table(mtcars, file = "mtcars1.txt", sep = ",")
write.csv(mtcars, file = "mtcars2.txt")
?sink
?cat
?save
set.seed(9007) my.data <- data.frame(x = rnorm(10), y = rnorm(10) + 5, z = rchisq(10, 1))
?write.table;
?round
set.seed(9007) my.data <- data.frame(x = rnorm(10), y = rnorm(10) + 5, z = rchisq(10, 1)) my.data2 <- my.data * 10e5 write.table(my.data2, "Assignment 6c.txt", row.names = FALSE) my.data3 <- read.table("Assignment 6c.txt", header = TRUE) / 10e5
my.data[1, 1] my.data3[1, 1]
options(digits = 20) my.data[1, 1] my.data3[1, 1]
options(digits = 20) my.data[1, 1]-my.data3[1, 1]
library(RODBC) connStr <- paste(     "Server=msedxeus.database.windows.net",     "Database=DAT209x01",     "uid=RLogin",     "pwd=P@ssw0rd",     "Driver={SQL Server}",     sep = ";" ) conn <- odbcDriverConnect(connStr) sqlTables(conn, tableType = "TABLE")
sqlColumns(conn, "bi.sentiment")[c("COLUMN_NAME", "TYPE_NAME")]
sqlQuery(conn, "SELECT COUNT(*) FROM bi.sentiment")
my.data.frame <- sqlQuery(conn,                          "SELECT AVG(Score),Date                           FROM bi.sentiment                           WHERE State='WA'                           GROUP BY Date"                         )
names(my.data.frame) <- c("Average Score", "Date") my.data.frame
?sqlFetch
?odbcClose
my.data.frame <- my_func(conn,                          "SELECT SUM(Revenue), SUM(Units), ProductID                          FROM bi.salesFact                          WHERE Date > '2013-12-31' AND Date < '2015-01-01'                          GROUP BY ProductID" )
my.data.frame <- sqlQuery(conn,                          "SELECT SUM(Revenue), SUM(Units), ProductID                          FROM bi.salesFact                          WHERE Date > '2013-12-31' AND Date < '2015-01-01'                          GROUP BY ProductID" )
my.data.frame
names(my.data.frame) <- c("SUM(Revenue)", "SUM(Units)", "ProductID")
my.data.frame
my.data.frame <- sqlQuery(conn,                          "SELECT SUM(Revenue), SUM(Units), ProductID                          FROM bi.salesFact                          WHERE Date > '2013-12-31' AND Date < '2015-01-01'                          GROUP BY ProductID" )
my.data.frame
names(my.data.frame) <- c("SUM(Revenue)", "SUM(Units)", "ProductID")
my.data.frame
my.data.frame[with(my.data.frame, order(-SUM(Units)))]
my.data.frame[order( - my.data.frame$SUM(Units)))]
names(df) <- c("revenue","units", "ProductID")
my.data.frame names(my.data.frame) <- c("SUM(Revenue)", "SUM(Units)", "ProductID")
df <- my.data.frame
names(df) <- c("revenue","units", "ProductID")
head(df[order( - df$units),])
head(df[order( - df$revenue),])
data.frame.x <- data.frame(names = c("Gretha", "Robert", "John", "Heather"),               age = c(30, 18, 25, 70),               nickname = c("Quicksilver", "The Man", "Nifty", "Starlight")) data.frame.y <- data.frame("Person_name" = c("William", "Nancy", "Charlotte", "Henry"),               age = c(15, 75, 32, 51),               "pet_dog" = c("King", "Whity", "Captain Vom", "Doggie"))
data.frame.z <- merge(data.frame.y, data.frame.x,                     by.x = c("Person_name", "age"),                     by.y = c("names", "age"), all = TRUE) data.frame.z
names(iris) levels(iris$Species) median(iris$Sepal.Length) setosa.data <- subset(iris,   Species == "setosa" & Sepal.Length < median(Sepal.Length),   select = -Species) summary(setosa.data)
my.text<-"Over the last decade, bluetongue virus have spread northwards from the mediterranean area. Initially this was ascribed to climate changes, but it has since been realized that a major contributing factor has been new transmitting vectors, culicoides obsoletus and culicoides pulicaris, which have the ability to aquire and transmit the disease. Recently, schmallenberg virus has emerged in northern europe, transmitted by biting midges as well." my.lowercase<-c("bluetongue","culicoides","europe","mediterranean", "northern","schmallenberg") my.uppercase<-c("Bluetongue","Culicoides","Europe","Mediterranean", "Northern","Schmallenberg") my.new.text <- my.text for (i in 1:length(my.lowercase)) {     my.new.text <- gsub(my.lowercase[i], my.uppercase[i], my.new.text) }
my.new.text
Set.seed(885) my.posixct <- as.POSIXct(sample((60 * 60 * 24 * 365 * 50):(60 * 60 * 24 * 365 * 55), 20),                        origin = as.Date("1960-01-01"))
set.seed(885) my.posixct <- as.POSIXct(sample((60 * 60 * 24 * 365 * 50):(60 * 60 * 24 * 365 * 55), 20),                        origin = as.Date("1960-01-01"))
set.seed(885) my.posixct <- as.POSIXct(sample((60 * 60 * 24 * 365 * 50):(60 * 60 * 24 * 365 * 55), 20),                        origin = as.Date("1960-01-01")) my.posixct my.posixct2 <- my.posixct + 9010 head(data.frame(my.posixct, my.posixct2))
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4))
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4)) names(dat1) <- c("name", "age") dat2 < data.grame(c("vic", "male"), c("Jon", "male"), c("Cat", "female")) names(dat2) <- c("name", "gender") merge(dat1, dat2)
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4)) names(dat1) <- c("name", "age") dat2 <- data.grame(c("vic", "male"), c("Jon", "male"), c("Cat", "female")) names(dat2) <- c("name", "gender") merge(dat1, dat2)
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4)) names(dat1) <- c("name", "age") dat2 <- data.frame(c("vic", "male"), c("Jon", "male"), c("Cat", "female")) names(dat2) <- c("name", "gender") merge(dat1, dat2)
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4)) names(dat1) <- c("name", "age")
dat2 <- data.frame(c("vic", "male"), c("Jon", "male"), c("Cat", "female")) names(dat2) <- c("name", "gender")
dat1 dat2
dat2 <- data.frame(c("Vic", "male"), c("Jon", "male"), c("Cat", "female"))
dat2
names(dat2) <- c("name", "gender")
dat2
dat1
dat1 <- data.frame(c("Cat", "Vic", "Osc"), c(9, 7, 4)) names(dat1) <- c("name", "age")
dat1
dat1 <- data.frame(c("Cat", "Vic", "Osc"), c(9, 7, 4)) names(dat1) <- c("name", "age") dat2 <- data.frame(c("Vic", "Jon", "Cat"), c("male","male","female")) dat2
dat1 <- data.frame(c("Cat", "Vic", "Osc"), c(9, 7, 4)) names(dat1) <- c("name", "age") dat2 <- data.frame(c("Vic", "Jon", "Cat"), c("male","male","female")) names(dat2) <- c("name", "gender") dat2
dat1 <- data.frame(c("Cat", "Vic", "Osc"), c(9, 7, 4)) names(dat1) <- c("name", "age") dat2 <- data.frame(c("Vic", "Jon", "Cat"), c("male","male","female")) names(dat2) <- c("name", "gender") dat1 dat2
merge(dat1, dat2)
merge(dat1, dat2) merge(dat1, dat2, all = TRUE)
?julian
your.days <- c(julian(your.dates))
set.seed(449) your.dates <- as.Date(sample(18000:20000, 20), origin = "1960-01-01") your.days <- c(julian(your.dates))
your.days
your.days <- c(julian(your.dates))
your.days <- c(julian(your.dates, origin = "1960-01-01")) your.days
your.days <- c(julian(your.dates, origin = as.Date("1960-01-01"))) your.days
your.days <- c(julian(your.dates, origin = c(1, 1, 1960))) your.days
your.days <- c(julian(your.dates, origin = as.Date("1960-01-01"))) your.days
set.seed(119) my.days <- sample(18000:20000, 20)
install.packages("chron")
library(chron)
my.days.structure <- month.day.year(my.days)
my.days.structure
my.days.structure <- month.day.year(my.days, origin = "1960-01-01")
my.days.structure <- month.day.year(my.days, origin = as.Date("1960-01-01"))
my.days.structure <- month.day.year(my.days, origin = c(1, 1, 1960))
my.days.structure
my.dates <- as.Date(my.days, origin = "1960-01-01")
my.date.info <- cbind(Weekday = weekdays(my.dates), my.days.structure)
my.date.info <- rbind(Weekday = weekdays(my.dates), my.days.structure)
my.dates <- as.Date(my.days, origin = "1960-01-01") my.date.info <- data.frame(Weekday = weekdays(my.dates), my.days.structure)
my.date.info
