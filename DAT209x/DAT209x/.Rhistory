f <- function(x) { return(3 * sin(x / 2) + x) } f(0) f(-1) f(pi)
f <- function(x) { 3 * sin(x / 2) + x } f(0) f(-1) f(pi)
curve(f, -7, 7)
curve(f, -7, 7)
x <- c("b", 2, TRUE)
str(x)
y <- c(1, 2, 3.14, 4, 5)
y
z <- c(FALSE, TRUE, 2, 3, 4) z
matrix(c(5, 4, 3, 2, 1, 0) + 2, nrow = 2) < 5
?sin
a <- 7 b <- 5 myfunc <- function(x, y) {     a <- x + y     b <- x - y     return(a * b) }
myfunc(3, 4)
plot(sin, 0, 2 * pi)
plot(sin, - pi, 2 * pi)
plot(sin, - pi, pi)
plot(sin, pi, 3 * pi)
plot(sin, - pi, pi)
?cat
?density
?if
?"if"
? "if"
my.display <- function(x) {     cat("Summary of input: \n")     return(summary(x)) } x <- rnorm(1000) my.display(x)
?hist
?density
my.display <- function(x, display = FALSE, type = "none", prob = !freq) {     if (display) {         if (type == "hist") {             hist(x)         } elseif (type = "density") {             density(x)         } elseif (type == "none") {             print("”Please specify type as either hist or density”")         }     }     cat("Summary of input: \n")     return(summary(x)) }
my.display <- function(x, display = FALSE, type = "none", prob = !freq) {     if (display) {         if (type == "hist") {             hist(x)         } elseif (type = "density") {             density(x)         } elseif (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) }
? "if"
?hist
set.seed(1234) my.data <- rnorm(200) my.display(my.data)
my.display(my.data, display = TRUE, type = "hist")
my.display <- function(x, display = FALSE, type = "none", prob = FALSE) {     if (display) {         if (type == "hist") {             if (prob)                 hist(x, freq = TRUE)             else                 hist(x)         } else if (type == "density") {             density(x)         } else if (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) }
set.seed(1234) my.data <- rnorm(200) my.display(my.data) my.display(my.data, display = TRUE, type = "hist")
my.display(my.data, display = TRUE, type = "hist", prob = TRUE)
my.display(my.data, display = TRUE, type = "hist", prob = TRUE)
my.display <- function(x, display = FALSE, type = "none", prob = FALSE) {     if (display) {         if (type == "hist") {             if (prob == TRUE)                 hist(x, freq = FALSE)             else                 hist(x)         } else if (type == "density") {             density(x)         } else if (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) } set.seed(1234) my.data <- rnorm(200) my.display(my.data) my.display(my.data, display = TRUE, type = "hist") my.display(my.data, display = TRUE, type = "hist", prob = TRUE)
my.display(my.data, display = TRUE, type = "density")
my.display(my.data, display = TRUE, type = "density")
my.display(my.data, display = TRUE, type = "density")
my.display(my.data, display = TRUE, type = "density")
?density
?plot
my.display <- function(x, display = FALSE, type = "none", prob = FALSE) {     if (display) {         if (type == "hist") {             if (prob == TRUE)                 hist(x, freq = FALSE)             else                 hist(x)         } else if (type == "density") {             plot(x,density(x))         } else if (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) } set.seed(1234) my.data <- rnorm(200) my.display(my.data) my.display(my.data, display = TRUE, type = "hist") my.display(my.data, display = TRUE, type = "hist", prob = TRUE) my.display(my.data, display = TRUE, type = "density")
?plot
methods(plot)
?plot.density
my.display <- function(x, display = FALSE, type = "none", prob = FALSE) {     if (display) {         if (type == "hist") {             if (prob == TRUE)                 hist(x, freq = FALSE)             else                 hist(x)         } else if (type == "density") {             plot(density(x))         } else if (type == "none") {             print("Please specify type as either hist or density")         }     }     cat("Summary of input: \n")     return(summary(x)) } set.seed(1234) my.data <- rnorm(200) my.display(my.data) my.display(my.data, display = TRUE, type = "hist") my.display(my.data, display = TRUE, type = "hist", prob = TRUE) my.display(my.data, display = TRUE, type = "density")
my.display(my.data, display = TRUE)
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 }
my.data <- data.exercise.3.1
head(my.data)
my.data <- data.exercise.3.1 head(my.data)
dim(my.data)
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 } my.data <- data.exercise.3.1 head(my.data) dim(my.data)
dim(my.data)[1]
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 } #my.data <- data.exercise.3.1 #head(my.data) #dim(my.data)[1] for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>"))     } else {         print("Too many negative values")         break     } }
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 } my.data <- data.exercise.3.1 head(my.data)
for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>"))     } else {         print("Too many negative values")         break     } }
for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     cnt <- 0     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>\n"))     } else {         cnt <- cnt + 1         if (cnt == 3) {             print("Too many negative values")             break         }     } }
for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     cnt <- 0     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>\n"))     } else {         cnt <- cnt + 1         if (cnt == 3) {             print("Too many negative values")             break         }     } }
my.data <- data.exercise.3.1 head(my.data)
cnt <- 0 for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else if (neg < 3) {         print(cat("<Row ", i, " contains negative values>\n"))     } else {         cnt <- cnt + 1         if (cnt == 3) {             print("Too many negative values")             break         }     } }
cnt <- 0 for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else {         cnt <- cnt + 1         if (cnt < 3) {             print(cat("<Row ", i, " contains negative values>\n"))         } else {             print("Too many negative values")             break         }     } }
set.seed(1786) data.exercise.3.1 <- exp(matrix(rnorm(2000), nrow = 100)) index1.temp <- sample(1:100, 10) index2.temp <- sample(1:20, 10) for (i in 1:10) {     data.exercise.3.1[index1.temp[i], index2.temp[i]] <- -1 } my.data <- data.exercise.3.1 head(my.data) #dim(my.data)[1] cnt <- 0 for (i in 1:dim(my.data)[1]) {     neg <- sum(my.data[i,] < 0)     if (neg == 0) {         print(cat("The mean of row number ", i, " is ", mean(my.data[i,]), "\n"))     } else {         cnt <- cnt + 1         if (cnt <= 3) {             print(cat("<Row ", i, " contains negative values>\n"))         } else {             print("Too many negative values")             break         }     } }
my.dimensions <- c(10, 20, 50, 100, 200, 500, 800, 1000) my.runtime.factors <- numeric(8) r <- 1 k <- my.dimensions[r] y <- matrix(rnorm(k ^ 2), nrow = k) z <- 0 * y time1 <- as.numeric(Sys.time()) #loop: for (i in 1:k) {     for (j in 1:k) {         z[i, j] <- y[i, j] ^ 2     } } time2 <- as.numeric(Sys.time()) time3 <- as.numeric(Sys.time()) # using object form in R:z<-y^2 time4 <- as.numeric(Sys.time()) # run time increase factor:  my.runtime.factors[r] <- (time2 - time1) / (time4 - time3) #Lastly, we plot the runtime factors against the number of elements i
plot(my.dimensions ^ 2, my.runtime.factors, log = "xy", xlab = "Number of operations")
my.dimensions <- c(10, 20, 50, 100, 200, 500, 800, 1000) my.runtime.factors <- numeric(8) r <- 1 k <- my.dimensions[r] y <- matrix(rnorm(k ^ 2), nrow = k) z <- 0 * y time1 <- as.numeric(Sys.time()) #loop: for (i in 1:k) {     for (j in 1:k) {         z[i, j] <- y[i, j] ^ 2     } } time2 <- as.numeric(Sys.time()) time3 <- as.numeric(Sys.time()) # using object form in R:z<-y^2 time4 <- as.numeric(Sys.time()) # run time increase factor:  my.runtime.factors[r] <- (time2 - time1) / (time4 - time3) #Lastly, we plot the runtime factors against the number of elements i plot(my.dimensions ^ 2, my.runtime.factors, log = "xy", xlab = "Number of operations")
my.dimensions <- c(10, 20, 50, 100, 200, 500, 800, 1000) my.runtime.factors <- numeric(8) r <- 1 k <- my.dimensions[r] y <- matrix(rnorm(k ^ 2), nrow = k) z <- 0 * y time1 <- as.numeric(Sys.time()) #loop: for (i in 1:k) {     for (j in 1:k) {         z[i, j] <- y[i, j] ^ 2     } } time2 <- as.numeric(Sys.time()) time3 <- as.numeric(Sys.time()) # using object form in R:z<-y^2 time4 <- as.numeric(Sys.time()) # run time increase factor:  my.runtime.factors[r] <- (time2 - time1) / (time4 - time3) #Lastly, we plot the runtime factors against the number of elements i plot(my.dimensions ^ 2, my.runtime.factors, log = "xy", xlab = "Number of operations")
k1 <- 10 k2 <- 100000 my.data <- as.data.frame(matrix(rnorm(k1 * k2), nrow = k1)) mean1 <- numeric(k2) mean2 <- numeric(k2) for (i in 1:k2) {     mean1[i] <- mean(my.data[, i]) } time1 <- as.numeric(Sys.time()) for (i in 1:k2) {     mean1[i] <- mean(my.data[, i]) } time2 <- as.numeric(Sys.time()) time3 <- as.numeric(Sys.time()) mean2 <- sapply(my.data, mean) time4 <- as.numeric(Sys.time()) (time2 - time1) / (time4 - time3)
for (i in 0:10) {     if (i %% 2 != 0) cat(i)     }
notfound <- TRUE i <- 0 while (notfound) {     if (i %% 2 != 0) {         cat(i)         notfound <- FALSE     } }
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE, FALSE, FALSE, TRUE)) lapply(x, mean)
k <- 1000 r <- 100 set.seed(5556) x <- as.data.frame(matrix(rnorm(r * k), nrow = r))
dim(x)
k <- 1000 r <- 100 set.seed(5556) x <- as.data.frame(matrix(rnorm(r * k), nrow = k)) dim(x)
my.summary <- matrix(nrow = 4, ncol = k)
my.summary
head(my.summary)
k <- 1000 r <- 100 set.seed(5556) x <- as.data.frame(matrix(rnorm(r * k), nrow = k)) dim(x) my.summary <- matrix(nrow = 4, ncol = k)
head(my.summary)
?sapply
x <- matrix(1:12, 4) x[cbind(c(1, 3, 2), c(3, 3, 2))] #first selection
x
x[c(1, 3, 2), c(3, 3, 2)]
row <- matrix(rep(1:100, 100), nrow = 100) column <- matrix(rep(1:100, 100), nrow = 100, byrow = T) A <- 3 * column ^ 3 / (1 + row * column)
row
column
x <- 1:3 y <- seq(4, 8) z <- rep(9:10, 1)
xyz <- c(x, y, z)
xyz
x <- 1:10
x[rep(c(FALSE, TRUE), 5)]
x <- 1:10 x[2 * (1:5) - 1]
x <- matrix(-4:5, nrow = 2) x
set.seed(9852) my.data <- list() for (i in 1:100) {     my.data[[i]] <- matrix(rnorm(16), nrow = 4) } my.index <- list() for (i in 1:100) {     my.index[[i]] <- (my.data[[i]] < 0)  } my.negatives <- matrix(rep(0, 16), nrow = 4) for (i in 1:100) {     my.negatives <- my.negatives + my.index[[i]] } my.negatives
sum(my.negatives)
my.negative.values <- numeric(0) for (i in 1:100) {     my.negative.values <- c(my.negative.values, my.data[[i]][my.index[[i]]]) }
my.negative.values
summary(my.negative.values)
getwd()
df <- read.table("grade.txt", header = TRUE, nrow = 12)
df
df <- read.table("grade.txt", header = TRUE, skip = 2, nrow = 12, sep = ",") df
df <- read.csv("grade.txt", header = TRUE, skip = 2, nrow = 12) df
vec.readLines("dat.txt")
vec <- readLines("dat.txt")
vec <- readLines("dat.txt")
vec
vec <- readLines("dat.txt") vec < strsplit(vec[2]," ") vec
vec < strsplit(vec[[1]]) vec
vec <- readLines("dat.txt") vec < strsplit(vec[2],",") vec
vec <- readLines("dat.txt") str(vec)
vec <- readLines("dat.txt")
vec
vec[2]
vec <- readLines("dat.txt") vec <- strsplit(vec[2],",") vec
vec <- readLines("dat.txt") vec <- strsplit(vec[2],",") vec <- as.numeric(vec[[1]]) vec
vec <- readLines("dat.txt")
vec[2]
vec <- strsplit(vec[2], " ")
vec
vec <- as.numeric(vec[[1]]) vec
vec <- readLines("dat.txt") vec <- strsplit(vec[2], " ") vec <- as.numeric(vec[[1]]) vec
f1 <- file("dat.txt", open = "r") scan(f1, what = "", nlines = 2)
f1 <- file("Assignment 5.dat", open = "r") 
f1
f1
my.data <- read.table(f1, skip = 4, comment.char = "%", nrows = 7) my.data
set.seed(9007) my.data <- data.frame(x = rnorm(10), y = rnorm(10) + 5, z = rchisq(10, 1)) additional.data <- data.frame(x = rnorm(3), y = rnorm(3) + 5, z = rchisq(3, 1)) write.table(my.data, "Data/Exercise 6.1.txt", row.names = FALSE, col.names = FALSE) write.table(additional.data, "Data/Exercise 6.1.txt", row.names = FALSE, col.names = FALSE, append = T)
set.seed(9007) my.data <- data.frame(x = rnorm(10), y = rnorm(10) + 5, z = rchisq(10, 1)) additional.data <- data.frame(x = rnorm(3), y = rnorm(3) + 5, z = rchisq(3, 1)) write.table(my.data, "Exercise 6.1.txt", row.names = FALSE, col.names = FALSE) write.table(additional.data, "Exercise 6.1.txt", row.names = FALSE, col.names = FALSE, append = T)
set.seed(45) my.data <- data.frame(x = rnorm(10), y = rnorm(10), z = rnorm(10)) save(my.data, file = "Data/Exercise 6.4.Rdata") rm(my.data) load("Data/Exercise 6.4 .Rdata") head(my.data)
set.seed(45) my.data <- data.frame(x = rnorm(10), y = rnorm(10), z = rnorm(10)) save(my.data, file = "Data/Exercise 6.4.Rdata")
set.seed(45) my.data <- data.frame(x = rnorm(10), y = rnorm(10), z = rnorm(10)) save(my.data, file = "Exercise 6.4.Rdata") rm(my.data) load("Exercise 6.4 .Rdata") head(my.data)
set.seed(45) my.data <- data.frame(x = rnorm(10), y = rnorm(10), z = rnorm(10)) save(my.data, file = "Exercise 6.4.Rdata") rm(my.data) load("Exercise 6.4.Rdata") head(my.data)
mtcars
write.table(mtcars, file = "mtcars1.txt", sep = ",")
write.csv(mtcars, file = "mtcars2.txt")
?sink
?cat
?save
set.seed(9007) my.data <- data.frame(x = rnorm(10), y = rnorm(10) + 5, z = rchisq(10, 1))
?write.table;
?round
set.seed(9007) my.data <- data.frame(x = rnorm(10), y = rnorm(10) + 5, z = rchisq(10, 1)) my.data2 <- my.data * 10e5 write.table(my.data2, "Assignment 6c.txt", row.names = FALSE) my.data3 <- read.table("Assignment 6c.txt", header = TRUE) / 10e5
my.data[1, 1] my.data3[1, 1]
options(digits = 20) my.data[1, 1] my.data3[1, 1]
options(digits = 20) my.data[1, 1]-my.data3[1, 1]
library(RODBC) connStr <- paste(     "Server=msedxeus.database.windows.net",     "Database=DAT209x01",     "uid=RLogin",     "pwd=P@ssw0rd",     "Driver={SQL Server}",     sep = ";" ) conn <- odbcDriverConnect(connStr) sqlTables(conn, tableType = "TABLE")
sqlColumns(conn, "bi.sentiment")[c("COLUMN_NAME", "TYPE_NAME")]
sqlQuery(conn, "SELECT COUNT(*) FROM bi.sentiment")
my.data.frame <- sqlQuery(conn,                          "SELECT AVG(Score),Date                           FROM bi.sentiment                           WHERE State='WA'                           GROUP BY Date"                         )
names(my.data.frame) <- c("Average Score", "Date") my.data.frame
?sqlFetch
?odbcClose
my.data.frame <- my_func(conn,                          "SELECT SUM(Revenue), SUM(Units), ProductID                          FROM bi.salesFact                          WHERE Date > '2013-12-31' AND Date < '2015-01-01'                          GROUP BY ProductID" )
my.data.frame <- sqlQuery(conn,                          "SELECT SUM(Revenue), SUM(Units), ProductID                          FROM bi.salesFact                          WHERE Date > '2013-12-31' AND Date < '2015-01-01'                          GROUP BY ProductID" )
my.data.frame
names(my.data.frame) <- c("SUM(Revenue)", "SUM(Units)", "ProductID")
my.data.frame
my.data.frame <- sqlQuery(conn,                          "SELECT SUM(Revenue), SUM(Units), ProductID                          FROM bi.salesFact                          WHERE Date > '2013-12-31' AND Date < '2015-01-01'                          GROUP BY ProductID" )
my.data.frame
names(my.data.frame) <- c("SUM(Revenue)", "SUM(Units)", "ProductID")
my.data.frame
my.data.frame[with(my.data.frame, order(-SUM(Units)))]
my.data.frame[order( - my.data.frame$SUM(Units)))]
names(df) <- c("revenue","units", "ProductID")
my.data.frame names(my.data.frame) <- c("SUM(Revenue)", "SUM(Units)", "ProductID")
df <- my.data.frame
names(df) <- c("revenue","units", "ProductID")
head(df[order( - df$units),])
head(df[order( - df$revenue),])
data.frame.x <- data.frame(names = c("Gretha", "Robert", "John", "Heather"),               age = c(30, 18, 25, 70),               nickname = c("Quicksilver", "The Man", "Nifty", "Starlight")) data.frame.y <- data.frame("Person_name" = c("William", "Nancy", "Charlotte", "Henry"),               age = c(15, 75, 32, 51),               "pet_dog" = c("King", "Whity", "Captain Vom", "Doggie"))
data.frame.z <- merge(data.frame.y, data.frame.x,                     by.x = c("Person_name", "age"),                     by.y = c("names", "age"), all = TRUE) data.frame.z
names(iris) levels(iris$Species) median(iris$Sepal.Length) setosa.data <- subset(iris,   Species == "setosa" & Sepal.Length < median(Sepal.Length),   select = -Species) summary(setosa.data)
my.text<-"Over the last decade, bluetongue virus have spread northwards from the mediterranean area. Initially this was ascribed to climate changes, but it has since been realized that a major contributing factor has been new transmitting vectors, culicoides obsoletus and culicoides pulicaris, which have the ability to aquire and transmit the disease. Recently, schmallenberg virus has emerged in northern europe, transmitted by biting midges as well." my.lowercase<-c("bluetongue","culicoides","europe","mediterranean", "northern","schmallenberg") my.uppercase<-c("Bluetongue","Culicoides","Europe","Mediterranean", "Northern","Schmallenberg") my.new.text <- my.text for (i in 1:length(my.lowercase)) {     my.new.text <- gsub(my.lowercase[i], my.uppercase[i], my.new.text) }
my.new.text
Set.seed(885) my.posixct <- as.POSIXct(sample((60 * 60 * 24 * 365 * 50):(60 * 60 * 24 * 365 * 55), 20),                        origin = as.Date("1960-01-01"))
set.seed(885) my.posixct <- as.POSIXct(sample((60 * 60 * 24 * 365 * 50):(60 * 60 * 24 * 365 * 55), 20),                        origin = as.Date("1960-01-01"))
set.seed(885) my.posixct <- as.POSIXct(sample((60 * 60 * 24 * 365 * 50):(60 * 60 * 24 * 365 * 55), 20),                        origin = as.Date("1960-01-01")) my.posixct my.posixct2 <- my.posixct + 9010 head(data.frame(my.posixct, my.posixct2))
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4))
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4)) names(dat1) <- c("name", "age") dat2 < data.grame(c("vic", "male"), c("Jon", "male"), c("Cat", "female")) names(dat2) <- c("name", "gender") merge(dat1, dat2)
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4)) names(dat1) <- c("name", "age") dat2 <- data.grame(c("vic", "male"), c("Jon", "male"), c("Cat", "female")) names(dat2) <- c("name", "gender") merge(dat1, dat2)
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4)) names(dat1) <- c("name", "age") dat2 <- data.frame(c("vic", "male"), c("Jon", "male"), c("Cat", "female")) names(dat2) <- c("name", "gender") merge(dat1, dat2)
dat1 <- data.frame(c("Cat", 9), c("Vic", 7), c("Osc", 4)) names(dat1) <- c("name", "age")
dat2 <- data.frame(c("vic", "male"), c("Jon", "male"), c("Cat", "female")) names(dat2) <- c("name", "gender")
dat1 dat2
dat2 <- data.frame(c("Vic", "male"), c("Jon", "male"), c("Cat", "female"))
dat2
names(dat2) <- c("name", "gender")
dat2
dat1
dat1 <- data.frame(c("Cat", "Vic", "Osc"), c(9, 7, 4)) names(dat1) <- c("name", "age")
dat1
dat1 <- data.frame(c("Cat", "Vic", "Osc"), c(9, 7, 4)) names(dat1) <- c("name", "age") dat2 <- data.frame(c("Vic", "Jon", "Cat"), c("male","male","female")) dat2
dat1 <- data.frame(c("Cat", "Vic", "Osc"), c(9, 7, 4)) names(dat1) <- c("name", "age") dat2 <- data.frame(c("Vic", "Jon", "Cat"), c("male","male","female")) names(dat2) <- c("name", "gender") dat2
dat1 <- data.frame(c("Cat", "Vic", "Osc"), c(9, 7, 4)) names(dat1) <- c("name", "age") dat2 <- data.frame(c("Vic", "Jon", "Cat"), c("male","male","female")) names(dat2) <- c("name", "gender") dat1 dat2
merge(dat1, dat2)
merge(dat1, dat2) merge(dat1, dat2, all = TRUE)
?julian
your.days <- c(julian(your.dates))
set.seed(449) your.dates <- as.Date(sample(18000:20000, 20), origin = "1960-01-01") your.days <- c(julian(your.dates))
your.days
your.days <- c(julian(your.dates))
your.days <- c(julian(your.dates, origin = "1960-01-01")) your.days
your.days <- c(julian(your.dates, origin = as.Date("1960-01-01"))) your.days
your.days <- c(julian(your.dates, origin = c(1, 1, 1960))) your.days
your.days <- c(julian(your.dates, origin = as.Date("1960-01-01"))) your.days
set.seed(119) my.days <- sample(18000:20000, 20)
install.packages("chron")
library(chron)
my.days.structure <- month.day.year(my.days)
my.days.structure
my.days.structure <- month.day.year(my.days, origin = "1960-01-01")
my.days.structure <- month.day.year(my.days, origin = as.Date("1960-01-01"))
my.days.structure <- month.day.year(my.days, origin = c(1, 1, 1960))
my.days.structure
my.dates <- as.Date(my.days, origin = "1960-01-01")
my.date.info <- cbind(Weekday = weekdays(my.dates), my.days.structure)
my.date.info <- rbind(Weekday = weekdays(my.dates), my.days.structure)
my.dates <- as.Date(my.days, origin = "1960-01-01") my.date.info <- data.frame(Weekday = weekdays(my.dates), my.days.structure)
my.date.info
tapply(presidents, cycle(presidents), mean, na.rm = T)
presidents
summary(airquality$Wind)
my.cut <- cut(airquality$Wind, breaks = 2 * (1:11) - 1)
my.cut 
my.cut <- cut(airquality$Wind, breaks = 2 * (1:11) - 1) tapply(airquality$Solar.R, my.cut, mean, na.rm = TRUE)
summary(swiss)
summary(swiss) my.cut2 <- cut(swiss$Agriculture, breaks = 10 * (0:10)) my.cut3 <- cut(swiss$Catholic, breaks = 10 * (0:10)) tapply(swiss$Fertility, list(my.cut2, my.cut3), mean)
colMeans(airquality)
tapply(airquality, mean)
colMeans(airquality) lapply(airquality, mean)
colMeans(airquality) sapply(airquality, mean)
tapply(chickwts$weight, chickwts$feed, mean)
aggregate(weight ~ feed, data = chickwts, mean)
by(chickwts$weight, chickwts$feed, mean)
with(airquality, table(Month, Temp < 65))
with(airquality, table(Month, Temp < 65)) tapply(airquality$Month, airquality$Temp < 65)
table(LowTemp = airquality$Temp < 65, airquality$Month)
sapply(airquality, airquality$Temp < 65)
prop.table(with(airquality, table(Month, Temp > 80)), 1)
prop.table(with(airquality, table(Month, Temp > 80)), 2)
prop.table(with(airquality, table(Month, Temp > 80)), 1) prop.table(with(airquality, table(Temp > 80, Month)), 2)
as.list(sapply(airquality, mean))
my.data <- data.frame(Treatment = c(rep("A", 4), rep("B", 4)),                     Stone = rep(rep(c("Small", "Large"), c(2, 2)), 2),                     Success = rep(c(1, 0), 4),                     Count = c(81, 6, 192, 71, 234, 36, 55, 25))
dim(my.data)
my.data
my.table <- xtabs(Treatment ~ Stone + Success + Count, data = my.data)
my.table <- xtabs(Stone ~ Treatment + Success + Count, data = my.data)
my.table <- xtabs(Success ~ Treatment + Stone + Count, data = my.data)
my.table <- xtabs(Count ~ Treatment + Success + Stone, data = my.data)
my.table 
prop.table(margin.table(my.table, 1:2), 1)
prop.table(margin.table(my.table, 1:2), 1) prop.table(margin.table(my.table, 1:2), 2)
prop.table(margin.table(my.table, 1:2), 1)
prop.table(margin.table(my.table, 1:2), 2)
my.table
prop.table(my.table[,, 1], 1)
prop.table(my.table[,, 2], 1)
prop.table(my.table[,, 1], 1)
prop.table(my.table[,, 1], 1)
prop.table(my.table[,, 2], 1)
prop.table(my.table[,, 1], 1)
prop.table(my.table[,, 1], 2)
prop.table(my.table[,, 2], 2)
prop.table(my.table[,, 2], 2)
prop.table(my.table[,, 2], 1) prop.table(my.table[,, 2], 2)
my.table
prop.table(my.table[,, 2], 1)
prop.table(my.table[,, 2], 1)
prop.table(my.table[,, 1], 1)
prop.table(my.table[,, 2], 1) 
prop.table(my.table[1,,], 1)
prop.table(my.table[1,,], 2)
prop.table(my.table[2,,], 2)
prop.table(margin.table(my.table, c(1, 3)), 2)
prop.table(margin.table(my.table, 1:3), 1)
prop.table(margin.table(my.table, 1:3), 1)
prop.table(margin.table(my.table, 3:1), 2)
prop.table(margin.table(my.table, 1:3), 1) prop.table(margin.table(my.table, 3:1), 2)
prop.table(margin.table(my.table, c(3, 1)), 1) prop.table(margin.table(my.table, c(1, 3)), 2)
my.ozone <- airquality$Ozone[!is.na(airquality$Ozone) & airquality$Ozone > 1] mean.1 <- mean(my.ozone) sd.1 <- sd(my.ozone)
mean.1
sd.1
length(my.ozone)
length(my.ozone) set.seed(55789) simulated.1 <- rnorm(115, mean = mean.1, sd = sd.1) qqplot(simulated.1, my.ozone) lines(0:200, 0:200, type = "l", lwd = 3, col = "red")
mean.2 <- mean(log(my.ozone)) sd.2 <- sd(log(my.ozone)) set.seed(8942) simulated.2 <- rnorm(115, mean = mean.2, sd = sd.2) qqplot(exp(simulated.2), my.ozone) lines(0:200, 0:200, type = "l", lwd = 3, col = "red")
doone <- function() {     x <- sum(sample(1:6, 2, replace = TRUE))     y <- sum(sample(1:6, x, replace = TRUE))     y } set.seed(457778) y.values <- replicate(1000, doone()) hist(y.values)
rnorm(3, mean = 2, sd = 1)
rnorm(3, mean = 2, sd = 1)
rnorm(3, mean = 2, sd = 1)
doone <- function() {     rnorm(3, mean = 2, sd = 1) } set.seed(87346) y.values <- replicate(1000, doone()) head(y.values)
doone <- function() {     rnorm(3, mean = 2, sd = 1) } set.seed(87346) y.values <- replicate(1000, doone()) y.values <- t(y.values) head(y.values)
colMeans(y.values)
n <- 1000 doone <- function() {     x <- rbinom(1, 50, 1 / 6)     p <- x / 50     p } p.sim <- replicate(n, doone())
n <- 1000 doone <- function() {     x <- rbinom(1, 50, 1 / 6)     p <- x / 50     p } p.sim <- replicate(n, doone()) dim(p.sim)
n <- 1000 doone <- function() {     x <- rbinom(1, 50, 1 / 6)     p <- x / 50     p } p.sim <- replicate(n, doone()) head(p.sim)
n <- 1000 doone <- function() {     x <- rbinom(1, 50, 1 / 6)     p <- x / 50     p } p.sim <- replicate(n, doone()) length(p.sim)
n <- 10000 doone <- function() {     x <- rbinom(1, 50, 1 / 6)     p <- x / 50     p } p.sim <- replicate(n, doone()) length(p.sim)
doone <- function() {     x <- rbinom(1, 50, 1 / 6)     p <- x / 50     p } p.sim <- replicate(n, doone()) hist(p.sim, breaks = 20)
n<-100 doone <- function() {     x <- rbinom(1, 50, 1 / 6)     p <- x / 50     p } p.sim <- replicate(n, doone()) hist(p.sim, breaks = 20)
n<-1000 doone <- function() {     x <- rbinom(1, 50, 1 / 6)     p <- x / 50     p } p.sim <- replicate(n, doone()) hist(p.sim, breaks = 20)
getwd() df <- read.table("Lab10", header = TRUE, nrow = 12) df
getwd() df <- read.table("Lab10.csv", header = TRUE, nrow = 12) df
getwd() df <- read.table("Lab10.csv", header = TRUE, nrow = 12, sep = ",", header = T) df
getwd() df <- read.table("Lab10.csv", header = TRUE, nrow = 12, sep = ",") df
getwd() df <- read.table("Lab10.csv", header = TRUE,  sep = ",") df
getwd() df <- read.table("Lab10.csv", header = TRUE,  sep = ",") dim(df)
unique(df$Genotype)
data1 <- my.data$systolic.bp[my.data$Genotype == "BA"] data2 <- my.data$systolic.bp[my.data$Genotype == "BB"] data1 data2
getwd() my.data <- read.table("Lab10.csv", header = TRUE, sep = ",") dim(my.data) unique(my.data$Genotype) data1 <- my.data$systolic.bp[my.data$Genotype == "BA"] data2 <- my.data$systolic.bp[my.data$Genotype == "BB"] data1 data2
testResult <- t.test(data1, data2)
testResult
density(data1)
lines(density(data1))
data1
lines(density(data1), col = "blue")
lines(density(my.data$systolic.bp[my.data$Genotype == "BA"]), col = "blue")
?lines
?density
lines(density(rnorm(1000,sd=2), col = "blue") )
lines(density(rnorm(1000, sd = 2), col = "blue"))
lines(density(rnorm(1000, sd = 2), col = "blue"))
lines(density(rnorm(1000, sd = 2), col = "blue"))
plot(density(data1))
plot(density(data1)) lines(density(data2), col = "blue"))
plot(density(data1)) lines(density(data2), col = "blue")
length(data1)
set.seed(1234) my.new.data <- my.data my.new.data$Genotype <- "BB" index.temp <- sample(1:50, n1) my.new.data$Genotype[index.temp] <- "BA" new.data1 <- my.new.data$systolic.bp[my.new.data$Genotype == "BA"] new.data2 <- my.new.data$systolic.bp[my.new.data$Genotype == "BB"] t.test(new.data1, new.data2)$statistic
n1 <- length(data1) set.seed(1234) my.new.data <- my.data my.new.data$Genotype <- "BB" index.temp <- sample(1:50, n1) my.new.data$Genotype[index.temp] <- "BA" new.data1 <- my.new.data$systolic.bp[my.new.data$Genotype == "BA"] new.data2 <- my.new.data$systolic.bp[my.new.data$Genotype == "BB"] t.test(new.data1, new.data2)$statistic
p.sim <- function() { my.new.data <- my.data my.new.data$Genotype <- "BB" index.temp <- sample(1:50, n1) my.new.data$Genotype[index.temp] <- "BA" new.data1 <- my.new.data$systolic.bp[my.new.data$Genotype == "BA"] new.data2 <- my.new.data$systolic.bp[my.new.data$Genotype == "BB"] t.test(new.data1, new.data2)$statistic } my.t.values <- replicate(10000, p.sim())
length(my.t.values)
set.seed(554) p.sim <- function() { my.new.data <- my.data my.new.data$Genotype <- "BB" index.temp <- sample(1:50, n1) my.new.data$Genotype[index.temp] <- "BA" new.data1 <- my.new.data$systolic.bp[my.new.data$Genotype == "BA"] new.data2 <- my.new.data$systolic.bp[my.new.data$Genotype == "BB"] t.test(new.data1, new.data2)$statistic } my.t.values <- replicate(10000, p.sim())
head(my.t.values)
getwd() my.data <- read.table("Lab10.csv", header = TRUE, sep = ",") dim(my.data) unique(my.data$Genotype) data1 <- my.data$systolic.bp[my.data$Genotype == "BA"] data2 <- my.data$systolic.bp[my.data$Genotype == "BB"] data1 data2 testResult <- t.test(data1, data2) testResult
set.seed(554) p.sim <- function() { my.new.data <- my.data my.new.data$Genotype <- "BB" index.temp <- sample(1:50, n1) my.new.data$Genotype[index.temp] <- "BA" new.data1 <- my.new.data$systolic.bp[my.new.data$Genotype == "BA"] new.data2 <- my.new.data$systolic.bp[my.new.data$Genotype == "BB"] t.test(new.data1, new.data2)$statistic } my.t.values <- replicate(10000, p.sim()) length(my.t.values) head(my.t.values)
my.t.values[my.t.values < -2.027021]
sum(my.t.values < -2.027021)
sum(my.t.values < -2.027021) + sum(my.t.values > +2.027021)
10000/sum(my.t.values < -2.027021) + sum(my.t.values > +2.027021)
sum(my.t.values < -2.027021) + sum(my.t.values > +2.027021) / 10000
sum(my.t.values < -2.027021) + sum(my.t.values > +2.027021) / 10000
sum(my.t.values < -2.027021) + sum(my.t.values > +2.027021) / sum(my.t.values < -2.027021)
sum(my.t.values < -2.027021) + sum(my.t.values > +2.027021)
sum(my.t.values < -2.027021) + sum(my.t.values > +2.027021) / 10000
(sum(my.t.values < -2.027021) + sum(my.t.values > +2.027021)) / 10000
options(digits = 20)
set.seed(554) p.sim <- function() { my.new.data <- my.data my.new.data$Genotype <- "BB" index.temp <- sample(1:50, n1) my.new.data$Genotype[index.temp] <- "BA" new.data1 <- my.new.data$systolic.bp[my.new.data$Genotype == "BA"] new.data2 <- my.new.data$systolic.bp[my.new.data$Genotype == "BB"] t.test(new.data1, new.data2)$statistic } options(digits = 20) my.t.values <- replicate(10000, p.sim()) length(my.t.values) head(my.t.values) (sum(my.t.values < -2.027021) + sum(my.t.values > +2.027021)) / 10000
my.analysis <- lm(log(Ozone) ~ Solar.R + Wind + Temp, data = airquality[airquality > 1,]) qqnorm(my.analysis$res) sd.1 <- sd(my.analysis$res) lines((-3):3, ((-3):3) * sd.1, type = "l", lwd = 3, col = "red")
my.analysis <- lm(log(Ozone) ~ Solar.R + Wind + Temp +                 Solar.R:Wind + Solar.R:Temp + Wind:Temp,                 data = airquality[airquality > 1,]) drop1(my.analysis, test = "F")
my.analysis <- update(my.analysis, ~ . - Solar.R:Wind)
drop1(my.analysis, test = "F")
my.analysis <- update(my.analysis, ~ . - Wind:Temp) drop1(my.analysis, test = "F")
install.packages(glm2)
install.packages("glm2")
library(glm2)
data(crabs) head(crabs)
options(digits = 6) data(crabs) head(crabs)
my.analysis <- glm(satellite ~ width, family = binomial, data = crab.data) my.analysis
data(crabs) head(crabs) crab.data <- data.frame(satellite = 1 * (crabs$Satellites > 0), width = crabs$Width) my.analysis <- glm(satellite ~ width, family = binomial, data = crab.data) my.analysis
my.linear.predictor <- data.frame(   prediction = predict(my.analysis, se.fit = TRUE)$fit,   lower = predict(my.analysis, se.fit = TRUE)$fit -         1.96 * predict(my.analysis, se.fit = TRUE)$se.fit,   upper = predict(my.analysis, se.fit = TRUE)$fit +         1.96 * predict(my.analysis, se.fit = TRUE)$se.fit)
my.linear.predictor <- my.linear.predictor[order(crab.data$width),]
my.linear.predictor <- my.linear.predictor[order(crab.data$width),] logistic <- function(x) { exp(x) / (1 + exp(x)) } my.predictor <- logistic(my.linear.predictor) plot(sort(crab.data$width), my.predictor$prediction, type = "l",      xlab = 'width', ylab = 'p(satellite)') lines(sort(crab.data$width), my.predictor$upper, type = "l", lty = 2) lines(sort(crab.data$width), my.predictor$lower, type = "l", lty = 2)
data(crabs) head(crabs) crab.data <- data.frame(satellite = 1 * (crabs$Satellites > 0), width = crabs$Width) my.analysis <- glm(satellite ~ width, family = binomial, data = crab.data) my.analysis my.linear.predictor <- data.frame(   prediction = predict(my.analysis, se.fit = TRUE)$fit,   lower = predict(my.analysis, se.fit = TRUE)$fit -         1.96 * predict(my.analysis, se.fit = TRUE)$se.fit,   upper = predict(my.analysis, se.fit = TRUE)$fit +         1.96 * predict(my.analysis, se.fit = TRUE)$se.fit) my.linear.predictor <- my.linear.predictor[order(crab.data$width),] logistic <- function(x) { exp(x) / (1 + exp(x)) } my.predictor <- logistic(my.linear.predictor) plot(sort(crab.data$width), my.predictor$prediction, type = "l",      xlab = 'width', ylab = 'p(satellite)') lines(sort(crab.data$width), my.predictor$upper, type = "l", lty = 2) lines(sort(crab.data$width), my.predictor$lower, type = "l", lty = 2)
summary(crab.data$width) my.cut <- cut(crab.data$width, breaks = 20 + (0:5) * 3) my.means <- tapply(crab.data$satellite, my.cut, mean) lines(20 + (0:4) * 3 + 1.5, my.means, type = "p", pch = 16)
diabetes.data <- read.csv2("my.diabetes.data.csv") new.diabetes.data <- read.csv2("my.new.diabetes.data.csv") diabetes.data <- diabetes.data[, -1] new.diabetes.data <- new.diabetes.data[, -1]
my.model <- "gender" for (i in 2:17) { my.model <- paste(my.model, "+", names(diabetes.data)[i]) } my.formula <- as.formula(paste("readmi_class~", my.model)) my.analysis <- glm(my.formula, family = binomial(link = logit),                  data = diabetes.data)
my.linear.predictor <- c(predict(my.analysis, newdata = new.diabetes.data))
logistic <- function(x) { exp(x) / (1 + exp(x)) } predict.diabetes <- logistic(my.linear.predictor)
plot(density(predict.diabetes[new.diabetes.data$readmi_class == "YES"]),      main = "Fitted values", ylim = c(0, 4)) lines(density(predict.diabetes[new.diabetes.data$readmi_class == "NO"]), lty = 2)
install.packages("UsingR")
library(UsingR)
head(father.son)
my.analysis <- lm(sheight ~ fheight, data = father.son)
my.analysis
install.packages("R330") library(R330) data(wine.df)
install.packages("R330") library(R330)
data(wine.df)
library(R330)
wine.df
data(wine.df)
str(wine.df)
my.analysis <- lm(price ~ yearDays + temp + h.rain + w.rain, data = wine.df) my.analysis
summary(my.analysis)
my.analysis <- lm(price ~ yearDays + temp + h.rain + w.rain, data = wine.df) summary(my.analysis)
str(wine.df)
z.analysis <- lm(price ~ year + temp + h.rain + w.rain, data = wine.df)
summary(z.analysis)
z.analysis <- lm(price ~ year + temp + h.rain + w.rain, data = wine.df) summary(z.analysis)
z.analysis <- lm(price ~ year + temp + h.rain*w.rain , data = wine.df) summary(z.analysis)
my.analysis <- lm(log(Ozone) ~ Solar.R + Wind + Temp +                 Solar.R:Wind + Solar.R:Temp + Wind:Temp,                 data = airquality[airquality > 1,])
drop1(my.analysis, test = "F")
my.analysis <- lm(log(Ozone) ~ Solar.R + Wind + Temp +                 Solar.R:Wind + Solar.R:Temp + Wind:Temp,                 data = airquality[airquality > 1,])
my.analysis
z.analysis <- lm(price ~ year + temp + h.rain*w.rain , data = wine.df) summary(z.analysis)
?drop1
drop1(z.analysis, test = "F")
z.analysis <- lm(price ~ year + temp + h.rain*w.rain , data = wine.df) summary(z.analysis)
drop1(z.analysis, test = "F")
z.analysis <- lm(price ~ year + temp + h.rain*w.rain , data = wine.df) summary(z.analysis)
drop1(z.analysis, test = "F")
z.analysis <- lm(price ~ year + temp + h.rain + h.rain:w.rain, data = wine.df) summary(z.analysis)
drop1(z.analysis, test = "F")
my.analysis <- update(my.analysis, ~ . - h.rain:w.rain)
summary(z.analysis)
z.analysis <- lm(price ~ year + temp + h.rain + h.rain:w.rain, data = wine.df) summary(z.analysis) drop1(z.analysis, test = "F") my.analysis <- update(my.analysis, ~ . - h.rain:w.rain) summary(z.analysis)
z.analysis <- lm(price ~ year + temp + h.rain + h.rain:w.rain, data = wine.df) summary(z.analysis)
drop1(z.analysis, test = "F")
z.analysis <- update(z.analysis, ~ . - h.rain:w.rain)
summary(z.analysis)
z.analysis <- update(z.analysis, ~ . - year) summary(z.analysis)
z.analysis <- lm(price ~ year + temp + h.rain + h.rain:w.rain, data = wine.df) summary(z.analysis) drop1(z.analysis, test = "F")
z.analysis <- lm(price ~ year + temp + h.rain + h.rain:w.rain, data = wine.df) summary(z.analysis) drop1(z.analysis, test = "F")
z.analysis <- update(z.analysis, ~ . - h.rain:w.rain) drop1(z.analysis, test = "F")
summary(z.analysis)
z.analysis <- update(z.analysis, ~ . - year) summary(z.analysis)
z.analysis <- lm(price ~ year + temp + h.rain + h.rain:w.rain, data = wine.df) summary(z.analysis) drop1(z.analysis, test = "F") z.analysis <- update(z.analysis, ~ . - h.rain:w.rain) drop1(z.analysis, test = "F") summary(z.analysis)
z.analysis <- update(z.analysis, ~ . - temp) summary(z.analysis)
drop1(z.analysis, test = "F")
z.analysis <- lm(price ~ year + temp + h.rain + h.rain:w.rain, data = wine.df)
summary(z.analysis) drop1(z.analysis, test = "F")
summary(z.analysis)
z.analysis <- lm(price ~ year + temp + h.rain , data = wine.df)
summary(z.analysis) drop1(z.analysis, test = "F")
coef(z.analysis)
coef(z.analysis)
z.analysis <- lm(price ~ year + temp + h.rain + h.rain:w.rain, data = wine.df) summary(z.analysis)
coef(my.analysis)
coef(z.analysis)
z.analysis <- lm(price ~ year + temp + h.rain + w.rain + h.rain:w.rain, data = wine.df) summary(z.analysis)
drop1(z.analysis, test = "F")
z.analysis <- lm(price ~ year + temp + h.rain + w.rain + h.rain:w.rain, data = wine.df) summary(z.analysis) drop1(z.analysis, test = "F")
coef(z.analysis)
coef(z.analysis)[4] + 800 * coef(z.analysis)[6]
?predict
my.analysis <- glm(satellite ~ width, family = binomial, data = crab.data) my.analysis
my.linear.predictor <- data.frame(   prediction = predict(my.analysis, se.fit = TRUE)$fit,   lower = predict(my.analysis, se.fit = TRUE)$fit -         1.96 * predict(my.analysis, se.fit = TRUE)$se.fit,   upper = predict(my.analysis, se.fit = TRUE)$fit +         1.96 * predict(my.analysis, se.fit = TRUE)$se.fit)
my.linear.predictor
str(wine.df)
year <- 1985 temp <- mean(wine.df$temp) h.rain <- mean(wine.df$h.rain) w.rain <- mean(wine.df$w.rain)
wine.df
test.data <- data.frame(year, temp.h.rain, w.rain)
test.data <- data.frame(year, temp, h.rain, w.rain)
test.data
predict(z.analysis, test.data)
z.analysis <- lm(log(price) ~ year + temp + h.rain + w.rain + h.rain:w.rain, data = wine.df) summary(z.analysis)
drop1(z.analysis, test = "F")
z.analysis <- update(z.analysis, ~ . - h.rain:w.rain)
summary(z.analysis)
year <- 1985 temp <- mean(wine.df$temp) h.rain <- mean(wine.df$h.rain) w.rain <- mean(wine.df$w.rain) test.data <- data.frame(year, temp, h.rain, w.rain) predict(z.analysis, test.data)
z.analysis <- lm(log(price) ~ year + temp + h.rain + w.rain + h.rain:w.rain, data = wine.df) summary(z.analysis) drop1(z.analysis, test = "F") z.analysis <- update(z.analysis, ~ . - h.rain:w.rain) summary(z.analysis)
year <- 1985 temp <- mean(wine.df$temp) h.rain <- mean(wine.df$h.rain) w.rain <- mean(wine.df$w.rain)
exp(predict(z.analysis, test.data))
par(mfrow = c(1, 2)) g <- function(x) { dnorm(x, sd = sd(model1$res)) } hist(model1$res, probability = TRUE) curve(g, col = "red", lwd = 3, add = TRUE) hist(model2$res, probability = TRUE) g <- function(x) { dnorm(x, sd = sd(model2$res)) } curve(g, col = "red", lwd = 3, add = TRUE)
p <- ggplot(data = diamonds) p <- p + aes(x = carat, y = depth) p <- p + geom_point() p <- p + geom_density2d() p
summary(diamonds) depth.groups <- cut(diamonds$depth, breaks = 40 + (0:5) * 8)
ggplot(diamonds) +  aes(price, fill = depth.groups) +  geom_density(alpha = .3)
library(ggplot2) library(ggmap)
head(state.x77)
popdata <- data.frame(state = row.names(state.x77), murder = state.x77[, 5]) popdata$state <- as.character(popdata$state)
head(state.x77) popdata <- data.frame(state = row.names(state.x77), murder = state.x77[, 5]) popdata$state <- as.character(popdata$state) for (i in 1:nrow(popdata)) {     latlon = geocode(popdata$state[i])     popdata$lon[i] = as.numeric(latlon[1])     popdata$lat[i] = as.numeric(latlon[2]) }
usa_center = geocode("United States") USA <- ggmap(get_map(location = usa_center, zoom = 4), extent = "panel")
usa_center = geocode("United States")
USA <- ggmap(get_map(location = usa_center, zoom = 4), extent = "panel")
usa_center = geocode("United States")
USA <- ggmap(get_map(location = usa_center, zoom = 4), extent = "panel")
?geocode
usa_center = geocode("United States of America") USA <- ggmap(get_map(location = usa_center, zoom = 4), extent = "panel")
?get_map
usa_center
USA <- ggmap(get_map(location = usa_center, zoom = 4), extent = "panel")
head(state.x77) popdata <- data.frame(state = row.names(state.x77), murder = state.x77[, 5]) popdata$state <- as.character(popdata$state) for (i in 1:nrow(popdata)) {     latlon = geocode(popdata$state[i])     popdata$lon[i] = as.numeric(latlon[1])     popdata$lat[i] = as.numeric(latlon[2]) } usa_center = geocode("United States of America") USA <- ggmap(get_map(location = usa_center, zoom = 4), extent = "panel")
head(state.x77) popdata <- data.frame(state = row.names(state.x77), murder = state.x77[, 5]) popdata$state <- as.character(popdata$state) for (i in 1:nrow(popdata)) {     latlon = geocode(popdata$state[i])     popdata$lon[i] = as.numeric(latlon[1])     popdata$lat[i] = as.numeric(latlon[2]) } usa_center = geocode("United States of America")
popdata 
usa_center
?get_map
usa_center
USA <- ggmap(get_map(location = usa_center, zoom = 4), extent = "panel")
ggmap(get_map(location = c(-79.4953, 40.2198), zoom = 4), extent = "panel")
usa_center
ggmap(get_map(location = c(-79.4953, 40.2198), zoom = 2), extent = "panel")
ggmap(get_map(location = c(-79.4953, 40.2198), zoom = 5), extent = "panel")
ggmap(get_map(location = c(-79.4953, 40.2198), zoom = 3), extent = "panel")
USA + geom_point(aes(x = lon, y = lat), data = popdata, col = "black",  alpha = 0.4, size = popdata$murder)
USA <- ggmap(get_map(location = c(-79.4953, 40.2198), zoom = 3), extent = "panel")
USA + geom_point(aes(x = lon, y = lat), data = popdata, col = "black",  alpha = 0.4, size = popdata$murder)
usa_center = geocode("United States of America")
class(usa_center)
str(usa_center)
usa_center = geocode("United States of America") USA <- ggmap(get_map(location = c(usa_center$lon, usa_center$lat), zoom = 3), extent = "panel") #USA <- ggmap(get_map(location = usa_center, zoom = 4), extent = "panel") USA + geom_point(aes(x = lon, y = lat), data = popdata, col = "black",  alpha = 0.4, size = popdata$murder)
head(state.x77) popdata <- data.frame(state = row.names(state.x77), murder = state.x77[, 5]) popdata$state <- as.character(popdata$state) for (i in 1:nrow(popdata)) {     latlon = geocode(popdata$state[i])     popdata$lon[i] = as.numeric(latlon[1])     popdata$lat[i] = as.numeric(latlon[2]) } usa_center = geocode("United States of America") USA <- ggmap(get_map(location = c(usa_center$lon, usa_center$lat), zoom = 4), extent = "panel") #USA <- ggmap(get_map(location = usa_center, zoom = 4), extent = "panel") USA + geom_point(aes(x = lon, y = lat), data = popdata, col = "black",  alpha = 0.4, size = popdata$murder)
packageurl <- "https://mran.revolutionanalytics.com/snapshot/2015-11-30/bin/windows/contrib/3.2/ggplot2_1.0.1.zip" install.packages(packageurl, repos = NULL, type = "source")
qplot(hp, qsec, data = mtcars, geom = c("point", "smooth"), method = "lm")
qplot(hp, qsec, data = mtcars, geom = c("point", "smooth"))
qplot(hp, qsec, data = mtcars, geom = c("point"), method = "lm")
qplot(hp, qsec, data = mtcars, geom = c("point", "smooth"), method = "lm")
hist(Temp, data = airquality, breaks = 10)
hist(temp, data = airquality, breaks = 10)
hist(airquality$temp, breaks = 10)
airquality
qplot(temp, data = airquality, binwidth = 5)
qplot(airquality$temp, breaks = 5)
qplot(airquality$temp, breaks = 5)
qplot(temp, data = airquality, binwidth = 5)
hist(airquality$temp, breaks = 10)
airquality$temp
airquality
airquality$Temp
hist(airquality$Temp, breaks = 10)
hist(Temp, data = airquality, breaks = 10)
qplot(airquality$Temp, breaks = 5)
qplot(Temp, data = airquality, binwidth = 5)
qplot(Temp, data = airquality, binwidth = 5)
hist(airquality$Temp, breaks = 10)
x <- rnorm(1000, mean = -5) plot(density(x))
ggplot(data = x) + geom_density()
ggplot() + aes(x = x) + geom_density()
qplot(x)
qplot(x, geom = "density")
my.data <- data.frame(federal.states = c("Baden-Württemberg", "Bayern", "Berlin",                                      "Brandenburg", "Bremen", "Hamburg", "Hessen",                                      "Mecklenburg-Vorpommern", "Niedersachsen",                                      "Nordrhein-Westfalen", "Rheinland-Pfalz",                                      "Saarland", "Sachsen", "Sachsen-Anhalt",                                      "Schleswig-Holstein", "Thüringen"),                     Population = c(10716644, 12691568, 3469849, 2457872, 661888, 1762791,                     6093888, 1599138, 7826739, 17638098, 4011582, 989035, 4055274,                     2235548, 2830864, 2156759))
str(my.data)
my.data$federal.states <- as.string(my.data$federal.states)
my.data$federal.states <- as.character(my.data$federal.states)
str(my.data)
latlon <- geocode(my.data$federal.states)
my.data
my.data
latlon
latlon <- geocode(my.data$federal.states)
my.data <- data.frame(federal.states = c("Baden-Württemberg", "Bayern", "Berlin",                                      "Brandenburg", "Bremen", "Hamburg", "Hessen",                                      "Mecklenburg-Vorpommern", "Niedersachsen",                                      "Nordrhein-Westfalen", "Rheinland-Pfalz",                                      "Saarland", "Sachsen", "Sachsen-Anhalt",                                      "Schleswig-Holstein", "Thüringen"),                     Population = c(10716644, 12691568, 3469849, 2457872, 661888, 1762791,                     6093888, 1599138, 7826739, 17638098, 4011582, 989035, 4055274,                     2235548, 2830864, 2156759))
my.data$federal.states <- as.character(my.data$federal.states)
latlon <- geocode(my.data$federal.states)
my.data$federal.states[1] <- "Baden-Wurttemberg" my.data$federal.states[16] <- "Thuringen Germany"
my.data
latlon <- geocode(my.data$federal.states)
my.data$lon <- latlon$lon; my.data$lat <- latlon$lat
my.data
my.data <- data.frame(federal.states = c("Baden-Württemberg", "Bayern", "Berlin",                                      "Brandenburg", "Bremen", "Hamburg", "Hessen",                                      "Mecklenburg-Vorpommern", "Niedersachsen",                                      "Nordrhein-Westfalen", "Rheinland-Pfalz",                                      "Saarland", "Sachsen", "Sachsen-Anhalt",                                      "Schleswig-Holstein", "Thüringen"),                     Population = c(10716644, 12691568, 3469849, 2457872, 661888, 1762791,                     6093888, 1599138, 7826739, 17638098, 4011582, 989035, 4055274,                     2235548, 2830864, 2156759)) #str(my.data) my.data$federal.states <- as.character(my.data$federal.states) latlon <- geocode(my.data$federal.states) my.data$federal.states[1] <- "Baden-Wurttemberg" my.data$federal.states[16] <- "Thuringen Germany" latlon <- geocode(my.data$federal.states)
my.data <- cbind(my.data, latlon)
my.data
Germany <- geocode("Germany")
Germany <- ggmap(get_map(location = Germany, zoom = 6), extent = "panel")
Germany
Germany <- ggmap(get_map(location = c(Germany$lon,Germany$lat), zoom = 6), extent = "panel")
Germany
Germany <- ggmap(get_map(location = my.data, zoom = 6), extent = "panel")
Germany <- ggmap(get_map(location = "Germany", zoom = 6), extent = "panel")
Germany + geom_point(aes(x = lon, y = lat),                     data = my.data$Population,                     col = "red",                     alpha = 0.4,                     size = my.data * circle_scale)
circle_scale <- 0.000002 Germany + geom_point(aes(x = lon, y = lat),                     data = my.data$Population,                     col = "red",                     alpha = 0.4,                     size = my.data * circle_scale)
Germany + geom_point(aes(x = lon, y = lat),                     data = my.data,                     col = "red",                     alpha = 0.4,                     size = my.data$Population * circle_scale)
