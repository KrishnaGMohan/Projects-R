import.packages("quantmod")
install.packages("quantmod")
library(quantmod)
# Import QQQ data from Yahoo! Finance
QQQ <- getSymbols(Symbols = "QQQ", auto.assign = TRUE)
# Look at the structure of the object getSymbols created
str(QQQ)
# Look at the first few rows of QQQ
head(QQQ)
# Import QQQ data from Yahoo! Finance
QQQ <- getSymbols(Symbols = "AAPL", auto.assign = TRUE)
# Look at the structure of the object getSymbols created
str(QQQ)
# Look at the first few rows of QQQ
head(QQQ)
# Import QQQ data from Yahoo! Finance
getSymbols("QQQ")
# Look at the structure of the object getSymbols created
str(QQQ)
# Look at the first few rows of QQQ
head(QQQ)
# Import QQQ data from Yahoo! Finance
getSymbols(Symbols = "QQQ", src = "yahoo", auto.assign = TRUE)
# Look at the structure of the object getSymbols created
str(QQQ)
# Look at the first few rows of QQQ
head(QQQ)
# Import QQQ data from Google Finance
getSymbols("QQQ", src = "google")
# Look at the structure of QQQ
str(QQQ)
head(QQQ)
# Import GDP data from FRED
getSymbols("GDP", src = "FRED")
# Look at the structure of GDP
str(GDP)
head(GDP)
# Assign SPY data to 'spy' object using auto.assign argument
spy <- getSymbols("SPY", auto.assign = FALSE)
# Look at the structure of the 'spy' object
str(spy)
head(spy)
# Assign JNJ data to 'jnj' object using env argument
jnj <- getSymbols("JNJ", env = NULL)
# Look at the structure of the 'jnj' object
str(jnj)
head(jnj)
install.packages("quandl")
install.packages("Quandl")
library(Quandl)
# Import GDP data from FRED
gdp <- Quandl(code = "FRED/GDP")
# Look at the structure of the object returned by Quandl
str(gdp)
head(gdp)
# Import GDP data from FRED as xts
gdp_xts < -Quandl(code = "FRED/GDP", type = "xts")
# Look at the structure of gdp_xts
str(gdp_xts)
head(gdp_xts)
# Import GDP data from FRED as zoo
gdp_zoo < -Quandl(code = "FRED/GDP", type = "zoo")
# Look at the structure of gdp_zoo
str(gdp_zoo)
head(gdp_zoo)
# Import GDP data from FRED as xts
gdp_xts <- Quandl(code = "FRED/GDP", type = "xts")
# Look at the structure of gdp_xts
str(gdp_xts)
head(gdp_xts)
# Import GDP data from FRED as zoo
gdp_zoo <- Quandl(code = "FRED/GDP", type = "zoo")
# Look at the structure of gdp_zoo
str(gdp_zoo)
head(gdp_zoo)
gdp_xts <- Quandl(code = "FRED/GDP", type = "xts")
str(gdp_xts)
gdp_zoo <- Quandl(code = "FRED/GDP", type = "zoo")
str(gdp_zoo)
getSymbols("PFE", src = "google")
head(PFE)
quantmod::oanda.currencies
# Create a currency_pair object
currency_pair < -"GBP/CAD"
# Load British Pound to Canadian Dollar exchange rate data
getSymbols(currency_pair, src = "oanda")
# Examine object using str()
str(GBPCAD)
# Try to load more than 500 days
getSymbols(currency_pair, from = "2001-01-01", to = "2016-01-01", src = "oanda")
currency_pair <- "GBP/CAD"
# Load British Pound to Canadian Dollar exchange rate data
getSymbols(currency_pair, src = "oanda")
# Examine object using str()
str(GBPCAD)
# Try to load more than 500 days
getSymbols(currency_pair, from = "2001-01-01", to = "2016-01-01", src = "oanda")
# Create a currency_pair object
currency_pair <- "GBP/CAD"
# Load British Pound to Canadian Dollar exchange rate data
getSymbols(currency_pair, src = "oanda")
# Examine object using str()
str(GBPCAD)
head(GBPCAD)
getSymbols(currency_pair, from = "2001-01-01", to = "2016-01-01", src = "oanda")
# Create a series_name object
series_name <- "UNRATE"
# Load the data using getSymbols
getSymbols(series_name, src = "FRED")
# Create a quandl_code object
quandl_code <- paste("FRED/", series_name, sep = "")
# Load the data using Quandl
unemploy_rate <- Quandl(code = quandl_code)
unemploy_rate
MSFT <- getSymbols(symbol, from = "2011-01-01", to = "2017-03-31", src = "yahoo", auto.assign = FALSE)
library(quantmod)
library(Quandl)
src <- "YAHOO"
symbol <- "MSFT"
code <- "YAHOO/MSFT"
MSFT <- getSymbols(symbol, from = "2011-01-01", to = "2017-03-31", src = "yahoo", auto.assign = FALSE)
head(MSFT)
tail(MSFT)
src <- "YAHOO"
symbol <- "MSFT"
code <- "YAHOO/MSFT"
fromDate <- "2011-01-01"
toDate <- date()
MSFT <- getSymbols(symbol, from = fromDate, to = toDate, src = "yahoo", auto.assign = FALSE)
tail(MSFT)
src <- "YAHOO"
symbol <- "MSFT"
code <- "YAHOO/MSFT"
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- date()
MSFT <- getSymbols(symbol, from = fromDate, to = toDate, src = "yahoo", auto.assign = FALSE)
tail(MSFT)
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
fromDate
str(fromDate)
getSymbols(symbol, from = fromDate, to = toDate, src = "yahoo", auto.assign = FALSE)
str(toDate)
date()
toDate <- Sys.Date()
 str(toDate)
library(quantmod)
library(Quandl)
src <- "yahoo"
symbol <- "MSFT"
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- Sys.Date()
MSFT <- getSymbols(symbol, from = fromDate, to = toDate, src = "yahoo", auto.assign = FALSE)
tail(MSFT)
library(quantmod)
library(Quandl)
symbol <- "MSFT"
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- Sys.Date()
fromSrc <- "yahoo"
MSFT <- getSymbols(Symbols = symbol, from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(MSFT)
fromSrc <- "YAHOO"
symbol <- "MSFT"
searchCode <- paste(fromSRC, "/", symbol, sep = "")
searchCode
fromSrc <- "YAHOO"
symbol <- "MSFT"
searchCode <- paste(fromSrc, "/", symbol, sep = "")
searchCode
library(quantmod)
symbol <- "MSFT"
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- Sys.Date()
fromSrc <- "yahoo"
MSFT <- getSymbols(Symbols = symbol, from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(MSFT)
rm(MSFT)
tail(MSFT)
library(Quandl)
fromSrc <- "YAHOO"
symbol <- "MSFT"
searchCode <- paste(fromSrc, "/", symbol, sep = "")
outType = "xts"
MSFT <- Quandl(code = searchCode, type = outType)
tail(MSFT)
rm(MSFT)
MSFT
library(quantmod)
symbol <- "MSFT"
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- Sys.Date()
fromSrc <- "yahoo"
MSFT <- getSymbols(Symbols = symbol, from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(MSFT)
rm(MSFT)
#-----------------------------------------------------
library(Quandl)
fromSrc <- "YAHOO"
symbol <- "MSFT"
searchCode <- paste(fromSrc, "/", symbol, sep = "")
outType = "xts"
MSFT <- Quandl(code = searchCode, type = outType)
tail(MSFT)
rm(MSFT)
library(Quandl)
fromSrc <- "YAHOO"
symbol <- "MSFT"
searchCode <- paste(fromSrc, "/", symbol, sep = "")
outType = "xts"
MSFT <- Quandl(code = searchCode, type = outType)
tail(MSFT)
install.packages("tidyquant")
library(tidyquant)
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
library(tidyquant)
library(quantmod)
x = 10
x
x <- c(10, 20, 30, 40)
x + y
x <- c(10, 20, 30, 40) y <- 5 x + y
x <- c(10, 20, 30, 40) y <- c(5, 2) x + y
unloadNamespace("RODBC")
library("zoo", lib.loc="C:/Users/krgandhi/Documents/R/win-library/3.3")
install.packages("xts", lib="C:/Users/krgandhi/Documents/R/win-library/3.3")
library("xts", lib.loc="C:/Users/krgandhi/Documents/R/win-library/3.3")
library(xts)
# Create the object data using 5 random numbers
data <- rnorm(5)
# Create dates as a Date class object starting from 2016-01-01
dates <- seq(as.Date("2016-01-01"), length = 5, by = "days")
# Use xts() to create smith
smith <- xts(x = data, order.by = dates)
smith
bday <- as.POSIXct("1899-05-08")
hayek <- xts(x = data, order.by = dates, born = bday)
hayek
str(hayek)
hayek_core <- coredata(hayek)
hayek_core
class(hayek_core)
hayek_index <- index(hayek)
hayek_index
class(hayek_index)
dates <- as.Date("2016-01-01") + 0:4
dates
ts_a <- xts(x = 1:5, order.by = dates)
ts_a
# Create ts_b
ts_b <- xts(x = 1:5, order.by = as.POSIXct(dates))
ts_b
ts_a[index(ts_b)]
ts_b[index(ts_a)]
index(ts_b)
index(ts_a)
data(sunspots)
class(sunspots)
sunspots_xts <- as.xts(sunspots)
sunspots_xts
index(sunspots_xts)
class(index(sunspots_xts))
austres
au <- as.xts(austres)
au
am <- as.matrix(au)
am
am2 <- as.matrix(austres)
am2
# Create dat by reading tmp_file
dat <- read.csv(tmp_file)
tmp_file <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1127/datasets/tmp_file.csv"
# Create dat by reading tmp_file
dat <- read.csv(tmp_file)
dat
# Convert dat into xts
xts(dat, order.by = as.Date(rownames(dat), "%m/%d/%Y"))
# Read tmp_file using read.zoo
dat_zoo <- read.zoo(tmp_file, index.column = 0, sep = ",", format = "%m/%d/%Y")
dat_zoo
# Convert dat_zoo to xts
dat_xts <- as.xts(dat_zoo)
dat_xts
# Convert sunspots to xts using as.xts(). Save this as sunspots_xts
sunspots_xts <- as.xts(sunspots)
# Get the temporary file name
tmp <- tempfile()
write.zoo(sunspots_xts, sep = ",", file = tmp)
sun <- read.zoo(tmp, sep = ",", FUN = as.yearmon)
sun_xts <- as.xts(sun)
sun_xts
library(xts)
install.packages("xts")
install.packages("xts")
library(xts)
# Create the object data using 5 random numbers data <- rnorm(5) # Create dates as a Date class object starting from 2016-01-01 dates <- seq(as.Date("2016-01-01"), length = 5, by = "days") # Use xts() to create smith smith <- xts(x = data, order.by = dates) # Create bday (1899-05-08) using a POSIXct date class object bday <- as.POSIXct("1899-05-08") # Create hayek and add a new attribute called born hayek <- xts(x = data, order.by = dates, born = bday) str(hayek) # Extract the core data of hayek hayek_core <- coredata(hayek) # View the class of hayek_core class(hayek_core)
hayek_index <- index(hayek)
hayek_index
tmp_file <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1127/datasets/tmp_file.csv" # Create dat by reading tmp_file dat <- read.csv(tmp_file) # Convert dat into xts xts(dat, order.by = as.Date(rownames(dat), "%m/%d/%Y")) # Read tmp_file using read.zoo dat_zoo <- read.zoo(tmp_file, index.column = 0, sep = ",", format = "%m/%d/%Y") # Convert dat_zoo to xts dat_xts <- as.xts(dat_zoo)
dat_xts
help(OlsonNames)
Sys.getenv(TZ)
Sys.getenv(tzone)
Sys.getenv()
library(quantmod)
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
symbol <- "MSFT"
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- Sys.Date()
fromSrc <- "yahoo"
MSFT <- getSymbols(Symbols = symbol, from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(MSFT)
rm(MSFT)
symbol <- "MSFT"
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- Sys.Date()
fromSrc <- "google"
MSFT <- getSymbols(Symbols = symbol, from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(MSFT)
rm(MSFT)
symbols <- c("AAPL", "MSFT", "IBM")
# Create new environment
data_env <- new.env()
# Load symbols into data_env
getSymbols(symbols, env = data_env, auto.assign = TRUE)
# Extract the close column from each object and merge into one xts object
close_data <- do.call(merge, eapply(data_env, Cl))
# View the head of close_data
head(close_data)
tail(close_data)
# Load BRK-A data
getSymbols("BRK-A")
# Use backticks and head() to look at the loaded data
head(`BRK-A`)
# Use get() to assign the BRK-A data to an object named BRK.A
BRK.A <- get("BRK-A")
# Create BRK.A object
BRK.A <- getSymbols("BRK-A", auto.assign = FALSE)
# Create col_names object with the column names of BRK.A
col_names <- colnames(BRK.A)
# Set BRK.A column names to syntactically valid names
colnames(BRK.A) <- make.names(col_names, unique = TRUE)
BRK.A
install.packages("astsa")
library(astsa)
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
?Return.portfolio
library(quantmod)
install.packages("quantmod")
symbol <- "RY"
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- Sys.Date()
fromSrc <- "yahoo"
RY <- getSymbols(Symbols = symbol, from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(RY)
symbol <- "RY"
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- Sys.Date()
fromSrc <- "google"
RY <- getSymbols(Symbols = symbol, from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(RY)
library(quantmod)
RY <- getSymbols(Symbols = symbol, from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(RY)
TD <- getSymbols(Symbols = "TD", from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(TD)
cor(RY, TD)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) plist <- eapply(dataEnv, Cl) pframe <- do.call(merge, plist) head(pframe)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) plist <- eapply(dataEnv, Cl) pframe <- do.call(merge, plist) head(pframe)
library(quantmod)
fromDate <- as.Date("2011-01-01","%Y-%m-%d")
toDate <- Sys.Date()
fromSrc <- "google"
stocks <- c('MSFT', 'AMZN', 'RY', 'TD', 'FB', 'AAPL', 'GOOGL')
FB <- getSymbols(Symbols = 'FB', from = fromDate, to = toDate, src = fromSrc, auto.assign = FALSE)
tail(FB)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) plist <- eapply(dataEnv, Cl)
plist
pframe <- do.call(merge, plist)
head(pframe)
tail(pframe)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) plist <- eapply(dataEnv, Ad) pframe <- do.call(merge, plist) tail(pframe)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(', stock, ', adjust = c(" split ", " dividend "))'))     assign(stock, eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) } plist <- eapply(dataEnv, Cl) pframe <- do.call(merge, plist) tail(pframe)
tail(pframe,90)
head(AAPL)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) head(AAPL)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv)
head(AAPL)
head(dataEnv$AAPL)
env
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', adjust = c(" split ", " dividend "))'))     assign(stock, eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) } tail(dataEnv$AAPL, 90)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', adjust = c(" split ", " dividend "))'))     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) } tail(dataEnv$AAPL, 90)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv)
for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', adjust = c(" split ", " dividend "))'))     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
paste('dataEnv$',stock,sep = "")
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv)
dataEnv
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(', stock, ', adjust = c(" split ", " dividend "))'))     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) } tail(dataEnv$AAPL, 90)
paste('dataEnv$',stock,sep = "")
dataEnv$MSFT
paste('adjustOHLC(', stock, ', adjust = c(" split ", " dividend "))')
adjustOHLC(MSFT, adjust = c(\" split \", \" dividend \")) ) )
adjustOHLC(MSFT, adjust = c(" split ", " dividend "))
adjustOHLC(dataEnv$MSFT, adjust = c(" split ", " dividend "))
adjustOHLC(MSFT, adjust = c(" split ", " dividend "))
paste('adjustOHLC(dataEnv$', stock, ', symbol.name= ', stock, ', adjust = c(" split ", " dividend "))')adjustOHLC(MSFT, adjust = c(" split ", " dividend "))
paste('adjustOHLC(dataEnv$', stock, ', symbol.name= ', stock, ', adjust = c(" split ", " dividend "))'))
paste('adjustOHLC(dataEnv$', stock, ', symbol.name = ', stock, ', adjust = c(" split ", " dividend "))')
paste('adjustOHLC(dataEnv$', stock, ', symbol.name = ', stock, ', adjust = c(" split ", " dividend "))', sep = "")
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = ', stock, ', adjust = c(" split ", " dividend "))', sep = ""))     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) } tail(dataEnv$AAPL, 90)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = "', stock, '", adjust = c(" split ", " dividend "))', sep = ""))     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
tail(dataEnv$AAPL, 90)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(get(dataEnv$', stock, '), symbol.name = "', stock, '", adjust = c(" split ", " dividend "))', sep = ""))     print(cmd)     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ') symbol.name = "', stock, '", adjust = c("split", "dividend"))', sep = ""))     print(cmd)     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend"))', sep = ""))     print(cmd)     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
adjustOHLC(dataEnv$MSFT, symbol.name = "MSFT", adjust = c("split", "dividend"))
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend"))', sep = ""))     print(cmd)     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) } tail(dataEnv$AAPL, 90)
paste('dataEnv$',stock,sep = "")
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend")), use.Adjusted = FALSE', sep = ""))     print(cmd)     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE'), sep = ""))     print(cmd)     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     print(cmd)     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
adjustOHLC(dataEnv$MSFT, symbol.name = "MSFT", adjust = c("split", "dividend"), use.Adjusted = FALSE)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     print(cmd)     assign(paste('dataEnv$',stock,sep = ""), eval(cmd))     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) } tail(dataEnv$AAPL, 90)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     print(cmd)     assign(paste('dataEnv$', stock, sep = ""), eval(cmd))     head(dataEnv$AAPL)     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     print(cmd)     assign(paste('dataEnv$', stock, sep = ""), eval(cmd))     head(AAPL)     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     print(cmd)     assign(paste('dataEnv$', stock, sep = ""), eval(cmd))     head(dataEnv$MSFT)     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" stocks <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') getSymbols( Symbols = stocks,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (stock in stocks) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', stock, ', symbol.name = \"', stock, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     print(cmd)     assign(stock, eval(cmd), envir = dataEnv)     head(dataEnv$MSFT)     #cmd <- parse(text = paste('Return.calculate(', stock, '$', stock, '.Close)', sep = ""))     #assign(stock, eval(cmd))     #eval(parse(text = paste('colnames(', stock, ') <- "', stock, '.Returns"', sep = ""))) }
tail(dataEnv$AAPL, 90)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') dataEnv <- new.env() getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } closeList <- eapply(dataEnv, Cl) assetsClose <- do.call(merge, closeList) tail(assetsClose, 90)
closeList
rm(list = ls())
assetsClose
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') dataEnv <- new.env() getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } #closeList <- eapply(dataEnv, Cl) assetsClose <- do.call(merge, eapply(dataEnv, Cl)) tail(assetsClose, 90)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') dataEnv <- new.env() getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) #tail(asset_close, 90) asset_returns <- Return.calculate(asset_close) tail(asset_returns, 90)
head(asset_returns)
library(quantmod) library(PerformanceAnalytics) rm(list = ls()) fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') dataEnv <- new.env() getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) #tail(asset_close, 90) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] head(asset_returns)
library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) rm(list = ls()) fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') dataEnv <- new.env() getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] head(asset_returns)
eq_weights <- rep(1/length(tickers), length(tickers))
eq_weights
# Create the weights eq_weights <- rep(1/length(tickers), length(tickers)) # Create a portfolio using buy and hold pf_bh <- Return.portfolio(asset_returns, weights = eq_weights, rebalance_on = NA, verbose = TRUE) # Create a portfolio that rebalances monthly pf_rebal <- Return.portfolio(asset_returns, weights = eq_weights, rebalance_on = "months", verbose = TRUE) # Create eop_weight_bh eop_weight_bh <- pf_bh$EOP.Weight # Create eop_weight_rebal eop_weight_rebal <- pf_rebal$EOP.Weight # Plot end of period weights par(mfrow = c(2, 1), mar = c(2, 4, 2, 2)) plot.zoo(eop_weight_bh$AAPL) plot.zoo(eop_weight_rebal$AAPL)
# Compute the annualized mean Return.annualized(asset_returns, scale = 12)
StdDev.annualized(asset_returns, scale = 12)
ann_sharpe <- Return.annualized(asset_returns, scale = 12) / StdDev.annualized(asset_returns, scale = 12)
ann_sharpe
table.AnnualizedReturns(asset_returns, scale = 12, Rf = 0, geometric = TRUE)
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "yahoo" getSymbols(Symbols = "TMUBMUSD10Y",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv)
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" getSymbols(Symbols = "TMUBMUSD10Y",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv)
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "yahoo" getSymbols(Symbols = "TNX",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv)
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "yahoo" getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv)
dataEnv$TNX
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) head(dataEnv$TNX)
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" getSymbols(Symbols = "MSFT",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) head(dataEnv$MSFT)
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) head(dataEnv$TNX)
rm(list = ls())
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) head(dataEnv$TNX)
library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) rm(list = ls()) fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') dataEnv <- new.env()
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) head(dataEnv$TNX)
fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "yahoo" getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = fromSrc,             auto.assign = TRUE,             env = dataEnv) head(dataEnv$TNX)
library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') rfr <- c('^TNX') getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) head(dataEnv$TNX)
library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) rm(list = ls()) dataEnv <- new.env() fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() fromSrc <- "google" tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') rfr <- c('^TNX') getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted
head(dataEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted # head(dataEnv$TNX) # tail(dataEnv$TNX) dim(dataEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted # head(dataEnv$TNX) # tail(dataEnv$TNX) dim(dataEnv$TNX) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] # head(asset_returns) # tail(asset_returns) dim(asset_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted # head(dataEnv$TNX) # tail(dataEnv$TNX) dim(dataEnv$TNX) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) }
} head(dataEnv$AAPL)
asset_close <- do.call(merge, eapply(dataEnv, Cl))
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted head(dataEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted colnames(dataEnv) <- "TNX.Close" head(dataEnv$TNX) # tail(dataEnv$TNX) dim(dataEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted dataEnv$TNX$TNX.Close <- dataEnv$TNX$TNX.Adjusted head(dataEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted dataEnv$TNX$TNX.Close <- dataEnv$TNX$TNX.Adjusted dataEnv$TNX <- dataEnv$TNX$TNX.Close head(dataEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) #dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted dataEnv$TNX$TNX.Close <- dataEnv$TNX$TNX.Adjusted #dataEnv$TNX <- dataEnv$TNX$TNX.Close  head(dataEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) #dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted head(dataEnv$TNX) dataEnv$TNX$TNX.Close <- dataEnv$TNX$TNX.Adjusted #dataEnv$TNX <- dataEnv$TNX$TNX.Close  head(dataEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) #dataEnv$TNX <- dataEnv$TNX$TNX.Adjusted head(dataEnv$TNX, 90) dataEnv$TNX$TNX.Close <- dataEnv$TNX$TNX.Adjusted #dataEnv$TNX <- dataEnv$TNX$TNX.Close head(dataEnv$TNX, 90)
dataEnv$TNX[dataEnv$TNX$TNX.Close != dataEnv$TNX$TNX.Adjusted, ]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX$TNX.Close <- dataEnv$TNX$TNX.Adjusted dataEnv$TNX <- dataEnv$TNX[,1:4] #dataEnv$TNX <- dataEnv$TNX$TNX.Close head(dataEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX$TNX.Close <- dataEnv$TNX$TNX.Adjusted dataEnv$TNX <- dataEnv$TNX[,1:4] # head(dataEnv$TNX) # tail(dataEnv$TNX) dim(dataEnv$TNX) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] # head(asset_returns) # tail(asset_returns) dim(asset_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) dataEnv$TNX$TNX.Close <- dataEnv$TNX$TNX.Adjusted dataEnv$TNX <- dataEnv$TNX[,1:4] # head(dataEnv$TNX) # tail(dataEnv$TNX) dim(dataEnv$TNX) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,]  head(asset_returns)  tail(asset_returns) dim(asset_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date()
#---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,]  head(asset_returns)  tail(asset_returns) dim(asset_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) head(rfr_returns) # tail(rfrEnv$TNX) # dim(rfrEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] head(rfr_returns) # tail(rfrEnv$TNX) # dim(rfrEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] head(rfr_returns) # tail(rfrEnv$TNX) # dim(rfrEnv$TNX) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] head(asset_returns) #tail(asset_returns) #dim(asset_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] head(rfr_returns) # tail(rfrEnv$TNX) # dim(rfrEnv$TNX) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- char() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, ticker) } cnames
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] head(rfr_returns) # tail(rfrEnv$TNX) # dim(rfrEnv$TNX) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, ticker) } cnames
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] head(rfr_returns) # tail(rfrEnv$TNX) # dim(rfrEnv$TNX) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } cnames
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] head(rfr_returns) # tail(rfrEnv$TNX) # dim(rfrEnv$TNX) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames head(asset_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] names(rfr_returns) <- c("TNX.Returns") head(rfr_returns)
? Return.annualized
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] names(rfr_returns) <- c("TNX.Returns") # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #----------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] names(rfr_returns) <- c("TNX.Returns") # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #----------------------------------------------------------- # Calculate the mean, volatility, and sharpe ratio of sp500_returns returns_ann <- Return.annualized(asset_returns, scale = 12) sd_ann <- StdDev.annualized(asset_returns, scale = 12) sharpe_ann <- SharpeRatio.annualized(asset_returns, Rf = rfr_returns, scale = 12, geometric = TRUE) # Plotting the 12-month rolling annualized mean chart.RollingPerformance(R = asset_returns, width = 12, FUN = "Return.annualized") abline(h = returns_ann) # Plotting the 12-month rolling annualized standard deviation chart.RollingPerformance(R = asset_returns, width = 12, FUN = "StdDev.annualized") abline(h = sd_ann) # Plotting the 12-month rolling annualized Sharpe ratio chart.RollingPerformance(R = sp500_returns, width = 12, FUN = "SharpeRatio.annualized", Rf = rfr_returns) abline(h = sharpe_ann)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] names(rfr_returns) <- c("TNX.Returns") # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #----------------------------------------------------------- # Calculate the mean, volatility, and sharpe ratio of sp500_returns returns_ann <- Return.annualized(asset_returns, scale = 12) sd_ann <- StdDev.annualized(asset_returns, scale = 12) sharpe_ann <- SharpeRatio.annualized(asset_returns, Rf = rfr_returns, scale = 12, geometric = TRUE) # Plotting the 12-month rolling annualized mean chart.RollingPerformance(R = asset_returns, width = 12, FUN = "Return.annualized") abline(h = returns_ann) # Plotting the 12-month rolling annualized standard deviation chart.RollingPerformance(R = asset_returns, width = 12, FUN = "StdDev.annualized") abline(h = sd_ann) # Plotting the 12-month rolling annualized Sharpe ratio chart.RollingPerformance(R = asset_returns, width = 12, FUN = "SharpeRatio.annualized", Rf = rfr_returns) abline(h = sharpe_ann)
sharpe_ann
rfr_returns
rfr_returns[is.na,]
sharpe_ann
sd_ann
returns_ann
#----------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12) # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe ann_sharpe <- Return.annualized(asset_returns, scale = 12) / StdDev.annualized(asset_returns, scale = 12) # Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(sp500_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'FB', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] names(rfr_returns) <- c("TNX.Returns") # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #----------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12) # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe ann_sharpe <- Return.annualized(asset_returns, scale = 12) / StdDev.annualized(asset_returns, scale = 12) # Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] names(rfr_returns) <- c("TNX.Returns") # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #----------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12) # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe ann_sharpe <- Return.annualized(asset_returns, scale = 12) / StdDev.annualized(asset_returns, scale = 12) # Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
sapply(rfr_returns, function(x) sum(is.na(x)))
rfr_returns[!complete.cases(rfr_returns),]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] names(rfr_returns) <- c("TNX.Returns") rfr_returns <- na.locf(rfr_returns) # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #----------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12) # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe ann_sharpe <- Return.annualized(asset_returns, scale = 12) / StdDev.annualized(asset_returns, scale = 12) # Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
chart.RollingPerformance(R = asset_returns, width = 12, FUN = "SharpeRatio.annualized", Rf = rfr_returns)
sapply(asset_returns, function(x) sum(is.na(x))) asset_returns[!complete.cases(asset_returns),]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] names(rfr_returns) <- c("TNX.Returns") rfr_returns <- na.locf(rfr_returns) # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #----------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12) # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe ann_sharpe <- Return.annualized(asset_returns, scale = 12) / StdDev.annualized(asset_returns, scale = 12) # Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
# Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE) ann_sharpe
table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE) ann_sharpe - 0.04
table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE) ann_sharpe
table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE) ann_sharpe - .0004
table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE) ann_sharpe - .004
#----------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12) # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe Return.annualized(asset_returns, scale = 12) / StdDev.annualized(asset_returns, scale = 12) # Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
head(rfr_returns)
tail(asset_returns)
head(rfrEnv$TNX)
getSymbols(Symbols = "^TNX",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) head(rfrEnv$TNX)
getSymbols(Symbols = "TMUBMUSD03M",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) head(rfrEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "TMUBMUSD03M",             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = rfrEnv) head(rfrEnv$TNX)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate #---------------------------------------------------------------------- getSymbols(Symbols = "TMUBMUSD03M",             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = rfrEnv) head(rfrEnv$TNX)
getSymbols(Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE)
head(TB3MS)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols(Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) head(rfrEnv$TB3MS)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols(Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) head(rfrEnv$TB3MS) tail(rfrEnv$TB3MS)
rfrEnv$TB3MS[20110101]
rfrEnv$TB3MS["20110101"]
rfrEnv$TB3MS["2011"]
rfrEnv$TB3MS[fromDate]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols(Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv)
head(rfrEnv$TB3MS)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols(Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) head(rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) tail(rfrEnv$TB3MS)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols(Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate])/100 head(rfr_returns) tail(rfr_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols(Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 head(rfr_returns) tail(rfr_returns) # Create a zero-width xts object rfr_xts <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value merged_xts <- merge(rfr_returns, rfr_xts, fill = na.locf)
head(merged_xts) tail(merged_xts)
head(merged_xts,10) tail(merged_xts, 10)
head(merged_xts,30)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) head(merged_xts,30) tail(merged_xts, 30) rfrEnv$TB3MS[fromDate] rfrEnv$TNX <- rfrEnv$TNX$TNX.Adjusted rfr_returns <- Return.calculate(rfrEnv$TNX) rfr_returns <- rfr_returns[-1,] names(rfr_returns) <- c("TNX.Returns") rfr_returns <- na.locf(rfr_returns) # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- #----------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12) # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe Return.annualized(asset_returns, scale = 12) / StdDev.annualized(asset_returns, scale = 12) # Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) head(merged_xts,30) tail(merged_xts, 30)
head(rfr_returns, 30) tail(rfr_returns, 30)
tail(rfr_returns, 60)
dim(rfr_returns)
dim(asset_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- #----------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12)
# Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12) # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe Return.annualized(asset_returns, scale = 12) / StdDev.annualized(asset_returns, scale = 12) # Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
# Compute the annualized risk free rate annualized_rf <- (1 + rfr_returns) ^ 12 - 1 # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe (Return.annualized(asset_returns, scale = 12) - annualized_rf) / StdDev.annualized(asset_returns, scale = 12) # Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
annualized_rf
index(asset_returns)
rfr_returns[-index(asset_returns),]
rfr_returns[index(asset_returns),]
count(rfr_returns[index(asset_returns),])
length(rfr_returns[index(asset_returns),])
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Compute the annualized mean Return.annualized(asset_returns, scale = 12) # Compute the annualized risk free rate annualized_rf <- (1 + rfr_returns) ^ 12 - 1 # Compute the annualized standard deviation StdDev.annualized(asset_returns, scale = 12) # Compute the annualized Sharpe ratio: ann_sharpe (Return.annualized(asset_returns, scale = 12) - annualized_rf) / StdDev.annualized(asset_returns, scale = 12)
# Compute the annualized Sharpe ratio: ann_sharpe (Return.annualized(asset_returns - annualized_rf, scale = 12)) / StdDev.annualized(asset_returns, scale = 12)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
mean(asset_returns - rfr_returns) / sd(asset_returns)
rfr_returns
length(rfr_returns)
length(asset_returns)
dim(asset_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT)
table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
head(asset_returns)
head(rfr_returns)
head(rfr_returns_monthly)
getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv)
TB3MS
getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv)
TB3MS
rfrEnv$TB3MS
mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Computing Sharpe ratio #---------------------------------------------------------------------- for (ticker in tickers) {     eval(parse(text = paste('mean(asset_returns$', ticker, 'rfr_returns) / sd(asset_returns$', ticker, ')', sep = ""))) }
paste('mean(asset_returns$', ticker, 'rfr_returns) / sd(asset_returns$', ticker, ')', sep = "")
paste('mean(asset_returns$', ticker, ' - rfr_returns) / sd(asset_returns$', ticker, ')', sep = "")
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Computing Sharpe ratio #---------------------------------------------------------------------- for (ticker in tickers) {     eval(parse(text = paste('mean(asset_returns$', ticker, ' - rfr_returns) / sd(asset_returns$', ticker, ')', sep = ""))) }
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Computing Sharpe ratio #---------------------------------------------------------------------- for (i in 1:ncol(asset_returns)) {     mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i]) }
ncol(asset_returns)
asset_returns[,i]
i
for (i in 1:ncol(asset_returns)) {     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
for (i in 1:ncol(asset_returns)) {     print(i)     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
print(name(asset_returns[,i]))
print(colname(asset_returns[,i]))
for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i]))     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i])     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
print(name(asset_returns[,i]))# Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i])     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Computing Sharpe ratio #---------------------------------------------------------------------- for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i])     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
# Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
head(asset_returns)
head(rfr_returns)
for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i])     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
# Compute all of the above at once using table.AnnualizedReturns() table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i])     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i]) * sqrt(252)) }
for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i])     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i]) * sqrt(12)) }
for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i])     print(mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = TRUE)
mean(asset_returns[,i] - rfr_returns)
mean(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])
for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i])     print(mean.geometric(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
asset_returns$MSFT["2011"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Computing Sharpe ratio #---------------------------------------------------------------------- for (i in 1:ncol(asset_returns)) {     print(colnames(asset_returns)[i])     print(mean.geometric(asset_returns[,i] - rfr_returns) / sd(asset_returns[,i])) }
asset_returns$MSFT["2011"]
length(asset_returns$MSFT["2011"])
length(asset_returns$MSFT["2012"])
length(asset_returns$MSFT["2013"])
length(asset_returns$MSFT["2014"])
length(asset_returns$MSFT["2015"])
length(asset_returns$MSFT["2016"])
length(asset_returns$MSFT["2017"])
annualized_rf
# Compute the annualized risk free rate annualized_rf <- (1 + rfr_returns) ^ 12 - 1
annualized_rf
annualized_rf <- (1 + rfr_returns) ^ 252 - 1
annualized_rf
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns) #---------------------------------------------------------------------- # Computing Annulatized Sharpe ratio #---------------------------------------------------------------------- table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = TRUE)
asset_excess <- asset_returns - rfr_returns mean(asset_excess) mean(asset_returns)
asset_excess <- asset_returns - rfr_returns
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN', 'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
mean(asset_returns$MSFT - rfr_returns) mean(asset_returns)
rfr_returns
mean(asset_returns$MSFT - rfr_returns) mean(asset_returns)
MSFT_sharpe <- mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)
MSFT_sharpe
table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = TRUE)
skewness(asset_returns)
kurtosis(asset_returns)
SemiDeviation(asset_returns)
VaR(asset_returns, p = 0.025)
VaR(asset_returns, p = 0.05)
VaR(asset_returns, p = 0.025) VaR(asset_returns, p = 0.05)
ES(asset_returns, p = 0.025) ES(asset_returns, p = 0.05)
# Table of drawdowns table.Drawdowns(asset_returns) # Plot of drawdowns chart.Drawdown(asset_returns)
for (ticker in tickers) {     eval(parse(text = paste('chart.Drawdown(asset_returns$', ticker, ')', sep = ""))) }
for (ticker in tickers) {     eval(parse(text = paste('chart.Drawdown(asset_returns$', ticker, ')', sep = "")))     eval(parse(text = paste('table.Drawdown(asset_returns$', ticker, ')', sep = ""))) }
for (ticker in tickers) {     eval(parse(text = paste('chart.Drawdown(asset_returns$', ticker, ')', sep = "")))     eval(parse(text = paste('table.Drawdowns(asset_returns$', ticker, ')', sep = ""))) }
eval(parse(text = paste('table.Drawdowns(asset_returns$', ticker, ')', sep = "")))
table.Drawdowns(asset_returns$MSFT)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT',  'AAPL', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AMZN',  'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT', 'AAPL', 'AMZN') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT) fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('AMZN') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN', 'GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } asset_close <- do.call(merge, eapply(dataEnv, Cl)) asset_returns <- Return.calculate(asset_close) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- cnames # head(asset_returns) # head(rfr_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) / 100 #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] # head(rfr_returns) # tail(rfr_returns) # dim(rfr_returns)
# Create a vector of equal weights equal_weights <- rep(1 / ncol(asset_returns), ncol(asset_returns)) # Compute the benchmark returns r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters") colnames(r_benchmark) <- "benchmark" # Plot the benchmark returns plot(r_benchmark)
asset_returns$GOOGL["201403/04"]
dataEnv$GOOGL["201404"]
dataEnv$GOOGL["201403/04"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) }
dataEnv$GOOGL["201404"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"))', sep = ""))     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } dataEnv$GOOGL["201404"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"))', sep = ""))     print(cmd)     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) }
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     print(cmd)     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) }
z<- adjustOHLC(dataEnv$GOOGL, symbol.name = "GOOGL", adjust = c("split", "dividend"), use.Adjusted = FALSE)
z
z["201404"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     print(cmd)     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) }
z <- adjustOHLC(dataEnv$GOOGL, symbol.name = GOOGL, adjust = c("split", "dividend"), use.Adjusted = FALSE)
z <- adjustOHLC(dataEnv$GOOGL, symbol.name = "GOOGL")
z["201404"]
getSymbols("AAPL", src = "yahoo")
getSymbols("GOOGL", src = "yahoo")
GOOGL["201404"]
getSymbols("GOOGL", src = "google")
GOOGL["201404"]
getSymbols("GOOGL", src = "google") GOOGL["201404"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv)
dataEnv$GOOGL["201404"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     #cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     print(cmd)     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } dataEnv$GOOGL["201404"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('GOOGL') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "google",             auto.assign = TRUE,             env = dataEnv) cnames <- character() for (ticker in tickers) {     #cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\", adjust = c("split", "dividend"), use.Adjusted = FALSE)', sep = ""))     cmd <- parse(text = paste('adjustOHLC(dataEnv$', ticker, ', symbol.name = \"', ticker, '\")', sep = ""))     print(cmd)     assign(ticker, eval(cmd), envir = dataEnv)     cnames <- c(cnames, paste(ticker, ".Returns", sep = "")) } dataEnv$GOOGL["201404"]
getSymbols("GOOGL", src = "yahoo") GOOGL["201404"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) cnames <- paste(tickers, ".Returns", sep = "") cnames
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) cnames <- paste(tickers, ".Returns", sep = "") cnames dataEnv$GOOGL["201404"]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2014-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "")
head(asset_returns)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers # Calculate the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "")
head(asset_returns)
tail(asset_returns)
sapply(asset_returns, function(x) sum(is.na(x)))
asset_returns[!complete.cases(asset_returns),]
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- (rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]) 
head(rfr_returns_monthly)
tail(rfr_returns_monthly)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]
tail(rfr_returns_monthly)
head(asset_returns)
getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),]
tail(rfr_returns)
getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns))
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]
head(rfr_returns_monthly)
rfr_index <- xts(, order.by = index(asset_returns))
rfr_index
?merge
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]
plot(rfr_returns_monthly)
# Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),]
tail(rfr_returns)
rfr_returns <- rfr_returns / 365
tail(rfr_returns,90)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_monthly) #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),]
tail(rfr_returns,90)
rfr_returns <- rfr_returns / 365
tail(rfr_returns,90)
dim(rfr_returns)
table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = TRUE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_monthly) #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100)
 tail(rfr_returns,90)
table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = TRUE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB', 'RY', 'TD') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_monthly) #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) # head(rfr_returns) # tail(rfr_returns,90)
table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = TRUE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL','FB') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_monthly) #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) # head(rfr_returns) # tail(rfr_returns,90) # dim(rfr_returns)
mean(asset_returns$MSFT - rfr_returns)
mean(asset_returns$MSFT - rfr_returns) mean(asset_returns)
sapply(asset_returns, function(x) sum(is.na(x)))
mean(asset_returns$MSFT - rfr_returns) mean(asset_returns$MSFT)
mean(asset_returns$AMZN - rfr_returns) mean(asset_returns$AMZN)
mean(asset_returns$MSFT - rfr_returns) mean(asset_returns$MSFT) mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)
mean(asset_returns$MSFT - rfr_returns) mean(asset_returns$MSFT) mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns) (mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)) * sqrt(252)
table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = TRUE)
0.8260 / mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)
0.8260 / (mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns))
(0.8260 / (mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)))^2
(mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT)) * sqrt(252)
(0.8260 / (mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT )))^2
table.AnnualizedReturns(asset_returns, scale = 12, Rf = rfr_returns, geometric = TRUE)
table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = TRUE)
(mean.geometric(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)) * sqrt(252)
mean.geometric(asset_returns$MSFT - rfr_returns)
sd(asset_returns$MSFT - rfr_returns)
sd(asset_returns$MSFT - rfr_returns)
mean(asset_returns$MSFT - rfr_returns)
mean(asset_returns$MSFT - rfr_returns) mean(asset_returns$MSFT) mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)
(mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)) * sqrt(223)
(mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)) * sqrt(252)
table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = FALSE)
skewness(asset_returns) kurtosis(asset_returns)
VaR(asset_returns, p = 0.025)
table.Drawdowns(asset_returns$MSFT)
# Table of drawdowns table.Drawdowns(asset_returns$MSFT) # Plot of drawdowns for (ticker in tickers) {     eval(parse(text = paste('chart.Drawdown(asset_returns$', ticker, ')', sep = ""))) }
# Plot of drawdowns for (ticker in tickers) {     eval(parse(text = paste('chart.Drawdown(asset_returns$', ticker, ')', sep = "")))     eval(parse(text = paste('table.Drawdowns(asset_returns$', ticker, ')', sep = ""))) }
eval(parse(text = paste('table.Drawdowns(asset_returns$', ticker, ')', sep = "")))
# Plot of drawdowns for (ticker in tickers) {     eval(parse(text = paste('chart.Drawdown(asset_returns$', ticker, ')', sep = "")))     print(eval(parse(text = paste('table.Drawdowns(asset_returns$', ticker, ')', sep = "")))) }
# Plot of drawdowns for (ticker in tickers) {     eval(parse(text = paste('chart.Drawdown(asset_returns$', ticker, ')', sep = "")))     print(ticker)     print(eval(parse(text = paste('table.Drawdowns(asset_returns$', ticker, ')', sep = "")))) }
# Create returns_estim  returns_estim <- window(asset_returns, start = "2011-01-01", end = "2015-12-31") # Create returns_eval returns_eval <- window(asset_returns, start = "2016-01-01", end = toDate) # Create vector of max weights max_weights <- rep(0.20, ncol(asset_returns)) # Create portfolio with estimation sample  pf_estim <- portfolio.optim(returns_estim, reshigh = max_weights) # Create portfolio with evaluation sample pf_eval <- portfolio.optim(returns_eval, reshigh = max_weights) # Create a scatter plot plot(pf_estim$pw, pf_eval$pw) abline(h = 0, b = 1, lty = 3)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics)
# Create returns_estim  returns_estim <- window(asset_returns, start = "2011-01-01", end = "2015-12-31") # Create returns_eval returns_eval <- window(asset_returns, start = "2016-01-01", end = toDate)
# Create vector of max weights max_weights <- rep(0.20, ncol(asset_returns))
# Create portfolio with estimation sample  pf_estim <- portfolio.optim(returns_estim, reshigh = max_weights)
install.packages("tseries")
library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries)
# Create returns_estim  returns_estim <- window(asset_returns, start = "2011-01-01", end = "2015-12-31") # Create returns_eval returns_eval <- window(asset_returns, start = "2016-01-01", end = toDate) # Create vector of max weights max_weights <- rep(0.20, ncol(asset_returns)) # Create portfolio with estimation sample  pf_estim <- portfolio.optim(returns_estim, reshigh = max_weights) # Create portfolio with evaluation sample pf_eval <- portfolio.optim(returns_eval, reshigh = max_weights)
library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_monthly) #head(rfr_returns_monthly) #tail(rfr_returns_monthly) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) # head(rfr_returns) # tail(rfr_returns,90) # dim(rfr_returns)
# Create returns_estim  returns_estim <- window(asset_returns, start = "2011-01-01", end = "2015-12-31") # Create returns_eval returns_eval <- window(asset_returns, start = "2016-01-01", end = toDate) # Create vector of max weights max_weights <- rep(0.20, ncol(asset_returns)) # Create portfolio with estimation sample  pf_estim <- portfolio.optim(returns_estim, reshigh = max_weights) # Create portfolio with evaluation sample pf_eval <- portfolio.optim(returns_eval, reshigh = max_weights) # Create a scatter plot plot(pf_estim$pw, pf_eval$pw) abline(h = 0, b = 1, lty = 3)
# Create returns_estim  returns_estim <- window(asset_returns, start = "2011-01-01", end = "2015-12-31") # Create returns_eval returns_eval <- window(asset_returns, start = "2016-01-01", end = toDate) # Create vector of max weights max_weights <- rep(0.25, ncol(asset_returns)) # Create portfolio with estimation sample  pf_estim <- portfolio.optim(returns_estim, reshigh = max_weights) # Create portfolio with evaluation sample pf_eval <- portfolio.optim(returns_eval, reshigh = max_weights) # Create a scatter plot plot(pf_estim$pw, pf_eval$pw) abline(h = 0, b = 1, lty = 3)
# Create a scatter plot plot(pf_estim$pw, pf_eval$pw) abline(h = 0, b = 1, lty = 3)
# Create returns_pf_estim returns_pf_estim <- Return.portfolio(returns_estim, pf_estim$pw, rebalance_on = "months") # Create returns_pf_eval returns_pf_eval <- Return.portfolio(returns_eval, pf_estim$pw, rebalance_on = "months") # Print a table for your estimation portfolio table.AnnualizedReturns(returns_pf_estim) # Print a table for your evaluation portfolio table.AnnualizedReturns(returns_pf_eval)
# Calculate each stocks mean returns stockmu <- colMeans(asset_returns) # Create a grid of target values grid <- seq(from = 0.01, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, 30) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = returns, pm = grid[i])     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
# Calculate each stocks mean returns stockmu <- colMeans(asset_returns) # Create a grid of target values grid <- seq(from = 0.01, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, 30) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns, pm = grid[i])     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
stockmu
# Calculate each stocks mean returns stockmu <- colMeans(asset_returns) # Create a grid of target values grid <- seq(from = 0.0001, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, 30) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns, pm = grid[i])     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
stockmu
grid
for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns, pm = grid[i], rf = rfr_returns)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
stockmu
tail(asset_returns)
tail(rfr_returns,90)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_monthly)
? to.period
asset_returns_monthly <- to.period(asset_returns, period = 'months')
head(asset_returns_monthly)
asset_adjusted_monthly <- to.period(asset_adjusted, period = 'months')
head(asset_adjusted_monthly)
asset_adjusted
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "")
head(asset_adjusted)
monthlyReturn(dataEnv$MSFT)
monthlyReturn(dataEnv$MSFT, leading = TRUE)
data(edhec)
head(edhec)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "")
head(asset_adjusted)
head(asset_returns)
z <- monthlyReturn(dataEnv)
z <- monthlyReturn(dataEnv$MSFT)
head(z)
arm <- do.call(merge, eapply(dataEnv, monthlyReturn))
head(arm)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") asset_returns_monthly <- do.call(merge, eapply(dataEnv, monthlyReturn)) colnames(asset_returns_monthly) <- paste(tickers, ".Returns", sep = "")
head(asset_returns_monthly)
head(asset_returns)
getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate]
plot(rfr_returns_monthly)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") asset_returns_monthly <- do.call(merge, eapply(dataEnv, monthlyReturn)) colnames(asset_returns_monthly) <- paste(tickers, ".Returns", sep = "") index(asset_returns_monthly) <- as.yearmon(index(asset_returns_monthly))
head(asset_returns_monthly) tail(asset_returns_monthly)
plot(asset_returns_monthly$MSFT.Returns)
plot(asset_returns_monthly$AMZN.Returns)
source("D:/Personal/OneDrive/Projects/Projects-R/QuantitativeAnalystWithR/QuantitativeAnalystWithR/Experiment PotfolioAnalysis03.R", echo = TRUE, encoding = "Windows-1252")
plot(asset_returns_monthly)
? plot
plot.zoo(asset_returns_monthly)
plot(asset_returns_monthly)
plot(asset_returns_monthly) legend('topright', tickers,    lty = 1, col = c('red', 'blue', 'green', ' brown'), bty = 'n', cex = .75)
plot(asset_returns_monthly$MSFT) legend('topright', tickers,    lty = 1, col = c('red', 'blue', 'green', ' brown'), bty = 'n', cex = .75)
plot(asset_returns_monthly) legend('topright', tickers,    lty = 1, col = c('red', 'blue', 'green', ' brown'), bty = 'n', cex = .75)
plot(asset_returns_monthly$AMZN) legend('topright', tickers,    lty = 1, col = c('red', 'blue', 'green', ' brown'), bty = 'n', cex = .75)
plot(asset_returns_monthly)
plot(asset_returns_monthly$MSFT)
plot(asset_returns_monthly) legend('topright', tickers,    lty = 1, col = c('red', 'blue', 'green', ' brown'), bty = 'n', cex = .75)
plot(asset_returns_monthly)
plot.xts(asset_returns_monthly)
head(asset_returns_monthly) tail(asset_returns_monthly) plot.xts(asset_returns_monthly)
head(asset_returns_monthly) tail(asset_returns_monthly) plot.zoo(asset_returns_monthly)
?plot
for (ticker in tickers) {     eval(parse(text = paste('plot(asset_returns_monthly$', ticker,', main = ',ticker,  ')', sep = ""))) }
head(asset_returns_monthly)
for (ticker in tickers) {     eval(parse(text = paste('plot(asset_returns_monthly$', ticker,'.Returns, main = ',ticker,  ')', sep = ""))) }
for (ticker in tickers) {     eval(parse(text = paste('plot(asset_returns_monthly$', ticker,'.Returns, main = "',ticker,  '")', sep = ""))) }
for (ticker in tickers) {     print(eval(parse(text = paste('plot(asset_returns_monthly$', ticker,'.Returns, main = "',ticker,  '")', sep = "")))) }
#---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) index(rfr_returns_monthly) <- as.yearmon(index(rfr_returns monthly))
index(rfr_returns_monthly) <- as.yearmon(index(rfr_returns_monthly))
plot(rfr_returns_monthly)
plot(rfr_returns)
plot(rfr_returns_monthly)
plot(rfr_returns)
plot(rfr_returns_monthly)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") asset_returns_monthly <- do.call(merge, eapply(dataEnv, monthlyReturn)) colnames(asset_returns_monthly) <- paste(tickers, ".Returns", sep = "") index(asset_returns_monthly) <- as.yearmon(index(asset_returns_monthly)) for (ticker in tickers) {     print(eval(parse(text = paste('plot(asset_returns_monthly$', ticker,'.Returns, main = "',ticker,  '")', sep = "")))) } # head(asset_returns) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_monthly <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_monthly, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) index(rfr_returns_monthly) <- as.yearmon(index(rfr_returns_monthly)) plot(rfr_returns_monthly)
 head(asset_returns_monthly)
mean(asset_returns$MSFT - rfr_returns) mean(asset_returns$MSFT) mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns) (mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)) * sqrt(252) table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = FALSE) table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = TRUE)
mean(asset_returns_monthly$MSFT - rfr_returns_monthly)
mean(asset_returns_monthly$MSFT)
mean(rfr_returns_monthly)
mean(asset_returns_monthly$MSFT - rfr_returns_monthly) mean(asset_returns_monthly$MSFT) mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly) (mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly)) * sqrt(12)
table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = FALSE) table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = TRUE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") asset_returns_monthly <- do.call(merge, eapply(dataEnv, monthlyReturn)) colnames(asset_returns_monthly) <- paste(tickers, ".Returns", sep = "") index(asset_returns_monthly) <- as.yearmon(index(asset_returns_monthly)) for (ticker in tickers) {     print(eval(parse(text = paste('plot(asset_returns_monthly$', ticker,'.Returns, main = "',ticker,  '")', sep = "")))) } # head(asset_returns_monthly) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_raw <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_raw, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) rfr_returns_monthly <- rfr_returns_raw / (12 * 100) index(rfr_returns_monthly) <- as.yearmon(index(rfr_returns_monthly)) plot(rfr_returns_monthly)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") asset_returns_monthly <- do.call(merge, eapply(dataEnv, monthlyReturn)) colnames(asset_returns_monthly) <- paste(tickers, ".Returns", sep = "") index(asset_returns_monthly) <- as.yearmon(index(asset_returns_monthly)) for (ticker in tickers) {     print(eval(parse(text = paste('plot(asset_returns_monthly$', ticker,'.Returns, main = "',ticker,  '")', sep = "")))) } # head(asset_returns_monthly) # tail(asset_returns) # dim(asset_returns) #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_raw <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_raw) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_raw, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) rfr_returns_monthly <- rfr_returns_raw / (12 * 100) index(rfr_returns_monthly) <- as.yearmon(index(rfr_returns_monthly))
mean(asset_returns_monthly$MSFT - rfr_returns_monthly)
mean(asset_returns_monthly$MSFT - rfr_returns_monthly) mean(asset_returns_monthly$MSFT)
mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly)
(mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly)) * sqrt(12) table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = FALSE)
table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = TRUE)
(mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly)) * sqrt(12)
(mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)) * sqrt(252) table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = FALSE)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") asset_returns_monthly <- do.call(merge, eapply(dataEnv, monthlyReturn))
head(asset_returns_monthly)
colnames(asset_returns_monthly) <- paste(tickers, ".Returns", sep = "") index(asset_returns_monthly) <- as.yearmon(index(asset_returns_monthly))
head(asset_returns_monthly)
getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_raw <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_raw)
# Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_raw, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) rfr_returns_monthly <- rfr_returns_raw / (12 * 100) index(rfr_returns_monthly) <- as.yearmon(index(rfr_returns_monthly))
rfr_returns_monthly
(mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly)) * sqrt(12) table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = FALSE)
mean(asset_returns_monthly$MSFT - rfr_returns_monthly)
mean(asset_returns_monthly$MSFT - rfr_returns_monthly) *12
tail(asset_returns_monthly)
head(asset_returns_monthly)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") asset_returns_monthly <- do.call(merge, eapply(dataEnv, monthlyReturn)) colnames(asset_returns_monthly) <- paste(tickers, ".Returns", sep = "") index(asset_returns_monthly) <- as.yearmon(index(asset_returns_monthly)) # Plot the returns # for (ticker in tickers) { #     print(eval(parse(text = paste('plot(asset_returns_monthly$', ticker,'.Returns, main = "',ticker,  '")', sep = "")))) # } #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_raw <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_raw) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_raw, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) rfr_returns_monthly <- rfr_returns_raw / (12 * 100) index(rfr_returns_monthly) <- as.yearmon(index(rfr_returns_monthly))
head(asset_returns_monthly) head(rfr_returns_monthly)
head(rfr_returns_raw)
head(rfr_returns_raw/12)
head(rfr_returns_raw/(12*100))
mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly)
table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = FALSE)
(mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly)) * sqrt(12) table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = FALSE)
mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly)
table.AnnualizedReturns(asset_returns_monthly, scale = 12.57, Rf = rfr_returns_monthly, geometric = FALSE)
table.AnnualizedReturns(asset_returns_monthly, scale = 12.569, Rf = rfr_returns_monthly, geometric = FALSE)
table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = TRUE)
(mean(asset_returns$MSFT - rfr_returns) / sd(asset_returns$MSFT - rfr_returns)) * sqrt(252) table.AnnualizedReturns(asset_returns, scale = 252, Rf = rfr_returns, geometric = FALSE)
(mean(asset_returns_monthly$MSFT - rfr_returns_monthly) / sd(asset_returns_monthly$MSFT - rfr_returns_monthly)) * sqrt(12) table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = FALSE)
table.AnnualizedReturns(asset_returns_monthly, scale = 12, Rf = rfr_returns_monthly, geometric = TRUE)
# Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly)
 max(stockmu)
# Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.01, to = max(stockmu), length.out = 50)
# Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, 30)
# Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
grid
for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i])     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.01, to = max(stockmu)-.0001, length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, 30) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i])     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
# Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.01, to = max(stockmu)-.0001, length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, 30) # Create your for loop for (i in 1:5) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
# Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.01, to = max(stockmu)-.0001, length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, 30) # Create your for loop for (i in 1:1) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
portfolio.optim(x = asset_returns_monthly, pm = 0.001, rf = rfr_returns_monthly)
portfolio.optim(x = asset_returns_monthly, pm = 0.1, rf = rfr_returns_monthly)
portfolio.optim(x = asset_returns_monthly, pm = 0.00001, rf = rfr_returns_monthly)
asset_returns_monthly
stockmu <- colMeans(asset_returns_monthly)
stockmu
for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly$MSFT, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
asset_returns_monthly$MSFT
data(edhec) head(edhec)
opt <- portfolio.optim(asset_returns_monthly)
opt$pw
# Load tseries library(tseries) # Create an optimized portfolio of returns opt <- portfolio.optim(asset_returns_monthly) # Create pf_weights pf_weights <- opt$pw # Assign asset names names(pf_weights) <- colnames(asset_returns_monthly) # Select optimum weights opt_weights opt_weights <- pf_weights[pf_weights >= 0.01] # Barplot of opt_weights barplot(opt_weights) # Print expected portfolio return and volatility opt$pm opt$ps
# Create portfolio with target return of average returns  pf_mean <- portfolio.optim(asset_returns_monthly, pm = mean(returns))
# Create portfolio with target return of average returns  pf_mean <- portfolio.optim(asset_returns_monthly, pm = mean(asset_returns_monthly))
# Create portfolio with target return of average returns  pf_mean <- portfolio.optim(asset_returns_monthly, pm = mean(asset_returns_monthly)) # Create portfolio with target return 10% greater than average returns pf_10plus <- portfolio.optim(asset_returns_monthly, pm = 1.1 * mean(asset_returns_monthly)) # Print the standard deviations of both portfolios pf_mean$ps pf_10plus$ps
# Calculate the proportion increase in standard deviation (pf_10plus$ps - pf_mean$ps) / (pf_mean$ps)
# Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.01, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid))
library(tseries) # Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.01, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, ncol(asset_returns_monthly)) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
opt <- portfolio.optim(asset_returns_monthly)
opt
opt <- portfolio.optim(asset_returns_monthly, pm =0.01)
opt <- portfolio.optim(asset_returns_monthly, pm =0.02)
opt <- portfolio.optim(asset_returns_monthly, pm =0.015)
opt <- portfolio.optim(asset_returns_monthly, pm =0.011)
opt <- portfolio.optim(asset_returns_monthly, pm =0.012)
opt <- portfolio.optim(asset_returns_monthly, pm =0.0115)
opt <- portfolio.optim(asset_returns_monthly, pm =0.0119)
opt <- portfolio.optim(asset_returns_monthly, pm =0.0118)
opt <- portfolio.optim(asset_returns_monthly, pm =0.01185)
opt <- portfolio.optim(asset_returns_monthly, pm =0.01189)
opt <- portfolio.optim(asset_returns_monthly, pm =0.011895)
# Load tseries library(tseries) # Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.011895, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, ncol(asset_returns_monthly)) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
opt
plot(vpm, vpsd)
plot(vpsd, vpm)
?plot
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" )
min(vpsd)
vpsd[min(vpsd)]
vpsd
which(vpsd %in% sort(vpsd)[1])
min(vpsd) vpsd[which(vpsd %in% sort(vpsd)[1])]
min(vpsd) vpm[which(vpsd %in% sort(vpsd)[1])]
paste("Minimum sd:", min(vpsd), sep =  " ")
# Load tseries library(tseries) # Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.011895, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, ncol(asset_returns_monthly)) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw } plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ")
opt
mweights[which(vpsd %in% sort(vpsd)[1]),]
tickers
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] colnames(optweights) <- tickers optweights
optweights
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers optweights
print("Optimum Weights") optweights
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights
?plot
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" )
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights
for (ticker in tickers) {     eval(parse(text = paste('chart.Drawdown(asset_returns$', ticker, ')', sep = "")))     print(ticker)     print(eval(parse(text = paste('table.Drawdowns(asset_returns$', ticker, ')', sep = "")))) }
# Load tseries library(tseries) # Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.011895, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, ncol(asset_returns_monthly)) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw } plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights
rfr_returns_monthly
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") asset_returns_monthly <- do.call(merge, eapply(dataEnv, monthlyReturn)) colnames(asset_returns_monthly) <- paste(tickers, ".Returns", sep = "") index(asset_returns_monthly) <- as.yearmon(index(asset_returns_monthly)) # Plot the returns # for (ticker in tickers) { #     print(eval(parse(text = paste('plot(asset_returns_monthly$', ticker,'.Returns, main = "',ticker,  '")', sep = "")))) # } #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_raw <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_raw) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_raw, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) rfr_returns_monthly <- rfr_returns_raw / (12 * 100) index(rfr_returns_monthly) <- as.yearmon(index(rfr_returns_monthly))
library(tseries) # Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.011895, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, ncol(asset_returns_monthly)) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw } plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights
rfr_returns_monthly
mean(rfr_returns_monthly)
vpm
vshrpe <- (vpm- mean(rfr_returns_monthly))/vpsd
which(vshrpe %in% sort(vshrpe)[1])
vshrpe
which(vshrpe %in% sort(vshrpe)[1])
vshrpe
max(vshrpe)
which(vshrpe %in% sort(vshrpe)[length(vsharpe)])
which(vshrpe %in% sort(vshrpe)[length(vshrpe)])
max(vshrpe) vshrpe[32]
vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])]
vshrpe <- (vpm - mean(rfr_returns_monthly)) / vpsd paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ")
# Load tseries library(tseries) # Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.011895, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, ncol(asset_returns_monthly)) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw } plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights vshrpe <- (vpm - mean(rfr_returns_monthly)) / vpsd paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ") paste("Corresponding sd:", vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ") optweights <- mweights[which(vshrpe %in% sort(vshrpe)[length(vshrpe)]), ] names(optweights) <- tickers print("Optimum Weights") optweights
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights vshrpe <- (vpm - mean(rfr_returns_monthly)) / vpsd paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ") paste("Corresponding sd:", vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ") optweights <- mweights[which(vshrpe %in% sort(vshrpe)[length(vshrpe)]), ] names(optweights) <- tickers print("Optimum Weights") optweights
?abline
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)" ) paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights vshrpe <- (vpm - mean(rfr_returns_monthly)) / vpsd paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ") paste("Corresponding sd:", vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ") optweights <- mweights[which(vshrpe %in% sort(vshrpe)[length(vshrpe)]), ] names(optweights) <- tickers print("Optimum Weights") optweights abline(0.016, max(vshrpe))
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(0.016, max(vshrpe))
?abline
abline(h= 0.016, b=max(vshrpe), lty = 3)
abline(a= 0.016, b=max(vshrpe), lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a= 0.016, b=max(vshrpe), lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a= 0.055, b=max(vshrpe), lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(h=max(vshrpe), lty = 3)
abline(b=max(vshrpe), lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(b=max(vshrpe), lty = 3)
?abline
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = 0.016, b = 0.3, lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = 0.016, b = 0.3, lty = 3)
?abline
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = 0, b = 0.5, lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = -0.05, b = 0.5, lty = 3)
abline(a = 0.05, b = 0.5, lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = 0.05, b = 0.5, lty = 3)
abline(a = 0, b = 0.5, lty = 3)
abline(a = 0, b = 0.2, lty = 3)
paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ")
abline(a = 0, b = 0.37, lty = 3)
abline(a = 0, b = max(vshrpe), lty = 3)
max(vshrpe)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = 0, b = max(vshrpe), lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(h = mean(rfr_returns_monthly), lty = 1) abline(v = max(vshrpe), lty = 1)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(h = mean(rfr_returns_monthly), lty = 3) abline(v = max(vshrpe), lty = 3)
?abline
abline(a= 0, h = mean(rfr_returns_monthly), lty = 3)
?abline
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(h= 0, b = mean(rfr_returns_monthly), lty = 3)
abline(h=  mean(rfr_returns_monthly), lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(v = max(vshrpe), lty = 3)
max(vshrpe)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(v = vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3)
plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(h = vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3) abline(v = vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3)
#---------------------------------------------------------------------- # Load Libraries #---------------------------------------------------------------------- # install.packages("tseries") library(quantmod) library(PerformanceAnalytics) library(PortfolioAnalytics) library(tseries) #---------------------------------------------------------------------- # Setup environment #---------------------------------------------------------------------- rm(list = ls()) dataEnv <- new.env() rfrEnv <- new.env() #---------------------------------------------------------------------- #  Setup the ticker list and dates for analysis #---------------------------------------------------------------------- tickers <- c('MSFT','AMZN','GOOGL','AAPL') fromDate <- as.Date("2011-01-01", "%Y-%m-%d") toDate <- Sys.Date() #---------------------------------------------------------------------- # Get the data for the tickers including the adjusted close # Calculate the returns #---------------------------------------------------------------------- getSymbols( Symbols = tickers,             from = fromDate,             to = toDate,             src = "yahoo",             auto.assign = TRUE,             env = dataEnv) asset_adjusted <- do.call(merge, eapply(dataEnv, Ad)) asset_returns <- Return.calculate(asset_adjusted) asset_returns <- asset_returns[-1,] colnames(asset_returns) <- paste(tickers, ".Returns", sep = "") asset_returns_monthly <- do.call(merge, eapply(dataEnv, monthlyReturn)) colnames(asset_returns_monthly) <- paste(tickers, ".Returns", sep = "") index(asset_returns_monthly) <- as.yearmon(index(asset_returns_monthly)) # Plot the returns # for (ticker in tickers) { #     print(eval(parse(text = paste('plot(asset_returns_monthly$', ticker,'.Returns, main = "',ticker,  '")', sep = "")))) # } #sapply(rfr_returns, function(x) sum(is.na(x))) #rfr_returns[!complete.cases(rfr_returns),] #sapply(asset_returns, function(x) sum(is.na(x))) #asset_returns[!complete.cases(asset_returns),] #---------------------------------------------------------------------- #  Get the US 10 Year Trasurey Rates for Risk-Free Rate # https://fred.stlouisfed.org/series/TB3MS  (FRED) #---------------------------------------------------------------------- getSymbols( Symbols = "TB3MS",             from = fromDate,             to = toDate,             src = "FRED",             auto.assign = TRUE,             env = rfrEnv) rfr_returns_raw <- rfrEnv$TB3MS[index(rfrEnv$TB3MS) >= fromDate] plot(rfr_returns_raw) #---------------------------------------------------------------------- # align rfr_returns periodicty (it's monthly) with the ticker data  # periodicity (it's irregular) #---------------------------------------------------------------------- # Create a zero-width xts object rfr_index <- xts(, order.by = index(asset_returns)) # Merge irregular_xts and regular_xts, filling NA with their previous value rfr_returns <- merge(rfr_returns_raw, rfr_index, fill = na.locf) rfr_returns <- rfr_returns[index(asset_returns),] rfr_returns <- rfr_returns / (365 * 100) rfr_returns_monthly <- rfr_returns_raw / (12 * 100) index(rfr_returns_monthly) <- as.yearmon(index(rfr_returns_monthly))
# Load tseries library(tseries) # Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.011895, to = max(stockmu), length.out = 50) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, 50, ncol(asset_returns_monthly)) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights vshrpe <- (vpm - mean(rfr_returns_monthly)) / vpsd
paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ") paste("Corresponding mean return:", vpm[vshrpe == max(vshrpe)], sep = " ")
paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[vshrpe == max(vshrpe)], sep = " ") paste("Corresponding sd:", vpsd[vshrpe == max(vshrpe)], sep = " ")
paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[vshrpe == max(vshrpe)], sep = " ") paste("Corresponding sd:", vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ")
paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[vshrpe == max(vshrpe)], sep = " ") paste("Corresponding sd:", vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], sep = " ") paste("Corresponding sd:", vpsd[vshrpe == max(vshrpe)], sep = " ")
paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[vshrpe == max(vshrpe)], sep = " ") paste("Corresponding sd:", vpsd[vshrpe == max(vshrpe)], sep = " ") optweights <- mweights[vshrpe == max(vshrpe),] names(optweights) <- tickers print("Optimum Weights") optweights plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(h = vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3) abline(v = vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3)
paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(h = vpm[which(vpsd %in% sort(vpsd)[1])], lty = 3) abline(v = min(vpsd), lty = 3)
vshrpe <- (vpm - mean(rfr_returns_monthly)) / vpsd paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[vshrpe == max(vshrpe)], sep = " ") paste("Corresponding sd:", vpsd[vshrpe == max(vshrpe)], sep = " ") optweights <- mweights[vshrpe == max(vshrpe),] names(optweights) <- tickers print("Optimum Weights") optweights plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(h = vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3) abline(v = vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3)
# Load tseries library(tseries) # Calculate each stocks mean returns stockmu <- colMeans(asset_returns_monthly) # Create a grid of target values grid <- seq(from = 0.011895, to = max(stockmu), length.out = 100) # Create empty vectors to store means and deviations vpm <- vpsd <- rep(NA, length(grid)) # Create an empty matrix to store weights mweights <- matrix(NA, length(grid), ncol(asset_returns_monthly)) # Create your for loop for (i in 1:length(grid)) {     opt <- portfolio.optim(x = asset_returns_monthly, pm = grid[i], rf = rfr_returns_monthly)     vpm[i] <- opt$pm     vpsd[i] <- opt$ps     mweights[i,] <- opt$pw }
paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(h = vpm[which(vpsd %in% sort(vpsd)[1])], lty = 3) abline(v = min(vpsd), lty = 3)
#---------------------------------------------------------------------- # Portfolio Otimum Weights - Maximum Sharpe Ratio #---------------------------------------------------------------------- vshrpe <- (vpm - mean(rfr_returns_monthly)) / vpsd paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[vshrpe == max(vshrpe)], sep = " ") paste("Corresponding sd:", vpsd[vshrpe == max(vshrpe)], sep = " ") optweights <- mweights[vshrpe == max(vshrpe),] names(optweights) <- tickers print("Optimum Weights") optweights plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(h = vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3) abline(v = vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3)
SharpeRatio.annualized(vpm)
paste("Minimum sd:", min(vpsd), sep =  " ") paste("Corresponding mean return:", vpm[which(vpsd %in% sort(vpsd)[1])], sep = " ") optweights <- mweights[which(vpsd %in% sort(vpsd)[1]),] names(optweights) <- tickers print("Optimum Weights") optweights plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(h = vpm[which(vpsd %in% sort(vpsd)[1])], lty = 3) abline(v = min(vpsd), lty = 3)
vshrpe <- (vpm - mean(rfr_returns_monthly)) / vpsd paste("Maximum Sharpe Ratio:", max(vshrpe), sep = " ") paste("Corresponding mean return:", vpm[vshrpe == max(vshrpe)], sep = " ") paste("Corresponding sd:", vpsd[vshrpe == max(vshrpe)], sep = " ") optweights <- mweights[vshrpe == max(vshrpe),] names(optweights) <- tickers print("Optimum Weights") optweights plot(vpsd, vpm, type = "l", xlab = "Volatility (sd)", ylab = "Average Returns (means)") abline(a = mean(rfr_returns_monthly), b = max(vshrpe), lty = 3) abline(h = vpm[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3) abline(v = vpsd[which(vshrpe %in% sort(vshrpe)[length(vshrpe)])], lty = 3)
loan_data <- readRDS("D:/Personal/OneDrive/LEARNING/Quantitative Analyst with R/Importing and Managing Financial Data in R/CH 11. Credit Risk Modeling in R/loan_data_ch1.rds")
head(loan_data)
head(loan_data,10)
str(loan_data)
install.packages("gmodels")
library(gmodels)
# Call CrossTable() on loan_status CrossTable(loan_data$loan_status)
# Call CrossTable() on grade and loan_status CrossTable(loan_data$grade, loan_data$loan_status, prop.r = TRUE, prop.c = FALSE, prop.t = FALSE, prop.chisq = FALSE)
hist_1 <- hist(loan_data$loan_amnt)
# Print locations of the breaks in hist_1
hist_1$breaks
# Change number of breaks and add labels: hist_2
hist_2 <- hist(loan_data$loan_amnt, breaks = 200, xlab = "Loan amount",
               main = "Histogram of the loan amount")
summary(loan_data$int_rate)
loan_data <- readRDS("D:/Personal/OneDrive/LEARNING/Quantitative Analyst with R/Importing and Managing Financial Data in R/CH 11. Credit Risk Modeling in R/loan_data_ch1.rds") head(loan_data, 10) # View the structure of loan_data str(loan_data) # Load the gmodels package  #install.package("gmodels") library(gmodels)
summary(loan_data$int_rate)
# Get indices of missing interest rates: na_index
na_index <- which(is.na(loan_data$int_rate))
# Remove observations with missing interest rates: loan_data_delrow_na
loan_data_delrow_na <- loan_data[-na_index,]
# Make copy of loan_data
loan_data_delcol_na <- loan_data
# Delete interest rate column from loan_data_delcol_na
loan_data_delcol_na$int_rate <- NULL
# Compute the median of int_rate
median_ir <- median(loan_data$int_rate, na.rm = TRUE)
# Make copy of loan_data
loan_data_replace <- loan_data
# Replace missing interest rates with median
loan_data_replace$int_rate[na_index] <- median_ir
# Check if the NAs are gone
summary(loan_data_replace$int_rate)
loan_data$ir_cat <- rep(NA, length(loan_data$int_rate))
loan_data$ir_cat[which(loan_data$int_rate <= 8)] <- "0-8"
loan_data$ir_cat[which(loan_data$int_rate > 8 & loan_data$int_rate <= 11)] <- "8-11"
loan_data$ir_cat[which(loan_data$int_rate > 11 & loan_data$int_rate <= 13.5)] <- "11-13.5"
loan_data$ir_cat[which(loan_data$int_rate > 13.5)] <- "13.5+"
loan_data$ir_cat[which(is.na(loan_data$int_rate))] <- "Missing"
loan_data$ir_cat <- as.factor(loan_data$ir_cat)
# Look at your new variable using plot()
plot(loan_data$ir_cat)
#------------------------------------------------
# Set seed of 567
set.seed(567)
# Store row numbers for training set: index_train
index_train <- sample(1:nrow(loan_data), 2 / 3 * nrow(loan_data))
# Create training set: training_set
training_set <- loan_data[index_train,]
# Create test set: test_set
test_set <- loan_data[-index_train,]
# Create confusion matrix
conf_matrix <- table(test_set$loan_status, model_pred)
# Compute classification accuracy
(conf_matrix[1, 1] + conf_matrix[2, 2]) / sum(conf_matrix)
# Compute sensitivity
conf_matrix[2, 2] / (conf_matrix[2, 2] + conf_matrix[2, 1])
