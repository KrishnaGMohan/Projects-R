substr(x, 7, 8)
v <- c("Every cloud has a silver lining")
substr(x, 7, 8)
v <- c("Every cloud has a silver lining")
substr(v, 7, 8)
substr(v, 7, 15)
substr(v, 7)
substring(v, 7)
substr(v, 7, 15)
substring(v, 7)
substring(v, 7, 20)
substring(v, 7, 24)
substr(v, 20, 26) <- c("golden")
v
v <- c("Every cloud has a silver lining")
v <- c("Every cloud has a silver lining")
substr(v, 20, 26) <- c("golden")
v
substr(v, 19, 26) <- c("golden")
v
v <- c("Every cloud has a silver lining")
v <- c("Every cloud has a silver lining")
substr(v, 19, 26) <- c("golden")
v
substr(v, 19, 26) <- c("goldenzz")
v
v <- c("Every cloud has a silver lining")
substr(v, 19, 26) <- c("golden")
v
v <- c("Every cloud has a silver lining")
v <- c("Every cloud has a silver lining")
substr(v, 19, 26) <- c("golden")
v
v <- c("Every cloud has a silver lining")
substr(v, 19, 26) <- c("platinum")
v
v <- c("Every cloud has a silver lining")
substring(v, 19) <- c("golden")
v
v <- c("Every cloud has a silver lining")
substring(v, 19) <- c("platinum")
v
paste()
help
help(paste)
? paste
paste(s, s2, s3, s2, collapse = " ")
s1 = c("waste") s2 = c("not") s3 = c("want") paste(s, s2, s3, s2, collapse = " ")
s1 = c("waste") s2 = c("not") s3 = c("want") paste(s1, s2, s3, s2, collapse = " ")
paste(s1, s2, s3, s2) paste(s1, s2, s3, s2, collapse = " ")
paste(s1, s2, s3, s2, sep =":") paste(s1, s2, s3, s2, collapse = " ")
paste(s1, s2, s3, s2, collapse)
paste(s1, s2, s3, s2, collapse = ":")
paste("1st", "2nd", "3rd", collapse = ", ") paste("1st", "2nd", "3rd", sep = ", ")
month.abb = c("Jan", "Feb", "Mar", "Apr", "May", "Jun") paste(month.abb, nth, sep = ": ", collapse = "; ")
month.abb = c("Jan", "Feb", "Mar", "Apr", "May", "Jun")
paste(month.abb, nth, sep = ": ", collapse = "; ")
(nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9))))
paste(month.abb, nth, sep = ": ", collapse = "; ")
paste(s1, s2, s3, s2, sep =":") paste(s1, s2, s3, s2, collapse = ";")
paste(c(s1, s2), c(s3, s2), collapse = ";")
paste(c(s1, s3), c(s2, s3), collapse = ";")
paste(c(s1, s3), c(s2, s3), , sep = "-", collapse = ";")
paste(c(s1, s3), c(s2, s3), sep = "-", collapse = ";")
paste(s1, s2, s3, s2, sep ="")
paste(s1, s2, s3, s2)
paste(s1, s2, s3, s2)
paste(s1, s2, s3, s2, sep ="")
paste(s1, s2, s3, s2, sep = "-")
paste(c(s1, s3), c(s2, s3), sep = "-")
paste(c(s1, s3), c(s2, s3), sep = "-", collapse = ", ")
nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9)))
MONTHS
month.abb = c("Jan", "Feb", "Mar", "Apr", "May", "Jun") nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9))) paste(month.abb, nth, sep = ": ", collapse = "; ")
nth
month.abb
nth <- paste0(1:6, c("st", "nd", "rd", rep("th", 3)))
nth
paste(month.abb, nth, sep = ": ", collapse = "; ")
today <- Sys.Date() today
today
now <- Sys.time()
now
class(now)
xdate <- as.Date("1970-10-31") xdate
class(xdate)
str1 <- "Aug 22, '07"
as.Date(str1, format = "%b %d, '%y")
str2 <- "1992-11-15"
as.Date(str2)
str3 <- "30/January/2006
as.Date(str3, format = "%d/%B/%Y")
str3 <- "30/January/2006"
as.Date(str3, format = "%d/%B/%Y")
str3 <- "30/January/89"
as.Date(str3, format = "%d/%B/%y")
as.Date(str1, format = "%b %d, '%y")
as.Date(str2)
as.Date(str3, format = "%d/%B/%y")
str1 <- "Aug 22, '07"
str2 <- "1992-11-15"
str3 <- "30/January/89"
date1 <- as.Date(str1, format = "%b %d, '%y")
date2 <- as.Date(str2)
date3 <- as.Date(str3, format = "%d/%B/%y")
str1 <- "Aug 22, '07"
str2 <- "1992-11-15"
str3 <- "30/January/89"
date1 <- as.Date(str1, format = "%b %d, '%y")
date2 <- as.Date(str2)
date3 <- as.Date(str3, format = "%d/%B/%y")
format(date1, "%A")
format(date1, "%A")
format(date2, "%d %B")
format(date2, "%B %dth, %Y, %a")
format(date3, "%b %Y")
time01 <- as.POSIXct("1970-10-31 09:15:25")
time02 <- as.POSIXct("1970-10-31 09:15:25 CET")
time01 <- as.POSIXct("1970-10-31 09:15:25")
time02 <- as.POSIXct("1970-10-31 09:15:25 CET")
time01
time02
as.POSIXct("Aug 22, '07", format = "%b %d, '%y")
as.POSIXct("Aug 22, '07, 9.25", format = "%b %d, '%y %H.%M")
as.Date(str1, format = "%b %d, '%y")
as.POSIXct("Aug 22, '07, 09.25", format = "%b %d, '%y %H.%M")
as.POSIXct("Aug 22, '07, 09:25", format = "%b %d, '%y %H:%M")
as.POSIXct("Aug 22, '07, 09:25", format = "%b %d, '%y")
as.POSIXct("Aug 22, '07, 09:25", format = "%b %d, '%y %H:%M")
str1 <- "May 23, '96 hours:23 minutes:01 seconds:45"
as.POSIXct(str1, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
str1 <- c("May 23, '96 hours:23 minutes:01 seconds:45")
as.POSIXct(str1, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
s1 <- c("1996-05-15 09:15:25") s2 <- c("May 23, '96 hours:23 minutes:01 seconds:45")
as.POSIXct(s1)
as.POSIXct(s2, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
format(time01, "%M")
format(time02, "%I:%M %p")
s1 <- c("1996-05-15 09:15:25") s2 <- c("May 23, '96 hours:23 minutes:01 seconds:45")
time01 <- as.POSIXct(s1)
time02 <- as.POSIXct(s2, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
s1 <- c("1996-05-15 09:15:25") s2 <- c("May 23, '96 hours:23 minutes:01 seconds:45")
time01 <- as.POSIXct(s1)
time02 <- as.POSIXct(s2, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
format(time01, "%M")
format(time02, "%I:%M %p")
format(time01, "%H.%M")
format(time02, "%I:%M %p")
date01 <- as.Date("2015-10-31") 
date02 <- as.Date("2015-06-12")
date01 - date02
date02 - date01
date01 + 45
date02 - 10
matrix(1:9, byrow = TRUE, nrow = 3)
? matrix
mp_vec <- c(-219.62, -101.5, -7.3, 113.7)
bp_vec <- c(-188.12, -34.04, 58.8, 184.3)
halogens_matrix <- matrix(mp_vec, bp_vec, byrows = FALSE)
mp_vec <- c(-219.62, -101.5, -7.3, 113.7)
bp_vec <- c(-188.12, -34.04, 58.8, 184.3)
halogens_matrix <- matrix(mp_vec, bp_vec, byrows = FALSE)
halogens_matrix <- matrix(mp_vec, bp_vec, byrow = FALSE)
halogens_matrix <- matrix(mp_vec, bp_vec, nrow = 4, byrow = FALSE)
halogens_matrix <- matrix(c(mp_vec, bp_vec), ncol = 2, byrow = FALSE)
halogens_matrix
halogen_matrix
halogen_matrix <- matrix(c(mp_vec, bp_vec), ncol = 2, byrow = FALSE)
halogen_matrix
colnames(halogen_matrix) <- c(mp, bp) row.names(halogen_matrix) <- c("Fluorine", "Chlorine", "Iodine", "Bromine")
colnames(halogen_matrix) <- c("mp", "bp")
rownames(halogen_matrix) <- c("Fluorine", "Chlorine", "Iodine", "Bromine")
halogen_matrix
astatine <- c(302, 337) rbind(halogen_matrix, astatine)
mp_vec <- c(-219.62, -101.5, -7.3, 113.7)
bp_vec <- c(-188.12, -34.04, 58.8, 184.3)
halogen_matrix <- matrix(c(mp_vec, bp_vec), ncol = 2, byrow = FALSE) halogen_matrix
colnames(halogen_matrix) <- c("mp", "bp") rownames(halogen_matrix) <- c("Fluorine", "Chlorine", "Iodine", "Bromine") halogen_matrix Astatine <- c(302, 337)
rbind(halogen_matrix, Astatine)
halogen_matrix
halogen_matrix <- rbind(halogen_matrix, Astatine)
halogen_matrix
halogen_matrix
atomic_wt <- c(18.998, 35.446, 79.904, 126.904, 210) halogen_matrix <- cbind(halogen_matrix, atomic_wt)
halogen_matrix
t(halogen_matrix)
x <- matrix(c(3, 2, -1, 1), nrow = 2, byrow = T)
x
solve(x)
solve(x)%*%x
sales_cars <- c(906092, 841427, 799974, 972620, 709245) sales_rvs <- c(503753, 475932, 466100, 475852, 3704430) sales_trucks_buses <- c(177490, 152684, 109435, 117685, 121288) years <- c(2007, 2008, 2009, 2010, 2011) veh_sales <- matric(c(sales_cars,sales_rvs, sales_trucks_buses), byrow =F, ncol=3)
veh_sales <- matrix(c(sales_cars,sales_rvs, sales_trucks_buses), byrow =F, ncol=3)
veh_sales
rownames(veh_sales) <- years colnames(veh_sales) <- c("sales_cars", "sales_rvs", "sales_trucks_buses")
veh_sales
colnames(veh_sales) <- c("cars", "rvs", "trucks_buses")
sales_cars <- c(906092, 841427, 799974, 972620, 709245) sales_rvs <- c(503753, 475932, 466100, 475852, 3704430) sales_trucks_buses <- c(177490, 152684, 109435, 117685, 121288) years <- c(2007, 2008, 2009, 2010, 2011) veh_sales <- matrix(c(sales_cars,sales_rvs, sales_trucks_buses), byrow =F, ncol=3) rownames(veh_sales) <- years colnames(veh_sales) <- c("cars", "rvs", "trucks_buses") veh_sales
sales_cars <- c(906092, 841427, 799974, 972620, 709245) sales_rvs <- c(503753, 475932, 466100, 475852, 370443) sales_trucks_buses <- c(177490, 152684, 109435, 117685, 121288) years <- c(2007, 2008, 2009, 2010, 2011) veh_sales <- matrix(c(sales_cars,sales_rvs, sales_trucks_buses), byrow =F, ncol=3) rownames(veh_sales) <- years colnames(veh_sales) <- c("cars", "rvs", "trucks_buses") veh_sales
sales_cars <- c(906092, 841427, 799974, 972620, 709245) sales_rvs <- c(503753, 475932, 466100, 475852, 370443) sales_trucks_buses <- c(177490, 152684, 109435, 117685, 121288) years <- c(2007, 2008, 2009, 2010, 2011) veh_sales <- matrix(c(sales_cars,sales_rvs, sales_trucks_buses), byrow =F, ncol=3) rownames(veh_sales) <- years colnames(veh_sales) <- c("cars", "rvs", "trucks_buses") veh_sales
mp_vec <- c(-219.62, -101.5, -7.3, 113.7) bp_vec <- c(-188.12, -34.04, 58.8, 184.3) halogen_matrix <- matrix(c(mp_vec, bp_vec), ncol = 2, byrow = FALSE) halogen_matrix colnames(halogen_matrix) <- c("mp", "bp") rownames(halogen_matrix) <- c("Fluorine", "Chlorine", "Iodine", "Bromine") halogen_matrix Astatine <- c(302, 337) halogen_matrix <- rbind(halogen_matrix, Astatine) halogen_matrix atomic_wt <- c(18.998, 35.446, 79.904, 126.904, 210) halogen_matrix <- cbind(halogen_matrix, atomic_wt) halogen_matrix t(halogen_matrix) v <- halogen_matrix
v
v[2,]
v["Iodine",]
v[c(1,3),]
mp_vec <- c(-219.62, -101.5, -7.3, 113.7) bp_vec <- c(-188.12, -34.04, 58.8, 184.3) halogen_matrix <- matrix(c(mp_vec, bp_vec), ncol = 2, byrow = FALSE) halogen_matrix colnames(halogen_matrix) <- c("mp", "bp") rownames(halogen_matrix) <- c("Fluorine", "Chlorine", "Iodine", "Bromine") halogen_matrix Astatine <- c(302, 337) halogen_matrix <- rbind(halogen_matrix, Astatine) halogen_matrix atomic_wt <- c(18.998, 35.446, 79.904, 126.904, 210) halogen_matrix <- cbind(halogen_matrix, atomic_wt) halogen_matrix t(halogen_matrix) v <- halogen_matrix
v[c(1,3),]
v[-c(2:4),]
v[mp < 0,]
v["mp" < 0,]
v[v[,"mp"] < 0,]
v["Bromine","bp"]
v
v[,c(1:2)]
v[,-c("atomic_wt")]
v[,c(-"atomic_wt")]
v[,c("atomic_wt")]
v[,-c("atomic_wt")]
col(v)
col(v["atomic_wt"])
col(v[,"atomic_wt"])
col(v)
v$bp
v[, c(1:2)]
v$bp
help(Extract) 
v[["bp"]]
v[,["bp"]] ] }
v[c("Fluorine","Iodine"), c("mp","bp")]
sales_cars <- c(906092, 841427, 799974, 972620, 709245) sales_rvs <- c(503753, 475932, 466100, 475852, 370443) sales_trucks_buses <- c(177490, 152684, 109435, 117685, 121288) years <- c(2007, 2008, 2009, 2010, 2011) veh_sales <- matrix(c(sales_cars,sales_rvs, sales_trucks_buses), byrow =F, ncol=3) rownames(veh_sales) <- years colnames(veh_sales) <- c("cars", "rvs", "trucks_buses") veh_sales v <- veh_sales
sales_cars <- c(906092, 841427, 799974, 972620, 709245) sales_rvs <- c(503753, 475932, 466100, 475852, 370443) sales_trucks_buses <- c(177490, 152684, 109435, 117685, 121288) years <- c(2007, 2008, 2009, 2010, 2011) veh_sales <- matrix(c(sales_cars,sales_rvs, sales_trucks_buses), byrow =F, ncol=3) rownames(veh_sales) <- years colnames(veh_sales) <- c("cars", "rvs", "trucks_buses") veh_sales s <- veh_sales
colSums(s)
rowSums(s)
colMeans(s)
rowMeans(s)
sum(s[2009],)
sum(s[2009,])
sum(s["2009",])
mean(s[,"cars"])
s[, "cars"] > mean(s[, "cars"])
s[s[, "cars"] > mean(s[, "cars"]),]
s[s[, "cars"] > mean(s[, "cars"]),"cars"]
sum(s[, "cars"] > mean(s[, "cars"]))
sample(1:9,6, replace = T)
sample(1:9,6, replace = T)
sample(1:9,6, replace = T)
matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T)
matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T)
m1 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m2 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T)
m1 m2
m1 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m2 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T)
m1 m2
sample(1:9,6, replace = T) m1 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m2 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m1 m2
sample(1:9,6, replace = T) m1 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m2 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m1 m2
sample(1:9,6, replace = T) m1 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m2 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m1 m2
sample(1:9,6, replace = T) m1 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m2 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m1 m2
sample(1:9,6, replace = T) m1 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m2 <- matrix(sample(1:9, 6, replace = T), nrow = 2, byrow = T) m1 m2
m1 <- matrix(c(1, 3, 2, 5, 8, 7), nrow = 2, byrow = T) m2 <- matrix(c(3, 6, 5, 1, 2, 7), nrow = 2, byrow = T) m1 m2
m1 + m2
m1 - m2
m1/m2
m1 * m2
m1 %*% t(m2)
t(m2)
m1 %*% t(m2)
solve(m1)
m3 <- m1 %*% t(m2)
solve(m1)
m3 <- m1 %*% t(m2) solve(m3)
m1 %*% t(m2)
solve(m3)
m3 %*% solve(m3)
A <- matrix(c(1,2,-1, 2,1,1,1,2,1), byrow = T, nrow=3)
A
B <- matrix(c(4, -2, 2), byrow = F, nrow = 3)
B
solve(A,B)
gender_vec <- c("F", "M", "F", "F", "M", "F", "M") response_vec <- c("H","E","E","M","E","H","M") survey <- survey_matrix(c(gender_vec,response_vec), byrow = F, ncol =2)
survey <- matrix(c(gender_vec,response_vec), byrow = F, ncol =2)
survey
colnames(survey) <- c("gender", "response")
survey
str(survey)
summary(survey)
factor(survey[,"gender"])
factor(survey[,"gender"], ordered = F, levels = c("Female","Male"))
survey[,"gender"]
factor(gender_vec, ordered = F, levels = c("Female","Male"))
factor(survey[, "gender"])
factor(survey[,"gender"], ordered = FALSE, levels = c("Female","Male"))
levels(factor(survey[, "gender"])) <- c("Female", "Male")
factor(survey[, "gender"])
factor_gender <- factor(survey[, "gender"], ordered = FALSE, levels = c("Female", "Male"))
factor_gender
factor_gender <- factor(gender_vec, levels = c("Female", "Male"))
factor_gender
factor_gender <- factor(gender_vec)
factor_gender
factor_gender <- factor(gender_vec) levels(factor_gender) <- c("Female", "Male")
factor_gender
factor_gender <- factor(survey[, "gender"])
factor_gender
levels(factor_gender) <- c("Female", "Male")
factor_gender
summary(survey)
summary(factor_gender)
levels(factor(survey[, "gender"])) <- c("Female", "Male")
factor_response <- factor(survey[, "response"])
factor_response <- factor(survey[, "response"]) levels(factor_response, ordered = T, c("Easy","Medium","Hard"))
?levels
?factor
factor_response <- factor(response_vec, levels =c("E","M","H"), ordered =T, labels = c("Easy","Medium","Hard"))
factor_response
factor_gender <- factor(gender_vec, levels = c("M","F"), ordered = F, labels = c("Male", "Female"))
factor_gender
summary(factor_gender)
summary(factor_response)
gender_vec <- c("F", "M", "F", "F", "M", "F", "M", "M", "M", "F") response_vec <- c("H", "E", "M", "VE", "E", "VH", "M", "E", "H", "M") factor_gender <- factor(gender_vec, levels = c("M","F"), ordered = F, labels = c("Male", "Female"))
factor_gender 
factor_gender <- factor(gender_vec,             levels = c("M", "F"),             ordered = F,             labels = c("Male", "Female")             )
factor_gender
summary(factor_gender)
game_difficulty <- c("VE", "E", "M", "H", "VH") game_difficulty_desc <- c("VeryEasy", "Easy", "Medium", "Hard", "VeryHard") factor_response <- factor(response_vec,                      levels = game_difficulty,                      ordered = T,                      labels = game_difficulty_desc)
factor_response
summary(factor_response)
factor_response[2] > factor_response[5]
factor_response[2] factor_response[5] factor_response[2] > factor_response[5]
factor_response[2] factor_response[6] factor_response[2] > factor_response[5]
factor_response[2] factor_response[6] factor_response[2] > factor_response[6]
factor_response[2]
factor_response[6]
factor_response[2] > factor_response[6]
emp <- list(2501, "Joe", "Sales", as.date(2013 - 04 - 15), 75000) str(emp)
emp <- list(2501, "Joe", "Sales", as.date("2013-04-15"), 75000)
emp <- list(2501, "Joe", "Sales", as.Date("2013-04-15"), 75000)
str(emp)
names(emp) <- c("EmpID","FName","Dept","DOJ","Salary")
str(emp)
emp[[1]]
emp[c(3,5)]
emp$DOJ
#------------------------------------ # Demo 11: Lists #  #------------------------------------ emp <- list(2501, "Joe", "Sales", as.Date("2013-04-15"), 75000) str(emp) names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary") str(emp) emp[[1]] emp[c(3, 5)] emp$DOJ
str(emp)
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"), as.Date("2015-08-22"), as.Date("2014-06-12"), as.Date("2013-01-11"), as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) emp <- list(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary)
emp
str(emp)
names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary")
str(emp)
emp$FName
emp$FName[[2]]
emp[["FName"]]
emp[["FName"]][[2]]
emp$FName == "Lynda"
emp$FNAME[emp$FName == "Lynda"]
emp$FNAME[[emp$FName == "Lynda"]]
emp$FName
emp$FName[emp$FName == "Lynda"]
emp$Salary[emp$FName == "Lynda"]
emp$FName[emp$DOJ > Today() - 365]
emp$FName[emp$DOJ > today() - 365]
emp$FName[emp$DOJ > Sys.Date() - 365]
emp$FName[emp$DOJ > Sys.Date() - 365*2]
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(   as.Date("2013-04-15"),                  as.Date("2015-08-22"),                  as.Date("2014-06-12"),                  as.Date("2013-01-11"),                  as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000)
emp <- list(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary") str(emp)
emp[["FName"]][[2]] emp$FName[[2]] emp$Salary[emp$FName == "Lynda"] emp$FName[emp$DOJ > Sys.Date() - 365*2]
emp$Salary[emp$Dept == "Marketing"]
mean(emp$Salary[emp$Dept == "Marketing"])
emp$FName[emp$DOJ > Sys.Date() - 365*3]
sum(emp$Salary[emp$Dept == "Marketing"])
emp[["FName"]][[2]]
emp[["FName"]][[4]]
emp$FName[[3]]
emp$FName[[4]]
emp$Salary[emp$FName == "Lynda"]
emp$FName[emp$DOJ > Sys.Date() - 365*3]
mean(emp$Salary[emp$Dept == "Marketing"])
order(emp)
order(emp$FName)
emp[[order(emp$FName)]]
emp[[order(emp$FName)]][[2]]
order(emp$FName)
joe.sales <- c(Q1 = 235000, Q2 = 185930, Q3 = 152728, Q4 = 744713) edwin.sales <- c(Q1 = 254854, Q2 = 197676, Q3 = 149097, Q4 = 711764) sales <- c(joe.sales, brian.sales)
joe.sales <- c(Q1 = 235000, Q2 = 185930, Q3 = 152728, Q4 = 744713) edwin.sales <- c(Q1 = 254854, Q2 = 197676, Q3 = 149097, Q4 = 711764) sales <- c(joe.sales, edwin.sales)
emp <- list (emp, sales)
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(   as.Date("2013-04-15"),                  as.Date("2015-08-22"),                  as.Date("2014-06-12"),                  as.Date("2013-01-11"),                  as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) emp <- list(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary") str(emp) emp[["FName"]][[4]] emp$FName[[4]] emp$Salary[emp$FName == "Lynda"] emp$FName[emp$DOJ > Sys.Date() - 365*3] mean(emp$Salary[emp$Dept == "Marketing"]) joe.sales <- c(Q1 = 235000, Q2 = 185930, Q3 = 152728, Q4 = 744713) edwin.sales <- c(Q1 = 254854, Q2 = 197676, Q3 = 149097, Q4 = 711764) sales <- c(joe.sales, edwin.sales) emp <- list (emp, sales)
str(emp)
emp <- list(emp, joe.sales, edwin.sales)
str(emp)
sales <- c(joe.sales = joe.sales, edwin.sales = edwin.sales)
emp <- list(emp, joe.sales, edwin.sales)
str(emp)
str(sales)
emp <- list(emp, sales)
str(emp)
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(   as.Date("2013-04-15"),                  as.Date("2015-08-22"),                  as.Date("2014-06-12"),                  as.Date("2013-01-11"),                  as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) emp <- list(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary") str(emp) emp[["FName"]][[4]] emp$FName[[4]] emp$Salary[emp$FName == "Lynda"] emp$FName[emp$DOJ > Sys.Date() - 365*3] mean(emp$Salary[emp$Dept == "Marketing"]) joe.sales <- c(Q1 = 235000, Q2 = 185930, Q3 = 152728, Q4 = 744713) edwin.sales <- c(Q1 = 254854, Q2 = 197676, Q3 = 149097, Q4 = 711764) sales <- c(joe.sales = joe.sales, edwin.sales = edwin.sales) emp <- list(emp, sales)
str(emp)
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(   as.Date("2013-04-15"),                  as.Date("2015-08-22"),                  as.Date("2014-06-12"),                  as.Date("2013-01-11"),                  as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) emp <- list(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary") str(emp) emp[["FName"]][[4]] emp$FName[[4]] emp$Salary[emp$FName == "Lynda"] emp$FName[emp$DOJ > Sys.Date() - 365*3] mean(emp$Salary[emp$Dept == "Marketing"]) joe.sales <- c(Q1 = 235000, Q2 = 185930, Q3 = 152728, Q4 = 744713) edwin.sales <- c(Q1 = 254854, Q2 = 197676, Q3 = 149097, Q4 = 711764) sales <- c(joe.sales = joe.sales, edwin.sales = edwin.sales) emp <- list(emp, sales) names(emp) <- c(names(emp), "Sales")
str(emp)
emp$Sales
str(emp)
emp <- list(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary") str(emp) emp[["FName"]][[4]] emp$FName[[4]] emp$Salary[emp$FName == "Lynda"] emp$FName[emp$DOJ > Sys.Date() - 365*3] mean(emp$Salary[emp$Dept == "Marketing"]) joe.sales <- c(Q1 = 235000, Q2 = 185930, Q3 = 152728, Q4 = 744713) edwin.sales <- c(Q1 = 254854, Q2 = 197676, Q3 = 149097, Q4 = 711764) sales <- c(joe.sales = joe.sales, edwin.sales = edwin.sales) emp <- list(emp, sales)
emp
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(   as.Date("2013-04-15"),                  as.Date("2015-08-22"),                  as.Date("2014-06-12"),                  as.Date("2013-01-11"),                  as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) emp <- list(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary") str(emp) emp[["FName"]][[4]] emp$FName[[4]] emp$Salary[emp$FName == "Lynda"] emp$FName[emp$DOJ > Sys.Date() - 365*3] mean(emp$Salary[emp$Dept == "Marketing"]) joe.sales <- c(Q1 = 235000, Q2 = 185930, Q3 = 152728, Q4 = 744713) edwin.sales <- c(Q1 = 254854, Q2 = 197676, Q3 = 149097, Q4 = 711764) sales <- c(joe.sales = joe.sales, edwin.sales = edwin.sales) emp <- list(emp, sales)
str(emp)
emp$Sales
emp
emp[[2]]
emp[[1]]
emp[[2]]
emp[[1]]
emp[[1]]$Fname
emp$Fname
emp[[1]]
emp[[1]][["Salary"]]
emp[[2]]
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(   as.Date("2013-04-15"),                  as.Date("2015-08-22"),                  as.Date("2014-06-12"),                  as.Date("2013-01-11"),                  as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) emp <- list(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary") str(emp) emp[["FName"]][[4]] emp$FName[[4]] emp$Salary[emp$FName == "Lynda"] emp$FName[emp$DOJ > Sys.Date() - 365*3] mean(emp$Salary[emp$Dept == "Marketing"])
emp <- list(emp, joe.sales, edwin.sales)
emp
names(emp) <- c(names(emp), "joe_sales", "edwin_sales")
emp
names(emp) <- c(names(emp), "joe_sales", "edwin_sales")
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(   as.Date("2013-04-15"),                  as.Date("2015-08-22"),                  as.Date("2014-06-12"),                  as.Date("2013-01-11"),                  as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) emp <- list(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) names(emp) <- c("EmpID", "FName", "Dept", "DOJ", "Salary") str(emp) emp[["FName"]][[4]] emp$FName[[4]] emp$Salary[emp$FName == "Lynda"] emp$FName[emp$DOJ > Sys.Date() - 365*3] mean(emp$Salary[emp$Dept == "Marketing"]) joe.sales <- c(Q1 = 235000, Q2 = 185930, Q3 = 152728, Q4 = 744713) edwin.sales <- c(Q1 = 254854, Q2 = 197676, Q3 = 149097, Q4 = 711764)
emp <- list(emp, joe_sales = joe.sales, edwin_sales_edwin.sales)
emp <- list(emp, joe_sales = joe.sales, edwin_sales = edwin.sales)
emp
emp
str(emp)
emp_df <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary)
emp_df
emp
empDF
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary)
empDF
colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary")
empDF
colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF
str(empDF)
newEmp <- list(7856, "Fiona", "Marketing", Sys.Date(), 62000)
newEmp <- list(7856, "Fiona", "Marketing", Sys.Date(), 62000) empDF <- rbind(empDF, newEmp)
newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000)
newEmp
newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF)
newEmp
empDF <- rbind(empDF, newEmp)
empDF
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp)
empDF
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) newEmp1 <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) newEmp2 <- data.frame(7951, "Jessie", "Marketing", Sys.Date(), 62000) colnames(newEmp1) <- colnames(empDF) colnames(newEmp1) <- colnames(empDF) newEmps <- list(newEmp1, newEmp2) empDF <- rbind(empDF, newEmps)
newEmps
newEmp1 <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) newEmp2 <- data.frame(7951, "Jessie", "Marketing", Sys.Date(), 62000)
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) newEmp1 <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) newEmp2 <- data.frame(7951, "Jessie", "Marketing", Sys.Date(), 62000) colnames(newEmp1) <- colnames(empDF) colnames(newEmp2) <- colnames(empDF) newEmps <- list(newEmp1, newEmp2) empDF <- rbind(empDF, newEmps)
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp)
empDF
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000)
newEmp
empDF
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) empDF
emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF,emp.cityid)
empDF
emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF), "cityid")
empDF
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) # Adding a Row newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) empDF #Adding a Column emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF), "cityid")
empDF
colnames(empDF)[1:5]
colnames(empDF) <- c(colnames(empDF)[1:5], "cityid")
empDF
city.id <- c(2, 3, 4, 5) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city")
city.id <- c(2, 3, 4, 5) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") cityDF
empDF <- merge(empDF, cityDF, by = "cityid")
empDF
city.id <- c(3,2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") cityDF
empDF <- merge(empDF, cityDF, by = "cityid") empDF
city.id <- c(2,3,4,5) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city")
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) # Adding a Row newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) empDF #Adding a Column emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") empDF #---------------------- city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") cityDF empDF <- merge(empDF, cityDF, by = "cityid") empDF
temp <- edit(empDF)
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) # Adding a Row newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) empDF #Adding a Column emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") empDF #---------------------- # Merging DataFrames by column city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") cityDF empDF <- merge(empDF, cityDF, by = "cityid") empDF #------------------------------ # Editing a Data Frame
temp <- edit(empDF)
empDF
empDF[4,"salary"]
empDF[4,"salary"] <- NA
empDF
empDF[4,"salary"] <- NA empDF[2,"doj"] <- NA
empDF
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) # Adding a Row newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) empDF #Adding a Column emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") empDF #---------------------- # Merging DataFrames by column city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") cityDF empDF <- merge(empDF, cityDF, by = "cityid") empDF
empDF[4,"salary"] <- NA empDF[2,"salary"] <- NA
empDF
sum(empDF$salary)
mean(empDF$salary)
mean(na.omit(empDF$salary))
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF str(empDF) # Adding a Row newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) empDF #Adding a Column emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") empDF #---------------------- # Merging DataFrames by column city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") cityDF empDF <- merge(empDF, cityDF, by = "cityid") empDF
empDF$fname
empDF[2,6]
empDF[3, "salary"]
empDF[,c("empid":"dept")]
empDF[,"empid":"dept"]
empDF[,2:4]
empDF[3:5, 2:4]
empDF[substr(empDF$fname,1,1) == "Z", ]
empDF[empDF$salary >70000,]
empDF[empDF$salary >65000,]
empDF[empDF$salary >65000,c("fname","dept","salary")]
sum(empDF[empDF$city == "Vancoucer","salary"])
aggregate(empDF$salary ~ empDF$city,empDF, sum)
subset(empDF, select = c(fname), subset(dept == "Marketing" & salary > 65000))
subset(empDF, subset(dept == "Marketing" & salary > 65000), select = c(fname))
subset(empDF,  subset(dept == "Marketing" & salary > 65000))
subset(empDF, select = c(fname), subset(dept == "Marketing" & salary > 65000))
?subset
subset(empDF, select = c(fname), dept == "Marketing" & salary > 65000)
subset(empDF, select= c(fname,salary))
?order
subset(empDF, select = -c(fname))
subset(empDF, select = -c(cityid, empid, doj))
ts(1:8, start = c(2008, 2), frequency = 4)
?ts
ts(1:8, start = c(2008, 2), frequency = 12)
ts(1:15, start = c(2015, 1), frequency = 12)
ts(1:15, start = c(2015, 1), frequency = 4)
ts(1:15, start = c(2015, 1), frequency = 2)
ts(1:15, start = c(2015, 1), frequency = 4)
ts(1:15, start = c(2015, 1), frequency = 3)
ts1 <- ts(1:15, start = c(2015, 1), frequency = 3)
str(ts1)
ts1 <- ts(1:15, start = c(2015, 1), frequency = 4) str(ts1)
ts(1:15, start = c(2015, 1), frequency = 4)
str(ts1)
array(1:12,dim=3,dimnames =NULL)
array(1:12,dim=15,dimnames =NULL)
ls
ls()
rm(list=ls())
ls
ls()
empDF
#------------------------------------ # Demo 17: Control Structures #------------------------------------ # Preparation emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") empDF <- merge(empDF, cityDF, by = "cityid") empDF
empDF$salary <- empDF$salary * 1.56
empDF
#------------------------------------ # Demo 17: Control Structures #------------------------------------ # Preparation emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(85000, 55000, 45000, 65000, 57000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") empDF <- merge(empDF, cityDF, by = "cityid") empDF$salary <- empDF$salary * 1.56 empDF
emp$salary
empDF$salary
empDF$salary[1]
ctr <- 1 while (ctr <= 6) {     if (empDF$salary[ctr] < 45282)         empDF$salary[ctr] * 15 / 100     else if (empDF$salary[ctr] < 90563)         6792 + empDF$salary[ctr] * 20.5 / 100     else if (empDF$salary[ctr] < 140388)         16075 + empDF$salary[ctr] * 26 / 100     else if (empDF$salary[ctr] < 20000)         29029 + empDF$salary[ctr] * 29 / 100     else          46317 + empDF$salary[ctr] * 33 / 100     ctr <- ctr + 1 }
ctr <- 1 while (ctr <= 6) {     if (empDF$salary[ctr] < 45282)         tax[ctr] <- empDF$salary[ctr] * 15 / 100     else if (empDF$salary[ctr] < 90563)         tax[ctr] <- 6792 + empDF$salary[ctr] * 20.5 / 100     else if (empDF$salary[ctr] < 140388)         tax[ctr] <- 16075 + empDF$salary[ctr] * 26 / 100     else if (empDF$salary[ctr] < 20000)         tax[ctr] <- 29029 + empDF$salary[ctr] * 29 / 100     else          tax[ctr] <- 46317 + empDF$salary[ctr] * 33 / 100     ctr <- ctr + 1 }
tax <- rep(0, 6) ctr <- 1 while (ctr <= 6) {     if (empDF$salary[ctr] < 45282)         tax[ctr] <- empDF$salary[ctr] * 15 / 100     else if (empDF$salary[ctr] < 90563)         tax[ctr] <- 6792 + empDF$salary[ctr] * 20.5 / 100     else if (empDF$salary[ctr] < 140388)         tax[ctr] <- 16075 + empDF$salary[ctr] * 26 / 100     else if (empDF$salary[ctr] < 20000)         tax[ctr] <- 29029 + empDF$salary[ctr] * 29 / 100     else          tax[ctr] <- 46317 + empDF$salary[ctr] * 33 / 100     ctr <- ctr + 1 }
tax
itax <- rep(0, 6) ctr <- 1 while (ctr <= 6) {     if (empDF$salary[ctr] < 45282)         tax[ctr] <- empDF$salary[ctr] * 15 / 100     else if (empDF$salary[ctr] < 90563)         tax[ctr] <- 6792 + empDF$salary[ctr] * 20.5 / 100     else if (empDF$salary[ctr] < 140388)         tax[ctr] <- 16075 + empDF$salary[ctr] * 26 / 100     else if (empDF$salary[ctr] < 20000)         tax[ctr] <- 29029 + empDF$salary[ctr] * 29 / 100     else          tax[ctr] <- 46317 + empDF$salary[ctr] * 33 / 100     ctr <- ctr + 1 } itax
itax <- rep(0, 6) ctr <- 1 while (ctr <= 6) {     if (empDF$salary[ctr] < 45282)         itax[ctr] <- empDF$salary[ctr] * 15 / 100     else if (empDF$salary[ctr] < 90563)         itax[ctr] <- 6792 + empDF$salary[ctr] * 20.5 / 100     else if (empDF$salary[ctr] < 140388)         itax[ctr] <- 16075 + empDF$salary[ctr] * 26 / 100     else if (empDF$salary[ctr] < 20000)         itax[ctr] <- 29029 + empDF$salary[ctr] * 29 / 100     else          itax[ctr] <- 46317 + empDF$salary[ctr] * 33 / 100     ctr <- ctr + 1 } itax
empDF
itax <- rep(0, 6) # Creating an Income Tax vector ctr <- 1 # Counter for looping while (ctr <= 6) {     if (empDF$salary[ctr] < 45282)         itax[ctr] <- empDF$salary[ctr] * 15 / 100     else if (empDF$salary[ctr] < 90563)         itax[ctr] <- 6792 + empDF$salary[ctr] * 20.5 / 100     else if (empDF$salary[ctr] < 140388)         itax[ctr] <- 16075 + empDF$salary[ctr] * 26 / 100     else if (empDF$salary[ctr] < 20000)         itax[ctr] <- 29029 + empDF$salary[ctr] * 29 / 100     else          itax[ctr] <- 46317 + empDF$salary[ctr] * 33 / 100     ctr <- ctr + 1 # increment counter } itax # Display Income Tax vector
itax <- rep(0, 6) # Creating an Income Tax vector ctr <- 1 # Counter for looping while (ctr <= 6) {     if (empDF$salary[ctr] < 45282)         itax[ctr] <- empDF$salary[ctr] * 15 / 100     else if (empDF$salary[ctr] < 90563)         itax[ctr] <- 6792 + empDF$salary[ctr] * 20.5 / 100     else if (empDF$salary[ctr] < 140388)         itax[ctr] <- 16075 + empDF$salary[ctr] * 26 / 100     else if (empDF$salary[ctr] < 200000)         itax[ctr] <- 29029 + empDF$salary[ctr] * 29 / 100     else          itax[ctr] <- 46317 + empDF$salary[ctr] * 33 / 100     ctr <- ctr + 1 # increment counter } itax # Display Income Tax vector
itax <- rep(0, 6) # Creating an Income Tax vector ctr <- 1 # Counter for looping while (ctr <= 6) {     if (empDF$salary[ctr] < 45282)         itax[ctr] <- empDF$salary[ctr] * 15 / 100     else if (empDF$salary[ctr] < 90563)         itax[ctr] <- 6792 + (empDF$salary[ctr] - 45282) * 20.5 / 100     else if (empDF$salary[ctr] < 140388)         itax[ctr] <- 16075 + (empDF$salary[ctr] - 90563) * 26 / 100     else if (empDF$salary[ctr] < 200000)         itax[ctr] <- 29029 + (empDF$salary[ctr] - 140388) * 29 / 100     else          itax[ctr] <- 46317 + (empDF$salary[ctr] - 200000) * 33 / 100     ctr <- ctr + 1 # increment counter } itax # Display Income Tax vector
itax <- rep(0, 6) # Creating an Income Tax vector ctr <- 1 # Counter for looping while (ctr <= 6) {     if (empDF$salary[ctr] < 45282)         itax[ctr] <- empDF$salary[ctr] * 15 / 100     else if (empDF$salary[ctr] < 90563)         itax[ctr] <- 6792 + (empDF$salary[ctr] - 45282) * 20.5 / 100     else if (empDF$salary[ctr] < 140388)         itax[ctr] <- 16075 + (empDF$salary[ctr] - 90563) * 26 / 100     else if (empDF$salary[ctr] < 200000)         itax[ctr] <- 29029 + (empDF$salary[ctr] - 140388) * 29 / 100     else          itax[ctr] <- 46317 + (empDF$salary[ctr] - 200000) * 33 / 100     ctr <- ctr + 1 # increment counter } itax # Display Income Tax vector
empDF$salary
x <- 27 steps <-0 while (x > 1) {     if (x %% 2 == 1)         x <- 3 * x + 1     else         x <- x / 2     steps <-steps +1 } steps
x <- 27 steps <- 0 repeat {     if (x %% 2 == 1)         x <- 3 * x + 1     else         x <- x / 2     if (x == 1)         break     steps <- steps + 1 } steps
x <- 27 steps <- 0 repeat {     if (x %% 2 == 1)         x <- 3 * x + 1     else         x <- x / 2     if (x == 1) {          steps <- steps + 1         break     } } steps
x <- 27 steps <- 1 repeat {     if (x %% 2 == 1)         x <- 3 * x + 1     else         x <- x / 2     if (x == 1)          break } steps
x <- 27 steps <- 1 repeat {     if (x %% 2 == 1)         x <- 3 * x + 1     else         x <- x / 2     if (x == 1)          break     steps <- steps + 1 } steps
x <- 27 steps <- 0 repeat {     if (x %% 2 == 1)         x <- 3 * x + 1     else         x <- x / 2     steps <- steps + 1     if (x == 1)         break } steps
for (emp in empDF) {     emp }
# Preparation emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(85000, 55000, 45000, 65000, 57000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") empDF <- merge(empDF, cityDF, by = "cityid") empDF$salary <- empDF$salary * 1.56 empDF
for (emp in empDF) {     emp }
for (emp in empDF) {     print (emp) }
nrow(empDF)
for (x in 1:nrow(empDF)) {     print (empDF[[x]]) }
for (x in 1:nrow(empDF)) {     print(empDF[x,]) }
for (x in 1:nrow(empDF)) {     print(empDF[x,]$salary) }
# Preparation emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(85000, 55000, 45000, 65000, 57000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") empDF <- merge(empDF, cityDF, by = "cityid") empDF$salary <- empDF$salary * 1.56 empDF
itax <- rep(0, nrow(empDF)) # Creating an Income Tax vector for (x in 1:nrow(empDF)) {     s <- empDF[x,]$salary     if (s < 45282)         itax[x] <- s * 15 / 100     else if (s < 90563)         itax[x] <- 6792 + (s - 45282) * 20.5 / 100     else if (s < 140388)         itax[x] <- 16075 + (s - 90563) * 26 / 100     else if (s < 200000)         itax[x] <- 29029 + (s - 140388) * 29 / 100     else         itax[x] <- 46317 + (s - 200000) * 33 / 100 } empDF <- cbind(empDF, itax) empDF
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(85000, 55000, 45000, 65000, 57000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") empDF <- merge(empDF, cityDF, by = "cityid") empDF$salary <- empDF$salary * 1.56 empDF
fedtax <- rep(0, nrow(empDF)) # Creating an Federal Income Tax vector for (x in 1:nrow(empDF)) {     s <- empDF[x,]$salary     if (s < 45282)         fedtax[x] <- s * 15 / 100     else if (s < 90563)         fedtax[x] <- 6792 + (s - 45282) * 20.5 / 100     else if (s < 140388)         fedtax[x] <- 16075 + (s - 90563) * 26 / 100     else if (s < 200000)         fedtax[x] <- 29029 + (s - 140388) * 29 / 100     else         fedtax[x] <- 46317 + (s - 200000) * 33 / 100 } empDF <- cbind(empDF, fedtax) empDF
mul <- function(x, y) { x * y } mul(5, 7)
mul <- function(x, y = 8) { x * y } mul(3)
mul <- function(x, y = 8) { x * y } mul(3) mul(3, 5) mul(y = 5, x = 3)
mul(y = 7, x = 5)
mul <- function(x, y = 8) { x * y } mul(3, 5) mul(y = 5, x = 3)
fib <- function(n) {     if (n <= 1) {         return(n)     } else {         return(fib(n - 1) + fib(n - 2))     } }
fib(5)
fib(7)
fib <- function(n) {     if (n <= 1) {         return(n)     } else {         return(fib(n - 1) + fib(n - 2))     } } for (i in 1:8) {     print fib(i) }
fib <- function(n) {     if (n <= 1) {         return(n)     } else {         return(fib(n - 1) + fib(n - 2))     } } for (i in 1:8) {     fib(i) }
for (i in 1:8) {     i     fib(i) }
for (i in 1:8) {     print (i)     fib(i) }
for (i in 1:8) {     print (fib(i)) }
(function(x) { 2 ^ x + 1 })(3)
fib_series <- function(n) { fib(n) }
fib_series(5)
(function(x) { 2 ^ x + 1 })(3)
pow <- function(first, second) { retun(first ^ second) } pow(first = 2, second = 3)
pow <- function(first, second) { return(first ^ second) } pow(first = 2, second = 3)
pow(f = 2, s = 3)
pow(2, 3)
pow(first = 2, second = 3) pow(second = 3, first = 2)
emp.id <- c(2501, 4672, 3520, 2119, 1874) emp.fname <- c("Joe", "Lynda", "Zarook", "Edwin", "Brian") emp.dept <- c("Marketing", "Personnel", "Operations", "Marketing", "Operations") emp.DOJ <- c(as.Date("2013-04-15"),                 as.Date("2015-08-22"),                 as.Date("2014-06-12"),                 as.Date("2013-01-11"),                 as.Date("2014-11-21")) emp.salary <- c(75000, 65000, 58000, 69000, 62000) empDF <- data.frame(emp.id, emp.fname, emp.dept, emp.DOJ, emp.salary) empDF colnames(empDF) <- c("empid", "fname", "dept", "doj", "salary") empDF
city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") cityDF empDF <- merge(empDF, cityDF, by = "cityid") empDF
empDF
#Adding a Row newEmp <- data.frame(7856, "Fiona", "Marketing", Sys.Date(), 62000) colnames(newEmp) <- colnames(empDF) empDF <- rbind(empDF, newEmp) empDF #Adding a Column emp.cityid <- c(3, 5, 2, 2, 4, 5) empDF <- cbind(empDF, emp.cityid) colnames(empDF) <- c(colnames(empDF)[1:5], "cityid") empDF
city.id <- c(3, 2, 5, 4) city.name <- c("Ottawa", "Vancouver", "Calgary", "Toronto") cityDF <- data.frame(city.id, city.name) colnames(cityDF) <- c("cityid", "city") cityDF empDF <- merge(empDF, cityDF, by = "cityid") empDF
with(empDF, sum(salary))
attach(empDF) mean(salary) aggregate(salary ~ city, empDF, sum)
c <- list("Toronto","Vancouver", "Calgary", "Edmonton", "Winnipeg") lappy(c, length)
c <- list("Toronto","Vancouver", "Calgary", "Edmonton", "Winnipeg") lapply(c, length)
c <- list("Toronto","Vancouver", "Calgary", "Edmonton", "Winnipeg") unlist(lapply(c, length))
c <- list("Toronto","Vancouver", "Calgary", "Edmonton", "Winnipeg") unlist(lapply(c, nchar))
c <- c("Toronto","Vancouver", "Calgary", "Edmonton", "Winnipeg") unlist(lapply(c, nchar))
cities <- c("Toronto","Vancouver", "Calgary", "Edmonton", "Winnipeg") unlist(lapply(cities, nchar))
ice_hockey <- c("Canada,721204","United States,542583","Czech Republic,109103", "Russia,99172", "Finland,75871") ih_split <- strsplit(ice_hockey, split = ",")
ih_split
lapply(ih_split, function(v) { return (v[1]) })
unlist(lapply(ih_split, function(v) { return(v[1]) }))
countries <- unlist(lapply(ih_split, function(v) { return(v[1]) })) players <- unlist(lapply(ih_split, function(v) { return(v[2]) }))
players
ice_hockey <- c("Canada,721204,2.012", "United States,542583,0.168", "Czech Republic,109103,1.035", "Russia,99172,0.069", "Finland,75871,1.382")
ih_split <- strsplit(ice_hockey, split = ",") # splits 
ih_split
lapply(ih_list, calc_total_pop, function(v) { return(v[1]) }, function(v) { return(v[2]) })
ice_hockey <- c("Canada,721204,2.012", "United States,542583,0.168", "Czech Republic,109103,1.035", "Russia,99172,0.069", "Finland,75871,1.382") # To calculate the totatl poulation of the countries # we first split this into lists ih_split <- strsplit(ice_hockey, split = ",") # splits  ih_split calc_total_pop <- function(players, percPop) { players/percPop * 100 } lapply(ih_list, calc_total_pop, function(v) { return(v[1]) }, function(v) { return(v[2]) })
ice_hockey <- c("Canada,721204,2.012", "United States,542583,0.168", "Czech Republic,109103,1.035", "Russia,99172,0.069", "Finland,75871,1.382") # To calculate the totatl poulation of the countries # we first split this into lists ih_split <- strsplit(ice_hockey, split = ",") # splits  ih_split calc_total_pop <- function(players, percPop) { players/percPop * 100 } lapply(ih_split, calc_total_pop, function(v) { return(v[1]) }, function(v) { return(v[2]) })
lapply(ih_split, calc_total_pop)
ih_split <- strsplit(ice_hockey, split = ",") # splits  ih_split
ih_split <- strsplit(ice_hockey, split = ",") # splits  ih_split countries <- unlist(lapply(ih_split, function(v) { v[1] })) players <- unlist(lapply(ih_split, function(v) { v[2] })) percPop <- unlist(lapply(ih_split, function(v) { v[3] }))
lapply(torTemps2013, CelciusToFarenheit)
CelciusToFarenheit <- function(x) {(x * 1.8) + 32 } lapply(torTemps2013, CelciusToFarenheit)
torTemps2013 = c(-2.1, 13.4, 19.7, 2.9) torTemps2014 = c(-7.0, 13.4, 19.1, 4.3) torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2013) <- quarterNames names(torTemps2014) <- quarterNames names(torTemps2015) <- quarterNames CelciusToFarenheit <- function(x) {(x * 1.8) + 32 } lapply(torTemps2013, CelciusToFarenheit)
unlist(lapply(torTemps2013, CelciusToFarenheit))
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames CelciusToFarenheit <- function(x) {(x * 1.8) + 32 } torTemps2015inFarenheit <- unlist(lapply(torTemps2013, CelciusToFarenheit))
torTemps2015inFarenheit
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames torTemps2015inFarenheit <- unlist(lapply(torTemps2013,  function(x) {     (x * 1.8) + 32
} ))
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames torTemps2015inFarenheit <- unlist(lapply(torTemps2015,  function(x) {     (x * 1.8) + 32
} ))
torTemps2015inFarenheit
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames CelciusToFarenheit <- function(x) {(x * 1.8) + 32 } torTemps2015inFarenheit <- unlist(lapply(torTemps2015, CelciusToFarenheit)) torTemps2015inFarenheit
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames torTemps2015inFarenheit <- unlist(lapply(torTemps2015, convert, "F")) torTemps2015inFarenheit
convert < function(x, s) {     if (s == "F") {         return((x * 1.8) + 32)     }     else if (s == "C") {         return((x - 32) / 1.8)     }     else {         return(x)     } } torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames torTemps2015inFarenheit <- unlist(lapply(torTemps2015, convert, "F")) torTemps2015inFarenheit
convert < function(x, s) {     if (s == "F") {         return((x * 1.8) + 32)     }     else if (s == "C") {         return((x - 32) / 1.8)     }     else {         return(x)     } }
convert <- function(x, s) {     if (s == "F") {         return((x * 1.8) + 32)     }     else if (s == "C") {         return((x - 32) / 1.8)     }     else {         return(x)     } } torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames torTemps2015inFarenheit <- unlist(lapply(torTemps2015, convert, "F")) torTemps2015inFarenheit
torTemps2015inFarenheit <- unlist(lapply(torTemps2015, CelciusToFarenheit)) torTemps2015inFarenheit
torTemps2015inFarenheit <- unlist(lapply(torTemps2015,  function(x) {     (x * 1.8) + 32
} )) torTemps2015inFarenheit
cities <- c("Toronto", "Vancouver", "Calgary", "Edmonton", "Winnipeg") sapply(cities, nchar)
cities <- c("Toronto", "Vancouver", "Calgary", "Edmonton", "Winnipeg") sapply(cities, nchar, USE.NAMES = FALSE)
sapply(list(runif(10), runif(10)), function(x) c(min = min(x), mean = mean(x), max = max(x)))
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames torTemps2015inFarenheit <- unlist(lapply(torTemps2015,     function(x) {         (x * 1.8) + 32     } )) torTemps2015inFarenheit
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames CelciusToFarenheit <- function(x) {(x * 1.8) + 32 } torTemps2015inFarenheit <- sapply(torTemps2015, CelciusToFarenheit)
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames CelciusToFarenheit <- function(x) {(x * 1.8) + 32 } torTemps2015inFarenheit <- sapply(torTemps2015, CelciusToFarenheit) torTemps2015inFarenheit
torTemps2015inFarenheit <- sapply(torTemps2015, CelciusToFarenheit, USE.NAMES = FALSE) torTemps2015inFarenheit
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames CelciusToFarenheit <- function(x) {(x * 1.8) + 32 } torTemps2015inFarenheit <- sapply(torTemps2015, CelciusToFarenheit) torTemps2015inFarenheit torTemps2015inFarenheit <- sapply(torTemps2015, CelciusToFarenheit, USE.NAMES = FALSE) torTemps2015inFarenheit
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9)
CelciusToFarenheit <- function(x) {(x * 1.8) + 32 }
torTemps2015inFarenheit <- sapply(torTemps2015, CelciusToFarenheit) torTemps2015inFarenheit torTemps2015inFarenheit <- sapply(torTemps2015, CelciusToFarenheit, USE.NAMES = FALSE) torTemps2015inFarenheit
torTemps2015 = c(-7.2, 13.9, 20.7, 6.9) quarterNames = c("Q1", "Q2", "Q3", "Q4") names(torTemps2015) <- quarterNames CelciusToFarenheit <- function(x) {(x * 1.8) + 32 } torTemps2015inFarenheit <- sapply(torTemps2015, CelciusToFarenheit) torTemps2015inFarenheit torTemps2015inFarenheit <- sapply(torTemps2015, CelciusToFarenheit, USE.NAMES = FALSE) torTemps2015inFarenheit
import.package("gmp") library(gmp)
install.package("gmp") library(gmp)
install.packages("gmp")
install.packages("gmp")
library(gmp)
factorize(23456)
factorize(73245)
num <- c(65873, 37578, 74357, 75784) sapply(num, factorize)
install.packages("gmp") library(gmp) factorize(73245)
num <- c(65873, 37578, 74357, 75784) sapply(num, factorize)
lapply(num, factorize)
sapply(num, factorize)
num <- c(65873, 37578, 74357, 75784) lapply(num, factorize) sapply(num, factorize) vapply(num, factorize, FUN.VALUE = numeric(4))
num <- c(65873, 37578, 74357, 75784) lapply(num, factorize) sapply(num, factorize) vapply(num, factorize, FUN.VALUE = numeric(28))
cities <- c("Toronto", "Vancouver", "Calgary", "Edmonton", "Winnipeg") vapply(cities, nchar)
cities <- c("Toronto", "Vancouver", "Calgary", "Edmonton", "Winnipeg") vapply(cities, nchar, numeric(1))
cities <- c("Toronto", "Vancouver", "Calgary", "Edmonton", "Winnipeg") vapply(cities, nchar, numeric(1)) cities <- c("Toronto", "Vancouver", "Calgary", "Edmonton", "Winnipeg") vapply(cities, nchar, numeric(1)), USE.NAMES = FALSE)
cities <- c("Toronto", "Vancouver", "Calgary", "Edmonton", "Winnipeg") vapply(cities, nchar, numeric(1), USE.NAMES = FALSE)
cities <- c("Toronto", "Vancouver", "Calgary", "Edmonton", "Winnipeg") vapply(cities, nchar, numeric(1))
num <- c(65873, 37578, 74357, 75784) vapply(num, factorize, FUN.VALUE = numeric(28))
num <- c(65873, 37578, 74357, 75784) vapply(num, factorize, FUN.VALUE = numeric(4))
# install.packages("gmp") # library(gmp) num <- c(65873, 37578, 74357, 75784) vapply(num, factorize, FUN.VALUE = numeric(28))
num <- c(65873, 37578, 74357, 75784) vapply(num, factorize, FUN.VALUE = double)
num <- c(65873, 37578, 74357, 75784) vapply(num, factorize, FUN.VALUE = double(28))
?regex
?boxplot
library(dplyr)
library(hflights)
install.packages("hflights")
library(hflights)
head(hflights)
source("D:/Personal/OneDrive/Projects/Projects-R/R-Language/package - dplyr.R", echo = TRUE, encoding = "Windows-1252")
summary(hflights)
dim(hflights)
hflights <- tbl_df(hflights)
names(hflights)
select(hflights, - (DepTime:AirTime))
library(dplyr) library(hflights)
hflights
hflights <- tbl_df(hflights)
hflights
?mean
hflights %>%
  group_by(UniqueCarrier) %>%
  summarise(p_canc = sum(Cancelled) / n() * 100,
            avg_delay = mean(na.rm = T)) %>%
arrange(avg_delay, p_canc)
hflights %>%
  group_by(UniqueCarrier) %>%
  summarise(p_canc = sum(Cancelled) / n() * 100,
            avg_delay = mean(ArrDelay, na.rm = T)) %>%
arrange(avg_delay, p_canc)
hflights %>%
filter(!is.na(ArrDelay), ArrDelay > 0) %>%
group_by(UniqueCarrier) %>%
summarise(avg = mean(ArrDelay)) %>%
mutate(rank = rank(avg)) %>%
arrange(rank)
hflights %>%
  group_by(TailNum) %>%
  summarise(ndest = n_distinct(Dest)) %>%
  filter(ndest == 1) %>%
  summarise(nplanes = n())
hflights %>%
  group_by(UniqueCarrier, Dest) %>%
  summarise(n = n()) %>%
  mutate(rank = rank(desc(n))) %>%
  filter(rank == 1)
#-------------------------------------------------------------------------------- #  group_by(df, Group) #-------------------------------------------------------------------------------- rm(list = ls()) library(dplyr) library(hflights) hflights <- tbl_df(hflights) lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",          "DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",          "WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",          "FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa") hflights$UniqueCarrier <- lut[hflights$UniqueCarrier] names(hflights) #-------------------------------------------------------------------------------- # Use group_by() to group hflights by UniqueCarrier. # summarise() the grouped tbl with two summary variables:? p_canc, the percentage of cancelled flights # # avg_delay, the average arrival delay of flights whose delay does not equal NA. # Finally, order the carriers in the summary from low to high by their average arrival delay. Use percentage of flights cancelled to break any ties. #-------------------------------------------------------------------------------- library(dplyr) library(hflights) # Convert the hflights data.frame into a hflights tbl hflights <- tbl_df(hflights) hflights %>%   group_by(UniqueCarrier) %>%   summarise(p_canc = sum(Cancelled) / n() * 100,             avg_delay = mean(ArrDelay, na.rm = T)) %>% arrange(avg_delay, p_canc) hflights %>% group_by(UniqueCarrier) %>% summarise(p_canc = mean(Cancelled == 1) * 100, avg_delay = mean(ArrDelay, na.rm = TRUE)) %>% arrange(avg_delay, p_canc) #-------------------------------------------------------------------------------- # filter() the hflights tbl to only keep observations for #    which ArrDelay is not NA and positive. # Use group_by() on the result to group by UniqueCarrier. # Next, use summarise() to calculate the average ArrDelay per carrier. Call this summary variable avg. # Feed the result into a mutate() call:create a new variable, rank, calculated as rank(avg) . # Finally, arrange by this new rank variable #-------------------------------------------------------------------------------- # dplyr is loaded, hflights is loaded with translated carrier names # Ordered overview of average arrival delays per carrier hflights %>% filter(!is.na(ArrDelay), ArrDelay > 0) %>% group_by(UniqueCarrier) %>% summarise(avg = mean(ArrDelay)) %>% mutate(rank = rank(avg)) %>% arrange(rank) #-------------------------------------------------------------------------------- #How many airplanes only flew to only one destination ? The tbl you print out should have a single column, named nplanes and a single row. #Find the most visited destination for #    each carrier. The tbl you print out should contain four columns:? UniqueCarrier and Dest, # n, how often a carrier visited a particular destination, # rank, how each destination ranks per carrier. rank should be 1 for #    every row, as you want to find the most visited destination for #        each carrier. #-------------------------------------------------------------------------------- # dplyr and hflights (with translated carrier names) are pre-loaded # How many airplanes only flew to one destination from Houston? adv1 hflights %>%   group_by(TailNum) %>%   summarise(ndest = n_distinct(Dest)) %>%   filter(ndest == 1) %>%   summarise(nplanes = n()) # Find the most visited destination for each carrier: adv2 hflights %>%   group_by(UniqueCarrier, Dest) %>%   summarise(n = n()) %>%   mutate(rank = rank(desc(n))) %>%   filter(rank == 1)
hflights %>% filter(!is.na(ArrDelay), ArrDelay > 0) %>% group_by(UniqueCarrier) %>% summarise(avg = mean(ArrDelay)) %>% mutate(rank = rank(avg)) %>% arrange(rank)
hflights2 %>% summarise(n_carrier = n_distinct(UniqueCarrier))
library(data.table) hflights2 <- as.data.table(hflights) #-------------------------------------------------------------------------------- # Use summarise() to calculate n_carrier, the total number of unique carriers in hflights2. Whether or not you use the pipe is up to you! #-------------------------------------------------------------------------------- hflights2 %>% summarise(n_carrier = n_distinct(UniqueCarrier))
install.packages(data.table)
install.packages("data.table")
library(data.table) hflights2 <- as.data.table(hflights)
hflights2 %>% summarise(n_carrier = n_distinct(UniqueCarrier))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
source("D:/Personal/OneDrive/Projects/Projects-R/R-Language/package-ggplot2/01.ggplot2-Introduction.R", echo = TRUE, encoding = "Windows-1252")
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
# Change the command below so that cyl is treated as factor
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_point()
# Execute the following command
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_point()
DT <- read.csv("D:\DATA\LifeExpectancy\D:\DATA\LifeExpectancy.csv")
DT <- read.csv("D:\DATA\LifeExpectancy\LifeExpectancy.csv")
DT <- read.csv("D:\\DATA\\LifeExpectancy\\LifeExpectancy.csv")
head(DT)
DT <- read.csv("D:\\DATA\\LifeExpectancy\\LifeExpectancy.csv") DT <- DT[, 2:5] head(DT)
DT <- read.csv("D:\\DATA\\LifeExpectancy\\LifeExpectancy.csv") DT <- DT[, 2:5] colnames(DT$State.Territory) <- c("Country") head(DT)
DF <- read.csv("D:\\DATA\\LifeExpectancy\\LifeExpectancy.csv") DF <- DF[, 2:5] names(DF)[names(DF) == "State.Territory"] <- c("Country") head(DF)
DF <- read.csv("D:\\DATA\\LifeExpectancy\\LifeExpectancy.csv") DF <- DF[, 2:5] names(DF)[names(DF) == "State.Territory"] <- c("Country") tblLifeExpectancy <- tblLifeExpectancy(DF) tblLifeExpectancy
DF <- read.csv("D:\\DATA\\LifeExpectancy\\LifeExpectancy.csv") DF <- DF[, 2:5] names(DF)[names(DF) == "State.Territory"] <- c("Country") tblLifeExpectancy <- tbl(DF) tblLifeExpectancy
DF <- read.csv("D:\\DATA\\LifeExpectancy\\LifeExpectancy.csv") DF <- DF[, 2:5] names(DF)[names(DF) == "State.Territory"] <- c("Country") tblLifeExpectancy <- tbl_df(DF) tblLifeExpectancy
library(dplyr) DF <- read.csv("D:\\DATA\\LifeExpectancy\\LifeExpectancy.csv") DF <- DF[, 2:5] names(DF)[names(DF) == "State.Territory"] <- c("Country") tblLifeExpectancy <- tbl_df(DF) tblLifeExpectancy
glimpse(tblLifeExpectancy)
library(httr)
install.packages("httr")
library(httr) url <- "https://en.wikipedia.org/wiki/Ease_of_doing_business_index#Ranking"
dat <- GET(URL)
library(httr) url <- "https://en.wikipedia.org/wiki/Ease_of_doing_business_index#Ranking" dat <- GET(url)
dat
content(dat)
DF <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv")
dim(DF)
names(DF)
rm(list = ls())
DF1 <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") dim(DF1) names(DF1) DF2 <- read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv") dim(DF2) names(DF2)
DF <- rbind(DF1, DF2)
dim(DF)
NCDB <- tbl_df(DF)
library(dplyr)
NCDB <- tbl_df(DF)
glimpse(NCDB)
head(NCDB)
rm(list = ls())
library(dplyr)
rm(list = ls()) library(dplyr) DF <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") DF2 <- read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv") DF <- rbind(DF, DF2) dim(DF) NCDB <- tbl_df(DF) rm(DF2) rm(DF)
glimpse(NCDB) head(NCDB)
with(NCDB, paste(C_YEAR, "-", C_MNTH))
with(NCDB, paste(C_YEAR,C_MNTH, sep = "-"))
head(NCDB)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(DF, read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) dim(NCDB) NCDB <- tbl_df(NCDB) glimpse(NCDB) head(NCDB)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(DF, read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) dim(NCDB) NCDB <- tbl_df(NCDB) glimpse(NCDB) head(NCDB)
unique(NCDB$C_MNTH)
head(as.Date(NCDB$C_MNTH, "%b%"))
head(as.numeric(NCDB$C_MNTH))
head(as.Date(as.numeric(NCDB$C_MNTH), "%b%"))
unique(NCDB$C_MNTH)
c(paste("0",1:9,sep=""))
c(paste("0",1:9,sep=""),10:12)
c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX")
as.Date(1:12,"%b")
as.Date("1",format = "%b")
as.Date("01",format = "%m")
MONTHS
MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) cbind(NCDB, C_MNTH_NAME)
MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) NCDB <- cbind(NCDB, C_MNTH_NAME)
glimpse(NCDB) head(NCDB)
rm(list = ls())
select(NCDB, C_YEAR, C_MNTH_NAME, C_MNTH:P_USER)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(DF, read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) NCDB <- tbl_df(NCDB) dim(NCDB) glimpse(NCDB) head(NCDB) MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) NCDB <- cbind(NCDB, C_MNTH_NAME) select(NCDB, C_YEAR, C_MNTH_NAME, C_MNTH:P_USER)
glimpse(NCDB)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(DF, read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) NCDB <- tbl_df(NCDB) #dim(NCDB) #glimpse(NCDB) #head(NCDB) MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) NCDB <- cbind(NCDB, C_MNTH_NAME) NCDB <- select(NCDB, C_YEAR:C_MNTH, C_MNTH_NAME, C_WDAY:P_USER) head(NCDB)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(NCDB, csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) NCDB <- tbl_df(NCDB) #dim(NCDB) #glimpse(NCDB) #head(NCDB) MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) NCDB <- cbind(NCDB, C_MNTH_NAME) NCDB <- select(NCDB, C_YEAR:C_MNTH, C_MNTH_NAME, C_WDAY:P_USER) head(NCDB)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(NCDB, read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) NCDB <- tbl_df(NCDB) #dim(NCDB) #glimpse(NCDB) #head(NCDB) MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) NCDB <- cbind(NCDB, C_MNTH_NAME) NCDB <- select(NCDB, C_YEAR:C_MNTH, C_MNTH_NAME, C_WDAY:P_USER) head(NCDB)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(NCDB, read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) NCDB <- tbl_df(NCDB) #dim(NCDB) #glimpse(NCDB) #head(NCDB) MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) #rm(list = list(MNTH, MNTH_desc)) WDAY <- c(1:7, "U", "X") WDAY_desc <- c("MON","TUE","WED","THU","FRI","SAT","SUN","UNK","NOP") C_WDAY_NAME <- factor(NCDB, levels = WDAY, ordered = T, labels = WDAY_desc) #rm(list = list(WDAY, WDAY_desc)) NCDB <- cbind(NCDB, C_MNTH_NAME, C_WDAY_NAME) #NCDB <- select(NCDB, C_YEAR:C_MNTH, C_MNTH_NAME, C_WDAY:P_USER) head(NCDB)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(NCDB, read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) NCDB <- tbl_df(NCDB) #dim(NCDB) #glimpse(NCDB) #head(NCDB) MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) #rm(list = list(MNTH, MNTH_desc)) WDAY <- c(1:7, "U", "X") WDAY_desc <- c("MON","TUE","WED","THU","FRI","SAT","SUN","UNK","NOP") C_WDAY_NAME <- factor(NCDB, levels = WDAY, ordered = T, labels = WDAY_desc) #rm(list = list(WDAY, WDAY_desc)) NCDB <- cbind(NCDB, C_MNTH_NAME, C_WDAY_NAME) #NCDB <- select(NCDB, C_YEAR:C_MNTH, C_MNTH_NAME, C_WDAY:P_USER) head(NCDB)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(NCDB, read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) NCDB <- tbl_df(NCDB)
MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) WDAY <- c(1:7, "U", "X") WDAY_desc <- c("MON","TUE","WED","THU","FRI","SAT","SUN","UNK","NOP") C_WDAY_NAME <- factor(NCDB, levels = WDAY, ordered = T, labels = WDAY_desc)
rm(list = ls()) library(dplyr) NCDB <- read.csv("D:\\DATA\\NationalCollisionDatabase\\NCDB_1999_to_2012.csv") NCDB <- rbind(NCDB, read.csv("D:\\DATA\\NationalCollisionDatabase\\ncdb_2012.csv")) NCDB <- tbl_df(NCDB) #dim(NCDB) #glimpse(NCDB) #head(NCDB) MNTH <- c(paste("0", 1:9, sep = ""), 10:12, "UU", "XX") MNTH_desc <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "UNK", "NOP") C_MNTH_NAME <- factor(NCDB$C_MNTH, levels = MNTH, ordered = T, labels = MNTH_desc) WDAY <- c(1:7, "U", "X") WDAY_desc <- c("MON","TUE","WED","THU","FRI","SAT","SUN","UNK","NOP") C_WDAY_NAME <- factor(NCDB$C_WDAY, levels = WDAY, ordered = T, labels = WDAY_desc)
NCDB <- cbind(NCDB, C_MNTH_NAME, C_WDAY_NAME)
head(NCDB)
as.Date("29-May-1953")
as.Date("29-May-1953", format= "%d-%b-%Y")
as.date("29-May-53", format = "%d-%b-%Y")
as.Date("29-May-53", format = "%d-%b-%Y")
as.Date("29-May-53", format = "%d-%b-%y")
as.Date("29-May-1953", format = "%d-%b-%Y")
first_ascent <- c("29-May-1953","31-Jul-1954") as.Date(first_ascent)
as.Date(first_ascent, format = "%d-%b-%Y")
first_ascent <- c("29-May-1953","31-Jul-1954","29-May-1953","31-Jul-1954","25-May-1955","18-May-1956","15-May-1955","19-Oct-1954", "13-May-1960", "9-May-1956", "3-Jul-1953", "3-Jun-1950", "5-Jul-1958", "9-Jun-1957", "7-Jul-1956", "2-May-1964") as.Date(first_ascent, format = "%d-%b-%Y")
first_ascent <- c("29-May-1953","31-Jul-1954","25-May-1955","18-May-1956","15-May-1955","19-Oct-1954", "13-May-1960", "9-May-1956", "3-Jul-1953", "3-Jun-1950", "5-Jul-1958", "9-Jun-1957", "7-Jul-1956", "2-May-1964") as.Date(first_ascent, format = "%d-%b-%Y")
first_winter_ascent <- c("17-Feb-1980", NA, "11-Jan-1986","31-Dec-1988","9-Feb-2009","12-Feb-1985","21-Jan-1985","12-Jan-1984","26-Feb-2016", "3-Feb-1987", "9-Mar-2012","5-Mar-2013","2-Feb-2011","14-Jan-2005")
first_winter_ascent <- c("17-Feb-1980", NA, "11-Jan-1986", "31-Dec-1988", "9-Feb-2009", "12-Feb-1985", "21-Jan-1985", "12-Jan-1984", "26-Feb-2016", "3-Feb-1987", "9-Mar-2012", "5-Mar-2013", "2-Feb-2011", "14-Jan-2005") first_winter_ascent <- as.Date(first_winter_ascent, format = "%d-%b-%Y")
first_winter_ascent
peak <- c("Everest", "K2", "Kangchenjunga", "Lhotse", "Makalu", "Cho Oyu", "Dhaulagiri I", "Manaslu", "Nanga Parbat", "Annapurna I", "Gasherbrum I (Hidden Peak)", "Broad Peak", "Gasherbrum II", "Shishapangma") height_m <- c(8848, 8611, 8586, 8516, 8485, 8201, 8167, 8163, 8126, 8091, 8080, 8051, 8035, 8027) first_ascent <- c("29-May-1953", "31-Jul-1954", "25-May-1955", "18-May-1956", "15-May-1955", "19-Oct-1954", "13-May-1960", "9-May-1956", "3-Jul-1953", "3-Jun-1950", "5-Jul-1958", "9-Jun-1957", "7-Jul-1956", "2-May-1964") first_ascent <- as.Date(first_ascent, format = "%d-%b-%Y") first_winter_ascent <- c("17-Feb-1980", NA, "11-Jan-1986", "31-Dec-1988", "9-Feb-2009", "12-Feb-1985", "21-Jan-1985", "12-Jan-1984", "26-Feb-2016", "3-Feb-1987", "9-Mar-2012", "5-Mar-2013", "2-Feb-2011", "14-Jan-2005") first_winter_ascent <- as.Date(first_winter_ascent, format = "%d-%b-%Y") ascents <- c(5656, 306, 283, 461, 361, 3138, 448, 661, 335, 191, 334, 404, 930, 302) deaths <- c(223, 81, 40, 13, 31, 44, 69, 65, 68, 61, 29, 21, 21, 25)
eight_thousander <- data.frame(peak, height_m, first_ascent, first_winter_ascent, ascents, deaths)
eight_thousander
peak <- c("Everest", "K2", "Kangchenjunga", "Lhotse", "Makalu", "Cho Oyu", "Dhaulagiri I", "Manaslu", "Nanga Parbat", "Annapurna I", "Gasherbrum I", "Broad Peak", "Gasherbrum II", "Shishapangma") height_m <- c(8848, 8611, 8586, 8516, 8485, 8201, 8167, 8163, 8126, 8091, 8080, 8051, 8035, 8027) first_ascent <- c("29-May-1953", "31-Jul-1954", "25-May-1955", "18-May-1956", "15-May-1955", "19-Oct-1954", "13-May-1960", "9-May-1956", "3-Jul-1953", "3-Jun-1950", "5-Jul-1958", "9-Jun-1957", "7-Jul-1956", "2-May-1964") first_ascent <- as.Date(first_ascent, format = "%d-%b-%Y") first_winter_ascent <- c("17-Feb-1980", NA, "11-Jan-1986", "31-Dec-1988", "9-Feb-2009", "12-Feb-1985", "21-Jan-1985", "12-Jan-1984", "26-Feb-2016", "3-Feb-1987", "9-Mar-2012", "5-Mar-2013", "2-Feb-2011", "14-Jan-2005") first_winter_ascent <- as.Date(first_winter_ascent, format = "%d-%b-%Y") ascents <- c(5656, 306, 283, 461, 361, 3138, 448, 661, 335, 191, 334, 404, 930, 302) deaths <- c(223, 81, 40, 13, 31, 44, 69, 65, 68, 61, 29, 21, 21, 25) eight_thousander <- data.frame(peak, height_m, first_ascent, first_winter_ascent, ascents, deaths)
eight_thousander 
eight_thousander <- tbl_df(eight_thousander)
library(dplyr) peak <- c("Everest", "K2", "Kangchenjunga", "Lhotse", "Makalu", "Cho Oyu", "Dhaulagiri I", "Manaslu", "Nanga Parbat", "Annapurna I", "Gasherbrum I", "Broad Peak", "Gasherbrum II", "Shishapangma") height_m <- c(8848, 8611, 8586, 8516, 8485, 8201, 8167, 8163, 8126, 8091, 8080, 8051, 8035, 8027) first_ascent <- c("29-May-1953", "31-Jul-1954", "25-May-1955", "18-May-1956", "15-May-1955", "19-Oct-1954", "13-May-1960", "9-May-1956", "3-Jul-1953", "3-Jun-1950", "5-Jul-1958", "9-Jun-1957", "7-Jul-1956", "2-May-1964") first_ascent <- as.Date(first_ascent, format = "%d-%b-%Y") first_winter_ascent <- c("17-Feb-1980", NA, "11-Jan-1986", "31-Dec-1988", "9-Feb-2009", "12-Feb-1985", "21-Jan-1985", "12-Jan-1984", "26-Feb-2016", "3-Feb-1987", "9-Mar-2012", "5-Mar-2013", "2-Feb-2011", "14-Jan-2005") first_winter_ascent <- as.Date(first_winter_ascent, format = "%d-%b-%Y") ascents <- c(5656, 306, 283, 461, 361, 3138, 448, 661, 335, 191, 334, 404, 930, 302) deaths <- c(223, 81, 40, 13, 31, 44, 69, 65, 68, 61, 29, 21, 21, 25) eight_thousander <- data.frame(peak, height_m, first_ascent, first_winter_ascent, ascents, deaths) eight_thousander <- tbl_df(eight_thousander)
eight_thousander
select(eight_thousander, peak, starts_with("first"))
select(eight_thousander, peak, starts_with("first"), contains("ascent"))
select(eight_thousander, peak, starts_with("first"), contains("ascent"), -peak)
select(eight_thousander,starts_with("first"))
str(eight_thousander)
dim(eight_thousander)
names(eight_thousander)
str(eight_thousander)
head(eight_thousander)
select(eight_thousander, peak, height_m)
select(eight_thousander,starts_with("ascent"))
select(eight_thousander,contains("ascent"))
select(eight_thousander, every_one(c("peak", "ascents", "deaths")))
select(eight_thousander, one_of(c("peak", "ascents", "deaths")))
select(eight_thousander, one_of(c("peak", "ascents", "deaths", "rate")))
select(eight_thousander, one_of(c("peak", "ascents", "deaths","peak")))
select(eight_thousander,peak,paek)
select(eight_thousander,peak,peak)
select(eight_thousander, peak, rate)
select(eight_thousander, starts_with("first"))
select(eight_thousander, -deaths)
select(eight_thousander, heights_m:ascents)
eight_thousander
select(eight_thousander, height_m:ascents)
eight_thousander <- data.frame(peak, height_m, first_ascent, first_winter_ascent, ascents, deaths)
select(eight_thousander, peak, height_m)
select(eight_thousander, contains("ascent")) 
select(eight_thousander, starts_with("first"))
select(eight_thousander, -deaths)
select(eight_thousander, height_m:ascents)
select(eight_thousander, contains("ascent"), -contains("winter"))
library(dplyr) # Create a tbl to hold data about mountains higher than 8000 m peak <- c("Everest", "K2", "Kangchenjunga", "Lhotse", "Makalu", "Cho Oyu", "Dhaulagiri I", "Manaslu", "Nanga Parbat", "Annapurna I", "Gasherbrum I", "Broad Peak", "Gasherbrum II", "Shishapangma") height_m <- c(8848, 8611, 8586, 8516, 8485, 8201, 8167, 8163, 8126, 8091, 8080, 8051, 8035, 8027) first_ascent <- c("29-May-1953", "31-Jul-1954", "25-May-1955", "18-May-1956", "15-May-1955", "19-Oct-1954", "13-May-1960", "9-May-1956", "3-Jul-1953", "3-Jun-1950", "5-Jul-1958", "9-Jun-1957", "7-Jul-1956", "2-May-1964") first_ascent <- as.Date(first_ascent, format = "%d-%b-%Y") first_winter_ascent <- c("17-Feb-1980", NA, "11-Jan-1986", "31-Dec-1988", "9-Feb-2009", "12-Feb-1985", "21-Jan-1985", "12-Jan-1984", "26-Feb-2016", "3-Feb-1987", "9-Mar-2012", "5-Mar-2013", "2-Feb-2011", "14-Jan-2005") first_winter_ascent <- as.Date(first_winter_ascent, format = "%d-%b-%Y") ascents <- c(5656, 306, 283, 461, 361, 3138, 448, 661, 335, 191, 334, 404, 930, 302) deaths <- c(223, 81, 40, 13, 31, 44, 69, 65, 68, 61, 29, 21, 21, 25) eight_thousander <- data.frame(peak, height_m, first_ascent, first_winter_ascent, ascents, deaths) eight_thousander <- tbl_df(eight_thousander) # Know the contents class(eight_thousander) dim(eight_thousander) names(eight_thousander) str(eight_thousander) head(eight_thousander)
class(eight_thousander)
dim(eight_thousander)
names(eight_thousander)
str(eight_thousander)
head(eight_thousander)
filter(eight_thousander, height_m > 8500)
filter(eight_thousander, height_m > 8500, !is.na(first_winter_ascent))
filter(eight_thousander, height_m > 8500 & !is.na(first_winter_ascent))
arrange(eight_thousander, desc(first_ascent))
arrange(eight_thousander, ascents)
mutate(eight_thousander, death_rate = deaths / ascents * 100)
eight_thousander
eight_thousander <- mutate(eight_thousander, death_rate_percent = deaths / ascents * 100)
eight_thousander
mutate(eight_thousander, winter_ascent_diff = first_ascent - first_winter_ascent)
mutate(eight_thousander, winter_ascent_diff = first_winter_ascent - first_ascent)
eight_thousander <- mutate(eight_thousander, winter_ascent_diff = first_winter_ascent - first_ascent) eight_thousander
summarise(eight_thousander, avg = menu(height_m))
summarise(eight_thousander, avg = mean(height_m))
# Load the ggplot2 package
#install.packages("ggplot2")
#install.packages("colorspace")
library(ggplot2)
# Explore the mtcars data frame with str()
str(mtcars)
# Execute the following command
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
# Change the command below so that cyl is treated as factor
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_point()
library(ggplot2)
# Explore the mtcars data frame with str()
str(mtcars)
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_point()
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_point()
?ggplot
str(diamonds)
# Add geom_point() with +
ggplot(diamonds, aes(x = carat, y = price)) + geom_point()
# Add geom_point() and geom_smooth() with +
ggplot(diamonds, aes(x = carat, y = price)) + geom_point() + geom_smooth()
# The plot you created in the previous exercise
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point() +
  geom_smooth()
# Copy the above command but show only the smooth line
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_smooth()
# Copy the above command and assign the correct value to col in aes()
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) + geom_smooth()
# Keep the color settings from previous command. Plot only the points with argument alpha.
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) + geom_point(alpha = 0.4)
ggplot(diamonds, aes(x = carat, y = price))
dia_plot + geom_point()
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))
# Add a geom layer with + and geom_point()
dia_plot <- dia_plot + geom_point()
dia_plot
dia_plot + geom_point(aes(col = clarity))
ggplot(diamonds, aes(x = carat, y = price)) + geom_point(aes(col = clarity))
set.seed(1)
# The dia_plot object has been created for you
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))
# Expand dia_plot by adding geom_point() with alpha set to 0.2
dia_plot <- dia_plot + geom_point(alpha = 0.2)
# Plot dia_plot with additional geom_smooth() with se set to FALSE
diaplot + geom_smooth(se = FALSE)
# Copy the command from above and add aes() with the correct mapping to geom_smooth()
diaplot + geom_smooth(aes(col = clarity), se = FALSE)
set.seed(1)
# The dia_plot object has been created for you
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))
# Expand dia_plot by adding geom_point() with alpha set to 0.2
dia_plot <- dia_plot + geom_point(alpha = 0.2)
# Plot dia_plot with additional geom_smooth() with se set to FALSE
dia_plot + geom_smooth(se = FALSE)
# Copy the command from above and add aes() with the correct mapping to geom_smooth()
dia_plot + geom_smooth(aes(col = clarity), se = FALSE)
?abline
mtcars$cyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
# Use lm() to calculate a linear model and save it as carModel
carModel <- lm(mpg ~ wt, data = mtcars)
# Call abline() with carModel as first argument and set lty to 2
abline(carModel, lty = 2)
# Plot each subset efficiently with lapply
# You don't have to edit this code
lapply(mtcars$cyl, function(x) {
    abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
# This code will draw the legend of the plot
# You don't have to edit this code
legend(x = 5, y = 33, legend = levels(mtcars$cyl),
       col = 1:3, pch = 1, bty = "n")
# Convert cyl to factor (don't need to change)
mtcars$cyl <- as.factor(mtcars$cyl)
# Example from base R (don't need to change)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
abline(lm(mpg ~ wt, data = mtcars), lty = 2)
lapply(mtcars$cyl, function(x) {
    abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
legend(x = 5, y = 33, legend = levels(mtcars$cyl),
       col = 1:3, pch = 1, bty = "n")
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
  geom_point() + # Copy from Plot 1
geom_smooth(method = lm, se = FALSE) # Fill in using instructions Plot 2
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))
geom_point() + # Copy from Plot 2
geom_smooth(method = lm, se = FALSE) + # Copy from Plot 2
geom_smooth(aes(group = 1), method = lm, se = FALSE, linetype = 2) # Fill in using instructions Plot 3
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))
geom_point() + # Copy from Plot 2
geom_smooth(method = lm, se = FALSE) + # Copy from Plot 2
geom_smooth(aes(group = 1)+ method = lm, se = FALSE, linetype = 2) # Fill in using instructions Plot 3
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))
geom_point() + # Copy from Plot 2
geom_smooth(method = lm, se = FALSE) + # Copy from Plot 2
geom_smooth(aes(group = 1) + method = lm + se = FALSE + linetype = 2) # Fill in using instructions Plot 3
# Plot 3: include a lm for the entire dataset in its whole
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))
geom_point() + # Copy from Plot 2
geom_smooth(method = lm, se = FALSE) + # Copy from Plot 2
geom_smooth(aes(group = 1), method = lm, se = FALSE, linetype = 2) # Fill in us
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))
geom_point() + # Copy from Plot 2
geom_smooth(method = lm, se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))+
geom_point() + # Copy from Plot 2
geom_smooth(method = lm, se = FALSE) 
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))+
geom_point() + # Copy from Plot 2
geom_smooth(method = lm, se = FALSE) + # Copy from Plot 2
geom_smooth(aes(group = 1), method = lm, se = FALSE, linetype = 2) # Fill in using instructions Plot 3
# Consider the structure of iris, iris.wide and iris.tidy (in that order)
str(iris)
str(iris.wide)
str(iris.tidy)
library(tidyr)
install.packages("tidyr")
library(tidyr)
iris %>%
  gather(key, Value, - "species")
iris %>%
gather(key, Value, - c("species"))
iris %>%
gather(key, Value, - c("Species"))
iris %>%
gather(key, Value, -Species)
head(iris)
iris %>%
gather(key, Value, -Species)
head(iris %>%
gather(key, Value, - Species))
head(iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\."))
head(iris)
iris.tidy %>%
spread(Measusre, Value)
library(tidyr)
# Fill in the ___ to produce to the correct iris.tidy dataset
iris.tidy <- iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
library(tidyr)
# Fill in the ___ to produce to the correct iris.tidy dataset
iris.tidy <- iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
library(tidyr)
# Fill in the ___ to produce to the correct iris.tidy dataset
iris.tidy <- iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
iris.tidy
head(iris.tidy)
iris.tidy %>%
spread(Measusre, Value)
iris.tidy %>%
spread(Measure, Value)
head(iris.tidy)
iris.tidy %>%
spread(Measure, Value)
head(iris.tidy)
iris.tidy %>%
spread(Measure, Value)
iris.tidy
sort(iris.tidy,c("Species","Part","Measure"))
sort(iris.tidy)
?sort
iris.tidy[with(iris.tidy, order(Species, Measure, Part)),]
iris.tidy[with(iris.tidy, order(Species, Measure, Part)),] %>%
spread(Measure, Value)
iris.tidy[with(iris.tidy, order(Species, Measure, Part)),] %>%
spread(Measure, Value)
iris.tidy[with(iris.tidy, order(Species, Measure, Part)),]
head(iris)
iris %>%
gather(key, Value, - Species)
 iris %>%
gather(key, Value, - Species)
iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
iris.tidy <- iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
head(iris.tidy)
iris.tidy[with(iris.tidy, order(Species, Measure, Part)),] 
iris.tidy[with(iris.tidy, order(Species, Measure, Part)),] 
iris.tidy[with(iris.tidy, order(Species, Measure, Part)),] %>%
spread(Measure, Value)
head(iris)
iris %>%
gather(key, Value, - Species)
iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
iris.tidy[with(iris.tidy, order(Species, Measure, Part)),]
head(iris)
head(iris.wide)
head(iris)
library(tidyr)
iris$Flower <- 1:nrow(iris)
library(tidyr)
iris$Flower <- 1:nrow(iris)
head(iris)
iris %>%
  gather(key, value, - Flower, - Species)
iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.")
iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, Value)
iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value)
iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value)
iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value)[-c("Flower"),]
(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value))[-c("Flower"),]
(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value))[-"Flower",]
(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value))[-Flower,]
head(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value))
(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value))[,-Flower]
(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value))[,-c("Flower")]
(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value))[,c("Flower")]
(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value))[,-c("Flower")]
subset(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value)),select = -c("Flower"))
subset(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value), select = -c("Flower"))
subset(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value), select = -c(Flower))
# Map cyl to y
ggplot(mtcars, aes(x = mpg, y = cyl)) + geom_point()
# Map cyl to x
ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_point()
# Map cyl to col
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point()
# Change shape and size of the points in the above plot
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point(shape = 1, size = 4)
library(ggplot2)
# Map cyl to y
ggplot(mtcars, aes(x = mpg, y = cyl)) + geom_point()
# Map cyl to x
ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_point()
# Map cyl to col
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point()
# Change shape and size of the points in the above plot
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point(shape = 1, size = 4)
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, shape = disp)) +   geom_point()
mtcars
library(tidyr)
# Fill in the ___ to produce to the correct iris.tidy dataset
iris.tidy <- iris %>%
gather(key, Value, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.")
head(iris.tidy)
ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) +
  geom_jitter() +
  facet_grid(. ~ Measure)
ggplot(iris.wide, aes(x = Length, y = Width, col = Part)) +
  geom_jitter() +
  facet_grid(. ~ Species)
iris.wide <- (ris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value) iris.wide <- (iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value)
iris.wide <- (iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value) head(iris)
head(iris.wide)
head(iris.tidy)
head(iris.wide)
iris.wide <- (iris %>%
  gather(key, value, - Flower, - Species)   iris.wide <- iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, Value)
iris.wide <- iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, Value)
iris
subset(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value), select = -c(Flower))
head(iris)
head(iris.tidy)
head(iris.wide)
head(iris)
iris %>%
  gather(key, value,  - Species) 
iris %>%
  gather(key, value, - Flower, - Species)
head(iris)
cbind(iris, 1:nrow(iris))
cbind(iris, Flower = 1:nrow(iris))
cbind(iris, Flower = 1:nrow(iris)) %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, Value)
iris.wide <- cbind(iris, Flower = 1:nrow(iris)) %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value)
head(iris.wide)
iris.wide[-c("Flower")]
iris.wide[-Flower]
iris.wide <- iris.wide[, -2]
head(iris.wide)
subset(iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value), select = -c(Flower))
subset(cbind(iris, Flower = 1:nrow(iris)) %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value), select = -c(Flower))
ggplot(iris.wide, aes(x = Length, y = Width, col = Part)) +
  geom_jitter() +
  facet_grid(. ~ Species)
iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value)
iris$Flower <- 1:nrow(iris)
iris.wide <- iris %>%
  gather(key, value, - Flower, - Species) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value)
iris.wide
ggplot(mtcars, aes(x = mpg, y = cyl)) + geom_point()
ggplot(mtcars, aes(x = cyl, y = mpg)) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point(shape = 1, size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
  geom_point(shape = 1, size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
  geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) + geom_point(shape = 16, size = 6, alpha = 0.6)
ggplot(mtcars, aes(x = wt, y = mpg, size = cyl)) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, alpha = cyl)) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, shape = cyl)) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, label = cyl)) + geom_text()
my_color <- "#123456"
# Set the color aesthetic 
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point(col = my_color)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) + geom_point(size = 10, shape = 23, col = my_color)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) + geom_point(alpha = 0.5)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) + geom_point(shape = 24, color = "yellow")
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) + geom_text(label = "x", col = "red", size = 10)
cyl.am + geom_bar(position = "fill")
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
cyl.am + geom_bar(position = "fill")
cyl.am + geom_bar(position = "stack")
cyl.am + geom_bar(position = "fill")
cyl.am + geom_bar(position = "stack")
cyl.am + geom_bar(position = "fill")
cyl.am + geom_bar(position = "dodge")
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
cyl.am +
  geom_bar(position = "dodge") +
  scale_x_discrete("Cylinders") +
  scale_y_continuous("Number") +
  scale_fill_manual("Transmission",
                    values = val,
                    labels = lab)
cyl.am + geom_bar(position = "dodge")
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
cyl.am +
  geom_bar(position = "dodge") +
  scale_x_discrete("Cylinders") +
  scale_y_continuous("Number") +
  scale_fill_manual("Transmission", #
                    values = val,
                    labels = lab)
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
cyl.am +
  geom_bar(position = "dodge") +  # bar chart
  scale_x_discrete("Cylinders") +  # x-axis label
  scale_y_continuous("Number") +   # y-axis label
  scale_fill_manual("Transmission", #Legend
                    values = val, # Colors
                    labels = lab) # Labels on legend
mtcars$group <- c(0)
# Create jittered plot of mtcars: mpg onto x, group onto y
ggplot(mtcars, aes(x = mpg, y = group)) + geom_jitter()
# Change the y aesthetic limits
ggplot(mtcars, aes(x = mpg, y = group)) + geom_jitter() + scale_y_continuous(limits = c(-2, 2))
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl) + geom_point(size = 4) ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point(size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point(size = 4)
# Scatter plot: carat (x), price (y), clarity (col)
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) + geom_point()
# Adjust for overplotting
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) + geom_point(alpha = 0.5)
# Scatter plot: clarity (x), carat (y), price (col)
ggplot(diamonds, aes(x = clarity, y = carat, col = price)) + geom_point(alpha = 0.5)
# Dot plot with jittering
ggplot(diamonds, aes(x = clarity, y = carat, col = price)) + geom_point(position = "jitter", alpha = 0.5)
ggplot(diamonds, aes(x = clarity, y = carat, col = price)) + geom_point(position = "jitter", alpha = 0.5)
ggplot(diamonds, aes(x = clarity, y = carat, col = price)) + geom_point(position = "jitter", alpha = 0.5)
# The dataset mtcars is available for you
# Plot the cyl on the x-axis and wt on the y-axis
ggplot(mtcars, aes(x = cyl, y = wt)) + geom_point()
# Use geom_jitter() instead of geom_point()
ggplot(mtcars, aes(x = cyl, y = wt)) + geom_jitter()
# Define the position object using position_jitter(): posn.j
posn.j <- position_jitter(width = 0.1)
# Use posn.j in geom_point()
ggplot(mtcars, aes(x = cyl, y = wt)) + geom_point(position = posn.j)
ggplot(mtcars, aes(x = mpg)) + geom_histogram()
ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth = 1)
ggplot(mtcars, aes(x = mpg, y = ..density..)) + geom_histogram(binwidth = 1)
myBlue <- "#377EB8"
# Change the fill color to myBlue
ggplot(mtcars, aes(x = mpg, y = ..density.., fill = myBlue)) + geom_histogram(binwidth = 1)
# Make a univariate histogram
ggplot(mtcars, aes(x = mpg)) + geom_histogram()
# Change the bin width to 1
ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth = 1)
# Change the y aesthetic to density
ggplot(mtcars, aes(x = mpg)) + geom_histogram(aes(y = ..density..), binwidth = 1)
# Custom color code
myBlue <- "#377EB8"
# Change the fill color to myBlue
ggplot(mtcars, aes(x = mpg)) + geom_histogram(aes(y = ..density..), binwidth = 1, fill = myBlue)
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "dodge")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()
mtcars
# A basic histogram, add coloring defined by cyl 
ggplot(mtcars, aes(mpg, fill = cyl)) +
  geom_histogram(binwidth = 1)
# Change position to identity 
ggplot(mtcars, aes(mpg, fill = cyl)) +
  geom_histogram(binwidth = 1, position = "identity")
# Change geom to freqpoly (position is identity by default) 
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1, position = "identity")
str(Vocab)
head(economics)
ggplot(economics, aes(x = date, y = unemploy)) + geom_line()
# Adjust plot to represent the fraction of total population that is unemployed
ggplot(economics, aes(x = date, y = unemploy / pop)) + geom_line()
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy / pop)) +
  geom_line() + geom_rect(data = recess, inherit.aes = FALSE, aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf)
  , fill = "red", alpha = 0.2)
str(fish.species)
qplot(wt, mpg, data = mtcars, col = qsec)
# qplot() with geom set to jitter manually
qplot(factor(cyl), factor(vs), data = mtcars, geom = "jitter")
# Define cyl as a factor variable
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
  geom_point() +
  stat_smooth(method = "lm", se = F)
library(ggplot2)
# Define cyl as a factor variable
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
  geom_point() +
  stat_smooth(method = "lm", se = F)
# Complete the following ggplot command as instructed
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
  geom_point() +
  stat_smooth(aes(group = 1), method = "lm", se = F)
rtvs::debug_source("script.R")
# Complete the following ggplot command as instructed
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
  geom_point() +stat_smooth(method = "lm", se = F) + stat_smooth(aes(group = 1))
# Complete the following ggplot command as instructed
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
  geom_point() +
  stat_smooth(method = "lm", se = F) +
stat_smooth(aes(group = 1), method = "lm", se = F)
# Define cyl as a factor variable
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
  geom_point() +
  stat_smooth(method = "lm", se = F)
# Complete the following ggplot command as instructed
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
  geom_point() +
  stat_smooth(method = "lm", se = F) +
  stat_smooth(aes(group = 1), method = "lm", se = F)
